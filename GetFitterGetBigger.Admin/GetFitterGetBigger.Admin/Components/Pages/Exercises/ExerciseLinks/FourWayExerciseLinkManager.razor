@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@implements IDisposable

<div class="mt-6" data-testid="four-way-exercise-link-manager">
    @if (ShowComponent)
    {
        @* REST Exercise Restriction *@
        @if (IsRestExercise)
        {
            <div class="bg-gray-50 border border-gray-200 rounded-lg p-6 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M12 3v18m-9-9h18" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">REST Exercise</h3>
                <p class="mt-1 text-sm text-gray-500">REST exercises cannot have relationships with other exercises.</p>
            </div>
        }
        else
        {
            <div class="bg-white shadow-lg rounded-lg overflow-hidden">
                @* Header with Context Indicator *@
                <div class="px-4 sm:px-6 py-3 sm:py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200 transition-colors duration-200">
                    <h2 class="text-lg sm:text-xl font-semibold text-gray-900 flex items-center gap-3">
                        <div class="p-2 bg-blue-100 rounded-lg transition-all duration-200 hover:bg-blue-200">
                            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                            </svg>
                        </div>
                        Exercise Relationships
                    </h2>
                    <p class="mt-2 text-xs sm:text-sm text-gray-600 leading-relaxed">
                        @if (HasMultipleContexts)
                        {
                            <span class="inline-flex items-center gap-1">
                                <svg class="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                                </svg>
                                This exercise serves multiple roles - switch contexts using the tabs below
                            </span>
                        }
                        else
                        {
                            <span class="inline-flex items-center gap-1">
                                <svg class="w-4 h-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                </svg>
                                Connect warmup, cooldown, and alternative exercises to build comprehensive workouts
                            </span>
                        }
                    </p>
                </div>

                @* Context Selector for Multi-Type Exercises *@
                @if (HasMultipleContexts)
                {
                    <div class="px-4 sm:px-6 py-4 bg-gradient-to-b from-gray-50 to-white border-b border-gray-200 transition-all duration-300">
                        <div class="mb-2">
                            <h3 class="text-sm font-medium text-gray-700 mb-1">Exercise Context</h3>
                            <p class="text-xs text-gray-500">View and manage relationships for different exercise roles</p>
                        </div>
                        <ExerciseContextSelector Contexts="@AvailableContexts"
                                               ActiveContext="@StateService.ActiveContext"
                                               OnContextChange="@HandleContextSwitch"
                                               Disabled="@(StateService.IsLoading || StateService.IsProcessingLink)" />
                    </div>
                }

                @* Content Area *@
                <div class="p-4 sm:p-6">
                    @if (StateService.IsLoading)
                    {
                        <div class="flex flex-col items-center justify-center py-12" data-testid="loading-spinner">
                            <div class="relative">
                                <div class="absolute inset-0 rounded-full bg-blue-200 opacity-25 animate-ping"></div>
                                <div class="relative inline-block animate-spin rounded-full h-10 w-10 border-4 border-blue-600 border-r-transparent"></div>
                            </div>
                            <p class="mt-4 text-sm text-gray-600 animate-pulse">Loading exercise relationships...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(StateService.ErrorMessage))
                    {
                        <div class="rounded-md bg-red-50 p-4" data-testid="error-message">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-red-800">Error loading exercise links</h3>
                                    <p class="mt-1 text-sm text-red-700">@StateService.ErrorMessage</p>
                                    <button type="button"
                                            @onclick="async () => await StateService.LoadLinksAsync()"
                                            class="mt-2 text-sm font-medium text-red-600 hover:text-red-500">
                                        Try again
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @* Use FourWayLinkedExercisesList for all contexts - it will show appropriate sections based on context *@
                        <div data-testid="@($"{StateService.ActiveContext.ToLower()}-context-view")">
                            <FourWayLinkedExercisesList StateService="@StateService"
                                                       ValidationService="@ValidationService"
                                                       CurrentContext="@StateService.ActiveContext"
                                                       Disabled="@(StateService.IsSaving || StateService.IsDeleting)"
                                                       OnAddLink="@HandleAddLink"
                                                       OnRemoveLink="@HandleRemoveLink"
                                                       OnReorderLinks="@HandleReorderLinks"
                                                       OnViewExercise="@HandleViewExercise" />
                        </div>
                    }
                </div>
            </div>
        }


        @* Success Notification with Enhanced Animation *@
        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <div class="fixed bottom-4 right-4 left-4 sm:left-auto max-w-sm z-50 transform transition-all duration-500 ease-in-out" 
                 data-testid="success-notification">
                <div class="rounded-lg bg-gradient-to-r from-green-50 to-emerald-50 p-4 shadow-lg border border-green-200 backdrop-blur-sm">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <div class="flex items-center justify-center w-6 h-6 bg-green-100 rounded-full">
                                <svg class="h-4 w-4 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        </div>
                        <div class="ml-3 flex-1">
                            <p class="text-sm font-medium text-green-900">@_successMessage</p>
                            <div class="mt-1 h-1 bg-green-200 rounded-full overflow-hidden">
                                <div class="h-full bg-green-500 rounded-full animate-pulse"></div>
                            </div>
                        </div>
                        <div class="ml-4 flex-shrink-0">
                            <button @onclick="() => _successMessage = null"
                                    class="inline-flex rounded-md bg-green-100 p-1.5 text-green-500 hover:bg-green-200 transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
                                <span class="sr-only">Dismiss notification</span>
                                <svg class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* Add Exercise Link Modal - Enhanced for Alternative Exercises *@
        <AddExerciseLinkModal IsOpen="@_showAddModal"
                             LinkType="@_addLinkType"
                             SourceExercise="@Exercise"
                             ExerciseService="@ExerciseService"
                             ExistingLinks="@(StateService.CurrentLinks?.Links ?? Enumerable.Empty<ExerciseLinkDto>())"
                             ExerciseTypes="@ExerciseTypes"
                             OnAdd="@HandleExerciseSelected"
                             OnCancel="@(() => _showAddModal = false)" />

        @* Delete Confirmation Dialog *@
        @if (_linkToDelete != null)
        {
            <div class="relative z-50" data-testid="delete-confirmation-dialog" role="dialog" aria-modal="true">
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
                <div class="fixed inset-0 z-10 overflow-y-auto">
                    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                        <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                            <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                                <div class="sm:flex sm:items-start">
                                    <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                                        <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                                        </svg>
                                    </div>
                                    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                                        <h3 class="text-base font-semibold leading-6 text-gray-900">Remove Exercise Link</h3>
                                        <div class="mt-2">
                                            <p class="text-sm text-gray-500">
                                                Are you sure you want to remove "@(_linkToDelete.TargetExercise?.Name ?? $"Exercise {_linkToDelete.TargetExerciseId}")" 
                                                from the @_linkToDelete.LinkType.ToLower() exercises? 
                                                @if (_linkToDelete.LinkType == "Alternative")
                                                {
                                                    <span>This will remove the bidirectional relationship.</span>
                                                }
                                                else
                                                {
                                                    <span>This action cannot be undone.</span>
                                                }
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                                <button type="button"
                                        @ref="_deleteConfirmButton"
                                        @onclick="ConfirmDelete"
                                        disabled="@StateService.IsDeleting"
                                        class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto disabled:opacity-50 disabled:cursor-not-allowed"
                                        data-testid="confirm-delete-button">
                                    @if (StateService.IsDeleting)
                                    {
                                        <span>Removing...</span>
                                    }
                                    else
                                    {
                                        <span>Remove</span>
                                    }
                                </button>
                                <button type="button"
                                        @onclick="CancelDelete"
                                        disabled="@StateService.IsDeleting"
                                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto disabled:opacity-50 disabled:cursor-not-allowed"
                                        data-testid="cancel-delete-button">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* Screen Reader Announcements *@
        <AriaLiveRegion Message="@StateService.ScreenReaderAnnouncement" AriaLive="assertive" />
    }
</div>