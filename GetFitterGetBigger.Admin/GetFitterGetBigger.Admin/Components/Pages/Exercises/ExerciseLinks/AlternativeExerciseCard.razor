@using GetFitterGetBigger.Admin.Models.Dtos

<div class="@GetCardClasses()" 
     data-testid="alternative-exercise-card"
     role="listitem"
     aria-label="@GetCardAriaLabel()">
    
    <div class="flex items-start gap-3">
        @* Exercise Info *@
        <div class="flex-1">
            <div class="flex items-start justify-between">
                <div>
                    <h4 class="font-medium text-gray-900">
                        @if (Link.TargetExercise != null)
                        {
                            @Link.TargetExercise.Name
                        }
                        else
                        {
                            <span class="text-gray-500">Exercise ID: @Link.TargetExerciseId</span>
                        }
                    </h4>
                    
                    @if (Link.TargetExercise != null)
                    {
                        <div class="mt-1 flex flex-wrap items-center gap-2 text-xs sm:text-sm text-gray-600">
                            @* Difficulty *@
                            @if (Link.TargetExercise.Difficulty != null)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Difficulty:</span>
                                    <span class="ml-1">@Link.TargetExercise.Difficulty.Value</span>
                                </span>
                            }

                            @* Primary Muscles *@
                            @{
                                var primaryMuscles = Link.TargetExercise.MuscleGroups?
                                    .Where(mg => mg.Role?.Value == "Primary")
                                    .Select(mg => mg.MuscleGroup?.Value)
                                    .Where(v => !string.IsNullOrEmpty(v))
                                    .ToList();
                            }
                            @if (primaryMuscles?.Any() == true)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Primary:</span>
                                    <span class="ml-1">@string.Join(", ", primaryMuscles)</span>
                                </span>
                            }

                            @* Equipment *@
                            @if (Link.TargetExercise.Equipment?.Any() == true)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Equipment:</span>
                                    <span class="ml-1">@string.Join(", ", Link.TargetExercise.Equipment.Select(e => e.Value))</span>
                                </span>
                            }

                            @* Exercise Types *@
                            @if (Link.TargetExercise.ExerciseTypes?.Any() == true)
                            {
                                <div class="flex flex-wrap items-center gap-1">
                                    <span class="font-medium">Types:</span>
                                    @foreach (var type in Link.TargetExercise.ExerciseTypes)
                                    {
                                        <span class="px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs">
                                            @type.Value
                                        </span>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="flex items-start gap-2">
                    @* View Exercise Button *@
                    @if (Link.TargetExercise != null && OnViewExercise.HasDelegate)
                    {
                        <button type="button"
                                @onclick="HandleViewExercise"
                                class="text-purple-600 hover:text-purple-800 text-sm font-medium transition-colors"
                                data-testid="view-exercise-button"
                                title="View exercise details"
                                aria-label="View details for @Link.TargetExercise.Name">
                            View Exercise
                        </button>
                    }

                    @* Remove Button *@
                    @if (!Disabled && OnRemove.HasDelegate)
                    {
                        <button type="button"
                                @onclick="HandleRemove"
                                class="text-gray-400 hover:text-red-600 transition-colors"
                                data-testid="remove-button"
                                title="Remove alternative exercise"
                                aria-label="Remove @(Link.TargetExercise?.Name ?? $"exercise {Link.TargetExerciseId}")">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    }
                </div>
            </div>

            @* Additional Info *@
            <div class="mt-2 flex items-center gap-4 text-xs text-gray-500">
                <span class="inline-flex items-center">
                    <svg class="w-3 h-3 text-purple-400 mr-1" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                        <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" />
                    </svg>
                    Alternative Exercise
                </span>
                <span>Added: @Link.CreatedAt.ToString("MMM d, yyyy")</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public ExerciseLinkDto Link { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public EventCallback<ExerciseLinkDto> OnRemove { get; set; }
    [Parameter] public EventCallback<ExerciseLinkDto> OnViewExercise { get; set; }

    private string GetCardClasses()
    {
        // Purple theme for alternative exercises
        return "bg-purple-50 border border-purple-200 rounded-lg p-4 transition-all hover:shadow-md";
    }

    private async Task HandleRemove()
    {
        if (!Disabled && OnRemove.HasDelegate)
        {
            await OnRemove.InvokeAsync(Link);
        }
    }

    private async Task HandleViewExercise()
    {
        if (OnViewExercise.HasDelegate)
        {
            await OnViewExercise.InvokeAsync(Link);
        }
    }

    private string GetCardAriaLabel()
    {
        var exerciseName = Link.TargetExercise?.Name ?? $"Exercise ID {Link.TargetExerciseId}";
        return $"Alternative exercise: {exerciseName}";
    }
}