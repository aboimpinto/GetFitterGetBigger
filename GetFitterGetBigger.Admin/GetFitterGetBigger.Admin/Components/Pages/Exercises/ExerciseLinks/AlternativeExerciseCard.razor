@using GetFitterGetBigger.Admin.Models.Dtos

<div class="@GetCardClasses()" 
     data-testid="alternative-exercise-card"
     role="listitem"
     aria-label="@GetCardAriaLabel()">
    
    <div class="flex items-start gap-3">
        @* Exercise Info *@
        <div class="flex-1">
            <div class="flex items-start justify-between">
                <div>
                    <h4 class="font-medium text-gray-900">
                        @if (Link.TargetExercise != null)
                        {
                            @Link.TargetExercise.Name
                        }
                        else
                        {
                            <span class="text-gray-500">Exercise ID: @Link.TargetExerciseId</span>
                        }
                    </h4>
                    
                    @if (Link.TargetExercise != null)
                    {
                        <div class="mt-1 flex flex-wrap items-center gap-2 text-xs sm:text-sm text-gray-600">
                            @* Difficulty *@
                            @if (Link.TargetExercise.Difficulty != null)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Difficulty:</span>
                                    <span class="ml-1">@Link.TargetExercise.Difficulty.Value</span>
                                </span>
                            }

                            @* Primary Muscles *@
                            @{
                                var primaryMuscles = Link.TargetExercise.MuscleGroups?
                                    .Where(mg => mg.Role?.Value == "Primary")
                                    .Select(mg => mg.MuscleGroup?.Value)
                                    .Where(v => !string.IsNullOrEmpty(v))
                                    .ToList();
                            }
                            @if (primaryMuscles?.Any() == true)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Primary:</span>
                                    <span class="ml-1">@string.Join(", ", primaryMuscles)</span>
                                </span>
                            }

                            @* Equipment *@
                            @if (Link.TargetExercise.Equipment?.Any() == true)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Equipment:</span>
                                    <span class="ml-1">@string.Join(", ", Link.TargetExercise.Equipment.Select(e => e.Value))</span>
                                </span>
                            }

                            @* Exercise Types *@
                            @if (Link.TargetExercise.ExerciseTypes?.Any() == true)
                            {
                                <div class="flex flex-wrap items-center gap-1">
                                    <span class="font-medium">Types:</span>
                                    @foreach (var type in Link.TargetExercise.ExerciseTypes)
                                    {
                                        <span class="px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs">
                                            @type.Value
                                        </span>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="flex items-start gap-2">
                    @* View Exercise Button *@
                    @if (Link.TargetExercise != null && OnViewExercise.HasDelegate)
                    {
                        <button type="button"
                                @onclick="HandleViewExercise"
                                class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-purple-600 bg-purple-100 rounded-lg hover:text-purple-800 hover:bg-purple-200 hover:shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 transition-all duration-200 transform hover:scale-105 group-hover:scale-100"
                                data-testid="view-exercise-button"
                                title="View exercise details"
                                aria-label="View details for @Link.TargetExercise.Name">
                            <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                            View Details
                        </button>
                    }

                    @* Remove Button *@
                    @if (!Disabled && OnRemove.HasDelegate)
                    {
                        <button type="button"
                                @onclick="HandleRemove"
                                class="inline-flex items-center justify-center w-8 h-8 text-gray-400 bg-gray-100 rounded-lg hover:text-red-600 hover:bg-red-50 hover:shadow-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200 transform hover:scale-110 group-hover:scale-100"
                                data-testid="remove-button"
                                title="Remove alternative exercise"
                                aria-label="Remove @(Link.TargetExercise?.Name ?? $"exercise {Link.TargetExerciseId}")">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    }
                </div>
            </div>

            @* Additional Info with Enhanced Styling *@
            <div class="mt-3 flex items-center justify-between text-xs text-gray-500 pt-2 border-t border-purple-100">
                <div class="flex items-center gap-3">
                    <span class="inline-flex items-center px-2 py-1 bg-purple-100 text-purple-700 rounded-full font-medium">
                        <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                            <path d="M8 9a3 3 0 106 0 3 3 0 00-6 0zM8 11a6 6 0 106 0H8v5a1 1 0 11-2 0v-5z" />
                        </svg>
                        Alternative
                    </span>
                    <span class="inline-flex items-center text-gray-500">
                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Added @Link.CreatedAt.ToString("MMM d, yyyy")
                    </span>
                </div>
                <div class="flex items-center text-purple-400">
                    <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public ExerciseLinkDto Link { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public EventCallback<ExerciseLinkDto> OnRemove { get; set; }
    [Parameter] public EventCallback<ExerciseLinkDto> OnViewExercise { get; set; }

    private string GetCardClasses()
    {
        // Enhanced purple theme for alternative exercises with smooth transitions
        var baseClasses = "bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200 rounded-xl p-4 transition-all duration-300 ease-in-out";
        
        if (Disabled)
        {
            return $"{baseClasses} opacity-60 cursor-not-allowed";
        }
        
        return $"{baseClasses} hover:shadow-lg hover:border-purple-300 hover:scale-[1.02] cursor-pointer group";
    }

    private async Task HandleRemove()
    {
        if (!Disabled && OnRemove.HasDelegate)
        {
            await OnRemove.InvokeAsync(Link);
        }
    }

    private async Task HandleViewExercise()
    {
        if (OnViewExercise.HasDelegate)
        {
            await OnViewExercise.InvokeAsync(Link);
        }
    }

    private string GetCardAriaLabel()
    {
        var exerciseName = Link.TargetExercise?.Name ?? $"Exercise ID {Link.TargetExerciseId}";
        return $"Alternative exercise: {exerciseName}";
    }
}