@using GetFitterGetBigger.Admin.Models.Dtos

<div class="@GetCardClasses()" 
     data-testid="exercise-link-card"
     role="listitem"
     aria-label="@GetCardAriaLabel()">
    
    <div class="flex items-start gap-3">
        @* Ordering Buttons *@
        @if (!Disabled && (OnMoveUp.HasDelegate || OnMoveDown.HasDelegate))
        {
            <div class="flex flex-col gap-1 pt-1" data-testid="ordering-buttons">
                @* Move Up Button *@
                <button type="button" 
                        @onclick="HandleMoveUp"
                        disabled="@(!CanMoveUp)"
                        class="p-1 rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-200 transition-colors @(!CanMoveUp ? "opacity-50 cursor-not-allowed" : "")"
                        title="@(!CanMoveUp ? "This is the first exercise" : "Move exercise up in order")"
                        data-testid="move-up-button"
                        aria-label="Move @(Link.TargetExercise?.Name ?? "exercise") up in order">
                    <span class="block w-4 h-4 flex items-center justify-center font-bold text-xs">↑</span>
                </button>
                
                @* Move Down Button *@
                <button type="button" 
                        @onclick="HandleMoveDown"
                        disabled="@(!CanMoveDown)"
                        class="p-1 rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-200 transition-colors @(!CanMoveDown ? "opacity-50 cursor-not-allowed" : "")"
                        title="@(!CanMoveDown ? "This is the last exercise" : "Move exercise down in order")"
                        data-testid="move-down-button"
                        aria-label="Move @(Link.TargetExercise?.Name ?? "exercise") down in order">
                    <span class="block w-4 h-4 flex items-center justify-center font-bold text-xs">↓</span>
                </button>
            </div>
        }

        @* Exercise Info *@
        <div class="flex-1">
            <div class="flex items-start justify-between">
                <div>
                    <h4 class="font-medium text-gray-900">
                        @if (Link.TargetExercise != null)
                        {
                            @Link.TargetExercise.Name
                        }
                        else
                        {
                            <span class="text-gray-500">Exercise ID: @Link.TargetExerciseId</span>
                        }
                    </h4>
                    
                    @if (Link.TargetExercise != null)
                    {
                        <div class="mt-1 flex flex-wrap items-center gap-2 text-xs sm:text-sm text-gray-600">
                            @* Difficulty *@
                            @if (Link.TargetExercise.Difficulty != null)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Difficulty:</span>
                                    <span class="ml-1">@Link.TargetExercise.Difficulty.Value</span>
                                </span>
                            }

                            @* Primary Muscles *@
                            @{
                                var primaryMuscles = Link.TargetExercise.MuscleGroups?
                                    .Where(mg => mg.Role?.Value == "Primary")
                                    .Select(mg => mg.MuscleGroup?.Value)
                                    .Where(v => !string.IsNullOrEmpty(v))
                                    .ToList();
                            }
                            @if (primaryMuscles?.Any() == true)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Primary:</span>
                                    <span class="ml-1">@string.Join(", ", primaryMuscles)</span>
                                </span>
                            }

                            @* Equipment *@
                            @if (Link.TargetExercise.Equipment?.Any() == true)
                            {
                                <span class="inline-flex items-center">
                                    <span class="font-medium">Equipment:</span>
                                    <span class="ml-1">@string.Join(", ", Link.TargetExercise.Equipment.Select(e => e.Value))</span>
                                </span>
                            }
                        </div>
                    }
                </div>

                @* Remove Button *@
                @if (!Disabled && OnRemove.HasDelegate)
                {
                    <button type="button"
                            @onclick="HandleRemove"
                            class="ml-2 text-gray-400 hover:text-red-600 transition-colors"
                            data-testid="remove-button"
                            title="Remove link"
                            aria-label="Remove @(Link.TargetExercise?.Name ?? $"exercise {Link.TargetExerciseId}")">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                }
            </div>

            @* Additional Info *@
            <div class="mt-2 flex items-center gap-4 text-xs text-gray-500">
                <span>Position: @(Link.DisplayOrder + 1)</span>
                <span>Added: @Link.CreatedAt.ToString("MMM d, yyyy")</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public ExerciseLinkDto Link { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool CanMoveUp { get; set; } = false;
    [Parameter] public bool CanMoveDown { get; set; } = false;
    [Parameter] public EventCallback<ExerciseLinkDto> OnRemove { get; set; }
    [Parameter] public EventCallback<ExerciseLinkDto> OnMoveUp { get; set; }
    [Parameter] public EventCallback<ExerciseLinkDto> OnMoveDown { get; set; }

    private string GetCardClasses()
    {
        var classes = "bg-white border rounded-lg p-4 transition-all hover:shadow-md";
        
        // Always show as active since IsActive is always true now
        classes += " border-gray-200";
        
        return classes;
    }

    private async Task HandleRemove()
    {
        if (!Disabled && OnRemove.HasDelegate)
        {
            await OnRemove.InvokeAsync(Link);
        }
    }

    private async Task HandleMoveUp()
    {
        if (!Disabled && OnMoveUp.HasDelegate && CanMoveUp)
        {
            await OnMoveUp.InvokeAsync(Link);
        }
    }

    private async Task HandleMoveDown()
    {
        if (!Disabled && OnMoveDown.HasDelegate && CanMoveDown)
        {
            await OnMoveDown.InvokeAsync(Link);
        }
    }

    private string GetCardAriaLabel()
    {
        var exerciseName = Link.TargetExercise?.Name ?? $"Exercise ID {Link.TargetExerciseId}";
        var order = $", position {Link.DisplayOrder + 1}";
        return $"{Link.LinkType} exercise: {exerciseName}{order}";
    }

    // Removed HandleKeyDown as it's no longer needed without drag functionality
}