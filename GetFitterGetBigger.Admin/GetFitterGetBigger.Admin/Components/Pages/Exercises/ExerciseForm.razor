@page "/exercises/new"
@page "/exercises/{Id}/edit"
@using GetFitterGetBigger.Admin.Models
@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Builders
@using GetFitterGetBigger.Admin.Components.Shared
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer
@inject IExerciseStateService StateService
@inject IExerciseWeightTypeStateService WeightTypeStateService
@inject IReferenceDataService ReferenceDataService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>@(IsEditMode ? "Edit Exercise" : "New Exercise") - GetFitterGetBigger Admin</PageTitle>

@* Floating action buttons - always visible *@
@if (!isLoading)
{
    @* Cancel button - responsive positioning *@
    <div class="fixed bottom-8 z-50 cancelPostionStyle">
        <button type="button" @onclick="Cancel"
                class="flex flex-col items-center group"
                data-testid="floating-cancel-button">
            <div class="w-14 h-14 bg-gray-600 hover:bg-gray-700 rounded-full flex items-center justify-center shadow-lg transition-colors">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </div>
            <span class="text-xs text-gray-600 mt-1 font-medium">Cancel</span>
        </button>
    </div>

    @* Save button - responsive positioning *@
    <div class="fixed bottom-8 right-4 z-50 xl:right-[calc(50%-41rem)]">
        <button type="button" @onclick="HandleSubmitFromFloating" disabled="@isSubmitting"
                class="flex flex-col items-center group"
                data-testid="floating-save-button">
            <div class="w-14 h-14 @(isSubmitting ? "bg-blue-400" : "bg-blue-600 hover:bg-blue-700") rounded-full flex items-center justify-center shadow-lg transition-colors @(isSubmitting ? "cursor-not-allowed" : "")">
                @if (isSubmitting)
                {
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                }
                else
                {
                    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17 3H5C3.89 3 3 3.9 3 5V19C3 20.1 3.89 21 5 21H19C20.1 21 21 20.1 21 19V7L17 3M19 19H5V5H16.17L19 7.83V19M12 12C10.34 12 9 13.34 9 15S10.34 18 12 18 15 16.66 15 15 13.66 12 12 12M6 6H15V10H6V6Z"/>
                    </svg>
                }
            </div>
            <span class="text-xs text-gray-600 mt-1 font-medium">
                @if (isSubmitting)
                {
                    <text>Saving...</text>
                }
                else
                {
                    <text>@(IsEditMode ? "Update" : "Create")</text>
                }
            </span>
        </button>
    </div>
}

<div>
    <div class="bg-white rounded-lg shadow-md p-6 max-w-4xl mx-auto">
        <div class="mb-6">
            <h2 class="text-2xl font-semibold text-gray-800">@(IsEditMode ? "Edit Exercise" : "Create New Exercise")</h2>
            <p class="text-gray-600">@(IsEditMode ? "Update exercise details and configuration" : "Add a new exercise to the library")</p>
        </div>

    @if (StateService.ErrorMessage != null)
    {
        <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
            <p>@StateService.ErrorMessage</p>
            <button @onclick="StateService.ClearError" class="text-sm underline mt-1">Dismiss</button>
        </div>
    }

    @if (isLoading)
    {
        <div class="flex justify-center py-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <div class="space-y-6">
                <!-- Basic Information -->
                <div class="border-b pb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Basic Information</h3>
                    
                    <div class="grid grid-cols-1 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                                Exercise Name @if (string.IsNullOrWhiteSpace(model.Name)) { <span class="text-red-500">*</span> }
                            </label>
                            <input type="text" id="name" @bind="model.Name" @bind:event="oninput" required maxlength="200"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 @(GetFieldClass("Name"))">
                            @if (validationErrors.ContainsKey("Name"))
                            {
                                <p class="mt-1 text-sm text-red-600">@validationErrors["Name"]</p>
                            }
                        </div>

                        <div>
                            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">
                                Description @if (string.IsNullOrWhiteSpace(model.Description)) { <span class="text-red-500">*</span> }
                            </label>
                            <textarea id="description" @bind="model.Description" @bind:event="oninput" required maxlength="1000" rows="3"
                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 @(GetFieldClass("Description"))"></textarea>
                            @if (validationErrors.ContainsKey("Description"))
                            {
                                <p class="mt-1 text-sm text-red-600">@validationErrors["Description"]</p>
                            }
                        </div>

                        <div>
                            <CoachNotesEditor Notes="model.CoachNotes" NotesChanged="@((notes) => model.CoachNotes = notes)" />
                            @if (validationErrors.ContainsKey("CoachNotes"))
                            {
                                <p class="mt-1 text-sm text-red-600">@validationErrors["CoachNotes"]</p>
                            }
                        </div>
                    </div>
                </div>

                <!-- Exercise Types -->
                <div class="border-b pb-6">
                    <ExerciseTypeSelector 
                        AvailableTypes="StateService.ExerciseTypes.ToList()" 
                        SelectedTypeIds="model.ExerciseTypeIds" 
                        SelectedTypeIdsChanged="@OnExerciseTypesChanged" />
                    @if (validationErrors.ContainsKey("ExerciseTypes"))
                    {
                        <p class="mt-1 text-sm text-red-600">@validationErrors["ExerciseTypes"]</p>
                    }
                </div>

                <!-- Exercise Configuration -->
                <div class="border-b pb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Exercise Configuration</h3>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="difficulty" class="block text-sm font-medium text-gray-700 mb-1">
                                Difficulty Level @if (string.IsNullOrWhiteSpace(model.DifficultyId)) { <span class="text-red-500">*</span> }
                            </label>
                            <select id="difficulty" 
                                    @bind="_difficultyIdString"
                                    required
                                    disabled="@IsRestTypeSelected"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 @(GetFieldClass("Difficulty")) @(IsRestTypeSelected ? "bg-gray-100 cursor-not-allowed" : "")">
                                <option value="">Select difficulty</option>
                                @foreach (var difficulty in StateService.DifficultyLevels)
                                {
                                    <option value="@difficulty.Id">@difficulty.Value</option>
                                }
                            </select>
                            @if (validationErrors.ContainsKey("Difficulty"))
                            {
                                <p class="mt-1 text-sm text-red-600">@validationErrors["Difficulty"]</p>
                            }
                        </div>

                        <div>
                            <label for="kineticChain" class="block text-sm font-medium text-gray-700 mb-1">
                                Kinetic Chain @if (!IsRestTypeSelected && string.IsNullOrWhiteSpace(model.KineticChainId)) { <span class="text-red-500">*</span> }
                            </label>
                            <select id="kineticChain" 
                                    @bind="_kineticChainIdString"
                                    required="@(!IsRestTypeSelected)"
                                    disabled="@IsRestTypeSelected"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 @(GetFieldClass("KineticChain")) @(IsRestTypeSelected ? "bg-gray-100 cursor-not-allowed" : "")">
                                <option value="">Select kinetic chain type</option>
                                @foreach (var kineticChain in StateService.KineticChainTypes)
                                {
                                    <option value="@kineticChain.Id">@kineticChain.Value</option>
                                }
                            </select>
                            @if (validationErrors.ContainsKey("KineticChain"))
                            {
                                <p class="mt-1 text-sm text-red-600">@validationErrors["KineticChain"]</p>
                            }
                        </div>
                    </div>

                    <div class="mt-6">
                        <label class="block text-sm font-medium text-gray-700 mb-1">
                            Weight Type @if (!IsRestTypeSelected && string.IsNullOrWhiteSpace(model.WeightTypeId)) { <span class="text-red-500">*</span> }
                        </label>
                        <ExerciseWeightTypeSelector 
                            @bind-Value="model.WeightTypeId"
                            Required="@(!IsRestTypeSelected)"
                            Disabled="@IsRestTypeSelected"
                            ValidationMessage="@(validationErrors.ContainsKey("WeightType") ? validationErrors["WeightType"] : "")"
                            ShowValidationError="@validationErrors.ContainsKey("WeightType")" />
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                        <div class="space-y-4">
                            <div class="flex items-center">
                                <input type="checkbox" id="isUnilateral" @bind="model.IsUnilateral"
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                <label for="isUnilateral" class="ml-2 block text-sm text-gray-700">
                                    Is Unilateral (works one side at a time)
                                </label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="isActive" @bind="model.IsActive"
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                <label for="isActive" class="ml-2 block text-sm text-gray-700">
                                    Is Active (available for use)
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Muscle Groups -->
                <div class="border-b pb-6">
                    <MuscleGroupSelector 
                        MuscleGroups="muscleGroupAssignments"
                        MuscleGroupsChanged="@((List<MuscleGroupRoleAssignmentDto> groups) => { muscleGroupAssignments = groups; StateHasChanged(); })"
                        AllMuscleGroups="@StateService.MuscleGroups"
                        MuscleRoles="@StateService.MuscleRoles"
                        Disabled="@IsRestTypeSelected"
                        ShowValidationError="@(validationErrors.ContainsKey("MuscleGroups"))"
                        OnMuscleGroupsRefreshed="@RefreshMuscleGroups" />
                </div>

                <!-- Equipment -->
                <div class="border-b pb-6 @(IsRestTypeSelected ? "opacity-50" : "")">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">
                        Equipment
                        @if (IsRestTypeSelected) { <span class="text-sm text-gray-500">(disabled for Rest exercises)</span> }
                    </h3>
                    <TagBasedMultiSelect Items="@StateService.Equipment"
                                       SelectedValues="@selectedEquipmentIds"
                                       SelectedValuesChanged="@((List<string> values) => selectedEquipmentIds = values)"
                                       Placeholder="Select equipment"
                                       Disabled="@IsRestTypeSelected"
                                       EnableInlineCreation="true"
                                       EntityType="ReferenceEntityType.Equipment"
                                       GetItemId="@(item => item.Id)"
                                       GetItemName="@(item => item.Value)"
                                       OnItemsRefreshed="@RefreshEquipment">
                        <RenderTag Context="tagContext">
                            <EquipmentTag Equipment="@tagContext.item" 
                                        Disabled="@IsRestTypeSelected"
                                        OnRemove="@tagContext.onRemove" />
                        </RenderTag>
                    </TagBasedMultiSelect>
                </div>

                <!-- Body Parts -->
                <div class="border-b pb-6 @(IsRestTypeSelected ? "opacity-50" : "")">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">
                        Body Parts
                        @if (IsRestTypeSelected) { <span class="text-sm text-gray-500">(disabled for Rest exercises)</span> }
                    </h3>
                    <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                        @foreach (var bodyPart in StateService.BodyParts)
                        {
                            <label class="flex items-center">
                                <input type="checkbox" 
                                       checked="@selectedBodyPartIds.Contains(bodyPart.Id)"
                                       @onchange="@(() => ToggleBodyPart(bodyPart.Id))"
                                       disabled="@IsRestTypeSelected"
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded @(IsRestTypeSelected ? "cursor-not-allowed" : "")">
                                <span class="ml-2 text-sm text-gray-700">@bodyPart.Value</span>
                            </label>
                        }
                    </div>
                </div>

                <!-- Movement Patterns -->
                <div class="border-b pb-6 @(IsRestTypeSelected ? "opacity-50" : "")">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">
                        Movement Patterns
                        @if (IsRestTypeSelected) { <span class="text-sm text-gray-500">(disabled for Rest exercises)</span> }
                    </h3>
                    <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                        @foreach (var pattern in StateService.MovementPatterns)
                        {
                            <label class="flex items-center">
                                <input type="checkbox" 
                                       checked="@selectedMovementPatternIds.Contains(pattern.Id)"
                                       @onchange="@(() => ToggleMovementPattern(pattern.Id))"
                                       disabled="@IsRestTypeSelected"
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded @(IsRestTypeSelected ? "cursor-not-allowed" : "")">
                                <span class="ml-2 text-sm text-gray-700">@pattern.Value</span>
                            </label>
                        }
                    </div>
                </div>

                <!-- Media URLs -->
                <div class="pb-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Media (Optional)</h3>
                    
                    <div class="grid grid-cols-1 gap-6">
                        <div>
                            <label for="imageUrl" class="block text-sm font-medium text-gray-700 mb-1">
                                Image URL
                            </label>
                            <input type="url" id="imageUrl" @bind="model.ImageUrl"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   placeholder="https://example.com/exercise-image.jpg">
                        </div>

                        <div>
                            <label for="videoUrl" class="block text-sm font-medium text-gray-700 mb-1">
                                Video URL
                            </label>
                            <input type="url" id="videoUrl" @bind="model.VideoUrl"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   placeholder="https://example.com/exercise-video.mp4">
                        </div>
                    </div>
                </div>

            </div>
        </EditForm>
    }
    </div>
</div>


@code {
    [Parameter] public string? Id { get; set; }

    private bool IsEditMode => !string.IsNullOrEmpty(Id);
    private bool isLoading = true;
    private bool isSubmitting = false;
    
    private string _difficultyIdString
    {
        get => model.DifficultyId;
        set
        {
            model.DifficultyId = value ?? string.Empty;
            StateHasChanged();
        }
    }

    private string? _kineticChainIdString
    {
        get => model.KineticChainId;
        set
        {
            model.KineticChainId = value;
            StateHasChanged();
        }
    }

    // Rest type business rules
    private bool IsRestTypeSelected => model.ExerciseTypeIds.Any(id => 
        StateService.ExerciseTypes.FirstOrDefault(et => et.Id == id)?.Value == "Rest");
    
    private string? BeginnerDifficultyId => StateService.DifficultyLevels.FirstOrDefault(d => d.Value == "Beginner")?.Id;

    private ExerciseCreateDto model = new ExerciseCreateDtoBuilder()
        .WithName(string.Empty)
        .WithDescription(string.Empty)
        .WithInstructions(string.Empty)
        .WithDifficultyId(string.Empty)
        .WithKineticChainId(null)
        .WithWeightTypeId(null)
        .Build(); // Coach notes are now optional - start with empty list
    private List<MuscleGroupRoleAssignmentDto> muscleGroupAssignments = new();
    private List<string> selectedEquipmentIds = new();
    private HashSet<string> selectedBodyPartIds = new();
    private HashSet<string> selectedMovementPatternIds = new();
    private Dictionary<string, string> validationErrors = new();

    protected override async Task OnInitializedAsync()
    {
        StateService.OnChange += StateHasChanged;
        
        Console.WriteLine("[ExerciseForm] OnInitializedAsync started");
        Console.WriteLine($"[ExerciseForm] Current reference data state:");
        Console.WriteLine($"  - DifficultyLevels: {StateService.DifficultyLevels?.Count() ?? 0}");
        Console.WriteLine($"  - MuscleGroups: {StateService.MuscleGroups?.Count() ?? 0}");
        Console.WriteLine($"  - Equipment: {StateService.Equipment?.Count() ?? 0}");
        Console.WriteLine($"  - BodyParts: {StateService.BodyParts?.Count() ?? 0}");
        
        // Check if ALL reference data is loaded, not just DifficultyLevels
        if (!IsReferenceDataLoaded())
        {
            Console.WriteLine("[ExerciseForm] Reference data not loaded, calling InitializeAsync...");
            await StateService.InitializeAsync();
            Console.WriteLine("[ExerciseForm] InitializeAsync completed");
            Console.WriteLine($"[ExerciseForm] After initialization:");
            Console.WriteLine($"  - DifficultyLevels: {StateService.DifficultyLevels?.Count() ?? 0}");
            Console.WriteLine($"  - MuscleGroups: {StateService.MuscleGroups?.Count() ?? 0}");
            Console.WriteLine($"  - Equipment: {StateService.Equipment?.Count() ?? 0}");
            Console.WriteLine($"  - BodyParts: {StateService.BodyParts?.Count() ?? 0}");
        }
        else
        {
            Console.WriteLine("[ExerciseForm] Reference data already loaded");
        }

        if (IsEditMode)
        {
            await LoadExerciseForEdit();
        }
        else
        {
            // Don't add any muscle group assignments - let the user add them as needed
            muscleGroupAssignments.Clear();
        }

        isLoading = false;
    }
    
    private bool IsReferenceDataLoaded()
    {
        var loaded = StateService.DifficultyLevels?.Any() == true &&
               StateService.MuscleGroups?.Any() == true &&
               StateService.MuscleRoles?.Any() == true &&
               StateService.Equipment?.Any() == true &&
               StateService.BodyParts?.Any() == true &&
               StateService.MovementPatterns?.Any() == true &&
               StateService.ExerciseTypes?.Any() == true;
               
        Console.WriteLine($"[ExerciseForm] IsReferenceDataLoaded: {loaded}");
        return loaded;
    }

    private async Task LoadExerciseForEdit()
    {
        await StateService.LoadExerciseByIdAsync(Id!);
        
        if (StateService.SelectedExercise != null)
        {
            var exercise = StateService.SelectedExercise;
            
            // Map to edit model using builder
            model = ExerciseCreateDtoBuilder.FromExerciseDto(exercise);

            // Check if this is a REST type exercise
            if (IsRestTypeSelected)
            {
                // For REST exercises, clear all incompatible fields even if they have data
                model.KineticChainId = null;
                selectedEquipmentIds.Clear();
                selectedBodyPartIds.Clear();
                selectedMovementPatternIds.Clear();
                muscleGroupAssignments.Clear();
                
                // Auto-set difficulty to Beginner if not already set
                if (!string.IsNullOrEmpty(BeginnerDifficultyId) && string.IsNullOrEmpty(model.DifficultyId))
                {
                    model.DifficultyId = BeginnerDifficultyId;
                }
            }
            else
            {
                // Map muscle groups
                muscleGroupAssignments = exercise.MuscleGroups.Select(mg => 
                    new MuscleGroupRoleAssignmentDtoBuilder()
                        .WithMuscleGroupId(mg.MuscleGroup?.Id ?? string.Empty)
                        .WithRole(mg.Role?.Value ?? string.Empty)
                        .Build()
                ).ToList();

                // Map equipment
                selectedEquipmentIds = exercise.Equipment.Select(e => e.Id).ToList();
                
                // Map body parts
                selectedBodyPartIds = exercise.BodyParts.Select(bp => bp.Id).ToHashSet();
                
                // Map movement patterns
                selectedMovementPatternIds = exercise.MovementPatterns.Select(mp => mp.Id).ToHashSet();
            }
        }
    }


    private void SetDifficultyId(string? value)
    {
        model.DifficultyId = value ?? string.Empty;
        StateHasChanged();
    }


    private void ToggleEquipment(string equipmentId)
    {
        if (selectedEquipmentIds.Contains(equipmentId))
            selectedEquipmentIds.Remove(equipmentId);
        else
            selectedEquipmentIds.Add(equipmentId);
    }

    private void ToggleBodyPart(string bodyPartId)
    {
        if (selectedBodyPartIds.Contains(bodyPartId))
            selectedBodyPartIds.Remove(bodyPartId);
        else
            selectedBodyPartIds.Add(bodyPartId);
    }

    private void ToggleMovementPattern(string patternId)
    {
        if (selectedMovementPatternIds.Contains(patternId))
            selectedMovementPatternIds.Remove(patternId);
        else
            selectedMovementPatternIds.Add(patternId);
    }

    private async Task RefreshEquipment()
    {
        // Explicitly clear the equipment cache first
        ReferenceDataService.ClearEquipmentCache();
        
        // InitializeAsync reloads all reference data from the server
        await StateService.InitializeAsync();
        
        // Force UI update to ensure the EnhancedReferenceSelect components get the new Items
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshMuscleGroups()
    {
        // Explicitly clear the muscle groups cache first
        ReferenceDataService.ClearMuscleGroupsCache();
        
        // InitializeAsync reloads all reference data from the server
        await StateService.InitializeAsync();
        
        // Force UI update to ensure the EnhancedReferenceSelect components get the new Items
        await InvokeAsync(StateHasChanged);
    }

    private bool ValidateForm()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(model.Name))
            validationErrors["Name"] = "Exercise name is required";
        else if (model.Name.Length > 200)
            validationErrors["Name"] = "Exercise name must be 200 characters or less";

        if (string.IsNullOrWhiteSpace(model.Description))
            validationErrors["Description"] = "Description is required";
        else if (model.Description.Length > 1000)
            validationErrors["Description"] = "Description must be 1000 characters or less";

        // Validate coach notes (optional, but individual notes have character limits)
        if (model.CoachNotes.Any(cn => !string.IsNullOrWhiteSpace(cn.Text) && cn.Text.Length > 1000))
            validationErrors["CoachNotes"] = "Each coach note must be 1000 characters or less";

        // Validate exercise types
        if (!model.ExerciseTypeIds.Any())
            validationErrors["ExerciseTypes"] = "At least one exercise type must be selected";

        if (string.IsNullOrWhiteSpace(model.DifficultyId))
            validationErrors["Difficulty"] = "Difficulty level is required";

        // Validate kinetic chain
        if (IsRestTypeSelected)
        {
            // REST exercises must have null kinetic chain
            if (!string.IsNullOrWhiteSpace(model.KineticChainId))
            {
                validationErrors["KineticChain"] = "REST exercises cannot have a kinetic chain type";
            }
        }
        else
        {
            // Non-REST exercises require kinetic chain
            if (string.IsNullOrWhiteSpace(model.KineticChainId))
            {
                validationErrors["KineticChain"] = "Kinetic chain type is required for non-REST exercises";
            }
        }

        // Validate weight type
        if (IsRestTypeSelected)
        {
            // REST exercises must have null weight type
            if (!string.IsNullOrWhiteSpace(model.WeightTypeId))
            {
                validationErrors["WeightType"] = "REST exercises cannot have a weight type";
            }
        }
        else
        {
            // Non-REST exercises require weight type
            if (string.IsNullOrWhiteSpace(model.WeightTypeId))
            {
                validationErrors["WeightType"] = "Weight type is required for non-REST exercises";
            }
        }

        // Validate muscle groups (optional for Rest exercises)
        if (!IsRestTypeSelected)
        {
            var validMuscleGroups = muscleGroupAssignments
                .Where(mg => !string.IsNullOrWhiteSpace(mg.MuscleGroupId) && !string.IsNullOrWhiteSpace(mg.Role))
                .ToList();
            
            if (!validMuscleGroups.Any())
            {
                validationErrors["MuscleGroups"] = "At least one muscle group with a role is required";
            }
            else if (!validMuscleGroups.Any(mg => mg.Role == "Primary"))
            {
                validationErrors["MuscleGroups"] = "At least one muscle group with Primary role is required";
            }
        }

        // Update UI to show validation errors
        StateHasChanged();

        return !validationErrors.Any();
    }

    private async Task HandleSubmitFromFloating()
    {
        await HandleSubmit();
    }

    private async Task HandleSubmit()
    {
        if (!ValidateForm())
            return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            // Prepare the model - convert role names to role IDs for API
            model.MuscleGroups = muscleGroupAssignments
                .Where(mg => !string.IsNullOrWhiteSpace(mg.MuscleGroupId) && !string.IsNullOrWhiteSpace(mg.Role))
                .Select(mg => MuscleGroupApiDtoBuilder.FromAssignment(
                    mg, 
                    roleName => StateService.MuscleRoles.FirstOrDefault(r => r.Value == roleName)?.Id
                ))
                .Where(mg => !string.IsNullOrWhiteSpace(mg.MuscleRoleId)) // Only include if we found the role ID
                .ToList();
            
            // Filter out empty coach notes before submission
            model.CoachNotes = model.CoachNotes
                .Where(cn => !string.IsNullOrWhiteSpace(cn.Text))
                .Select((cn, index) => new CoachNoteCreateDto { Text = cn.Text.Trim(), Order = index })
                .ToList();
            
            model.EquipmentIds = selectedEquipmentIds.ToList();
            model.BodyPartIds = selectedBodyPartIds.ToList();
            model.MovementPatternIds = selectedMovementPatternIds.ToList();

            if (IsEditMode)
            {
                var updateDto = ExerciseUpdateDtoBuilder.FromCreateDto(model);
                
                // Log the JSON for testing
                var updateJson = System.Text.Json.JsonSerializer.Serialize(updateDto, new System.Text.Json.JsonSerializerOptions 
                { 
                    WriteIndented = true,
                    PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                });
                Console.WriteLine($"[ExerciseForm] UPDATE JSON to PUT to /api/exercises/{Id}:");
                Console.WriteLine(updateJson);
                
                await StateService.UpdateExerciseAsync(Id!, updateDto);
            }
            else
            {
                // Log the JSON for testing
                var createJson = System.Text.Json.JsonSerializer.Serialize(model, new System.Text.Json.JsonSerializerOptions 
                { 
                    WriteIndented = true,
                    PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                });
                Console.WriteLine("[ExerciseForm] CREATE JSON to POST to /api/exercises:");
                Console.WriteLine(createJson);
                Console.WriteLine("\n[ExerciseForm] You can copy this JSON and test it in Swagger at http://localhost:5214/swagger");
                
                await StateService.CreateExerciseAsync(model);
            }

            // Navigate back to list
            Navigation.NavigateTo("/exercises");
        }
        catch
        {
            // Error is handled by StateService
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/exercises");
    }

    private string GetFieldClass(string fieldName)
    {
        return validationErrors.ContainsKey(fieldName) ? "border-red-500" : "";
    }
    
    private void OnExerciseTypesChanged(List<string> typeIds)
    {
        model.ExerciseTypeIds = typeIds;
        
        // Apply Rest type business rules
        if (IsRestTypeSelected)
        {
            // Auto-set difficulty to Beginner
            if (!string.IsNullOrEmpty(BeginnerDifficultyId))
            {
                model.DifficultyId = BeginnerDifficultyId;
            }
            
            // Clear dependent fields
            ClearRestIncompatibleFields();
        }
        
        StateHasChanged();
    }
    
    private void ClearRestIncompatibleFields()
    {
        // Clear kinetic chain (REST exercises cannot have kinetic chain)
        model.KineticChainId = null;
        
        // Clear equipment
        selectedEquipmentIds.Clear();
        
        // Clear body parts
        selectedBodyPartIds.Clear();
        
        // Clear movement patterns
        selectedMovementPatternIds.Clear();
        
        // Clear muscle groups completely (no empty assignment for REST)
        muscleGroupAssignments.Clear();
    }
    
    private bool HasValidMuscleGroups()
    {
        return muscleGroupAssignments.Any(mg => 
            !string.IsNullOrWhiteSpace(mg.MuscleGroupId) && 
            !string.IsNullOrWhiteSpace(mg.Role));
    }


    public void Dispose()
    {
        StateService.OnChange -= StateHasChanged;
    }
}

<style>
    @* Large screen positioning *@
    @@media (min-width: 1280px) {
        .cancelPostionStyle {
            left: calc(50% - 25rem) !important;
        }
    }
</style>