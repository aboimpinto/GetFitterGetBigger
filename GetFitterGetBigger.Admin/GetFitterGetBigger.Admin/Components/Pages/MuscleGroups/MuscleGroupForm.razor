@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using System.ComponentModel.DataAnnotations
@inject IMuscleGroupsStateService StateService

<div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 class="text-lg font-medium text-gray-900 mb-4">
            @(MuscleGroup == null ? "Add New Muscle Group" : "Edit Muscle Group")
        </h3>

        <EditForm Model="@model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            
            <div class="mb-4">
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                    Muscle Group Name <span class="text-red-500">*</span>
                </label>
                <InputText id="name" @bind-Value="model.Name" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                           placeholder="Enter muscle group name" />
                <ValidationMessage For="@(() => model.Name)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label for="bodyPart" class="block text-sm font-medium text-gray-700 mb-1">
                    Body Part <span class="text-red-500">*</span>
                </label>
                <InputSelect id="bodyPart" @bind-Value="model.BodyPartId" 
                             @bind-Value:after="OnBodyPartChanged"
                             class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Select a body part</option>
                    @if (BodyParts != null)
                    {
                        @foreach (var bodyPart in BodyParts.OrderBy(bp => bp.Value))
                        {
                            <option value="@bodyPart.Id">@bodyPart.Value</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => model.BodyPartId)" class="text-red-500 text-sm mt-1" />
            </div>

            @if (StateService.ErrorMessage != null)
            {
                <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
                    <p>@StateService.ErrorMessage</p>
                </div>
            }

            <div class="flex justify-end space-x-3">
                <button type="button" @onclick="OnCancel" 
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                        disabled="@(StateService.IsCreating || StateService.IsUpdating)">
                    Cancel
                </button>
                <button type="submit" 
                        class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50"
                        disabled="@(StateService.IsCreating || StateService.IsUpdating)">
                    @if (StateService.IsCreating || StateService.IsUpdating)
                    {
                        <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                    }
                    @(MuscleGroup == null ? "Create" : "Update")
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public MuscleGroupDto? MuscleGroup { get; set; }
    [Parameter] public IEnumerable<ReferenceDataDto>? BodyParts { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private MuscleGroupFormModel model = new();

    protected override void OnParametersSet()
    {
        // Create a new model instance to ensure proper binding
        model = new MuscleGroupFormModel();
        
        if (MuscleGroup != null)
        {
            model.Name = MuscleGroup.Name;
            model.BodyPartId = MuscleGroup.BodyPartId;
            Console.WriteLine($"[MUSCLE GROUP FORM] OnParametersSet - Editing {MuscleGroup.Name} with BodyPartId: {MuscleGroup.BodyPartId}");
        }
        else
        {
            Console.WriteLine($"[MUSCLE GROUP FORM] OnParametersSet - Creating new muscle group");
        }
    }

    private async Task HandleSubmit()
    {
        StateService.ClearError();

        if (MuscleGroup == null)
        {
            // Create new muscle group
            var createDto = new CreateMuscleGroupDto 
            { 
                Name = model.Name,
                BodyPartId = model.BodyPartId
            };
            await StateService.CreateMuscleGroupAsync(createDto);
        }
        else
        {
            // Update existing muscle group
            Console.WriteLine($"[MUSCLE GROUP FORM] Updating muscle group {MuscleGroup.Id}");
            Console.WriteLine($"[MUSCLE GROUP FORM] Original BodyPartId: {MuscleGroup.BodyPartId}");
            Console.WriteLine($"[MUSCLE GROUP FORM] New BodyPartId from form: {model.BodyPartId}");
            
            var updateDto = new UpdateMuscleGroupDto 
            { 
                Name = model.Name,
                BodyPartId = model.BodyPartId
            };
            await StateService.UpdateMuscleGroupAsync(MuscleGroup.Id, updateDto);
        }

        if (StateService.ErrorMessage == null)
        {
            await OnSave.InvokeAsync();
        }
    }

    private void OnBodyPartChanged()
    {
        Console.WriteLine($"[MUSCLE GROUP FORM] Body part changed to: {model.BodyPartId}");
    }

    private class MuscleGroupFormModel
    {
        [Required(ErrorMessage = "Muscle group name is required")]
        [StringLength(100, ErrorMessage = "Muscle group name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Body part is required")]
        public string BodyPartId { get; set; } = string.Empty;
    }
}