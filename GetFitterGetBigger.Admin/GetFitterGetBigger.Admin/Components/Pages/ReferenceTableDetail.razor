@page "/referencetables/{TableName}"
@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Components.Pages.Equipment
@using GetFitterGetBigger.Admin.Components.Pages.MuscleGroups
@using GetFitterGetBigger.Admin.Components.Shared
@using Microsoft.AspNetCore.Authorization
@inject IReferenceDataService ReferenceDataService
@inject IEquipmentStateService EquipmentStateService
@inject IMuscleGroupsStateService MuscleGroupsStateService
@inject IExerciseWeightTypeStateService ExerciseWeightTypeStateService
@inject IWorkoutReferenceDataStateService WorkoutReferenceDataStateService
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>@DisplayName - GetFitterGetBigger Admin</PageTitle>

<div class="mb-4">
    <a href="/referencetables" class="inline-flex items-center text-blue-600 hover:text-blue-800">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Reference Tables
    </a>
</div>

@if (TableName == "Equipment")
{
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-semibold text-gray-800">Equipment</h2>
                <p class="text-gray-600">Manage equipment available for exercises</p>
            </div>
            <button @onclick="ShowCreateForm" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                Add Equipment
            </button>
        </div>

        @if (EquipmentStateService.ErrorMessage != null)
        {
            <ErrorAlert 
                ErrorMessage="@EquipmentStateService.ErrorMessage"
                OnDismiss="EquipmentStateService.ClearError"
                OnRetry="async () => await EquipmentStateService.LoadEquipmentAsync()"
                RetryTestId="equipment-retry-button"
                DismissTestId="equipment-dismiss-button" />
        }

        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Search equipment</label>
            <input type="text" @bind="EquipmentStateService.SearchTerm" @bind:event="oninput"
                   class="w-full max-w-md px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                   placeholder="Search by name...">
        </div>

        @if (EquipmentStateService.IsLoading)
        {
            <EquipmentSkeleton />
        }
        else if (EquipmentStateService.FilteredEquipment.Any())
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Updated</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var equipment in EquipmentStateService.FilteredEquipment)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    @equipment.Name
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @if (equipment.IsActive)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                            Inactive
                                        </span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @equipment.CreatedAt.ToString("yyyy-MM-dd")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @(equipment.UpdatedAt?.ToString("yyyy-MM-dd") ?? "-")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button @onclick="() => ShowEditForm(equipment)" 
                                            class="text-indigo-600 hover:text-indigo-900 mr-4">
                                        Edit
                                    </button>
                                    <button @onclick="() => ShowDeleteConfirmation(equipment)" 
                                            class="text-red-600 hover:text-red-900">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <p class="text-gray-500">No equipment found.</p>
            </div>
        }
    </div>

    @if (showForm)
    {
        <GetFitterGetBigger.Admin.Components.Pages.Equipment.EquipmentForm Equipment="@selectedEquipment" OnSave="HandleSave" OnCancel="HideForm" />
    }

    @if (showDeleteConfirmation && equipmentToDelete != null)
    {
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div class="bg-white rounded-lg p-6 max-w-md w-full">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Delete Equipment</h3>
                <p class="text-sm text-gray-500 mb-6">
                    Are you sure you want to delete <strong>@equipmentToDelete.Name</strong>? 
                    This action cannot be undone.
                </p>
                @if (EquipmentStateService.IsDeleting)
                {
                    <div class="text-center">
                        <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
                    </div>
                }
                else
                {
                    <div class="flex justify-end space-x-3">
                        <button @onclick="HideDeleteConfirmation" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                            Cancel
                        </button>
                        <button @onclick="ConfirmDelete" 
                                class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700">
                            Delete
                        </button>
                    </div>
                }
            </div>
        </div>
    }
}
else if (TableName == "ExerciseWeightTypes")
{
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-semibold text-gray-800">Exercise Weight Types</h2>
                <p class="text-gray-600">View exercise weight type classifications and validation rules</p>
            </div>
        </div>

        @if (ExerciseWeightTypeStateService.ErrorMessage != null)
        {
            <ErrorAlert 
                ErrorMessage="@ExerciseWeightTypeStateService.ErrorMessage"
                OnDismiss="ExerciseWeightTypeStateService.ClearError"
                OnRetry="async () => await ExerciseWeightTypeStateService.LoadWeightTypesAsync()"
                RetryTestId="weighttype-retry-button"
                DismissTestId="weighttype-dismiss-button" />
        }

        @if (ExerciseWeightTypeStateService.IsLoading)
        {
            <ExerciseWeightTypesSkeleton />
        }
        else if (ExerciseWeightTypeStateService.WeightTypes.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var weightType in ExerciseWeightTypeStateService.WeightTypes)
                {
                    <div class="bg-gray-50 p-6 rounded-lg border border-gray-200 hover:shadow-lg transition-shadow">
                        <div class="flex items-center justify-between mb-3">
                            <h3 class="text-lg font-semibold text-gray-800">@weightType.Name</h3>
                            @{
                                var badgeColor = weightType.Code switch
                                {
                                    "BODYWEIGHT_ONLY" => "bg-blue-100 text-blue-800",
                                    "NO_WEIGHT" => "bg-gray-100 text-gray-800",
                                    "BODYWEIGHT_OPTIONAL" => "bg-green-100 text-green-800",
                                    "WEIGHT_REQUIRED" => "bg-orange-100 text-orange-800",
                                    "MACHINE_WEIGHT" => "bg-purple-100 text-purple-800",
                                    _ => "bg-gray-100 text-gray-800"
                                };
                            }
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @badgeColor">
                                @weightType.Code
                            </span>
                        </div>
                        <p class="text-sm text-gray-600 mb-4">@weightType.Description</p>
                        <div class="bg-white p-3 rounded border">
                            <h4 class="text-xs font-medium text-gray-700 mb-2">Validation Rule:</h4>
                            <p class="text-xs text-gray-600">@ExerciseWeightTypeStateService.GetValidationMessage(weightType.Code)</p>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <p class="text-gray-500">No exercise weight types found.</p>
            </div>
        }
    </div>
}
else if (TableName == "MuscleGroups")
{
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-semibold text-gray-800">Muscle Groups</h2>
                <p class="text-gray-600">Manage muscle groups associated with body parts</p>
            </div>
            <button @onclick="ShowCreateMuscleGroupForm" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                Add Muscle Group
            </button>
        </div>

        @if (MuscleGroupsStateService.ErrorMessage != null)
        {
            <ErrorAlert 
                ErrorMessage="@MuscleGroupsStateService.ErrorMessage"
                OnDismiss="MuscleGroupsStateService.ClearError"
                OnRetry="async () => await MuscleGroupsStateService.LoadMuscleGroupsAsync()"
                RetryTestId="musclegroups-retry-button"
                DismissTestId="musclegroups-dismiss-button" />
        }

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Search muscle groups</label>
                <input type="text" @bind="MuscleGroupsStateService.SearchTerm" @bind:event="oninput"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="Search by name...">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Filter by body part</label>
                <select @bind="MuscleGroupsStateService.SelectedBodyPartId" 
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All body parts</option>
                    @if (MuscleGroupsStateService.IsLoadingBodyParts)
                    {
                        <option disabled>Loading...</option>
                    }
                    else
                    {
                        @foreach (var bodyPart in MuscleGroupsStateService.BodyParts.OrderBy(bp => bp.Value))
                        {
                            <option value="@bodyPart.Id">@bodyPart.Value</option>
                        }
                    }
                </select>
            </div>
        </div>

        @if (MuscleGroupsStateService.IsLoading)
        {
            <MuscleGroupsSkeleton />
        }
        else if (MuscleGroupsStateService.FilteredMuscleGroups.Any())
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Body Part</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Updated</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var muscleGroup in MuscleGroupsStateService.FilteredMuscleGroups)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                    @muscleGroup.Name
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @(muscleGroup.BodyPartName ?? "Unknown")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @if (muscleGroup.IsActive)
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                            Inactive
                                        </span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @muscleGroup.CreatedAt.ToString("yyyy-MM-dd")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @(muscleGroup.UpdatedAt?.ToString("yyyy-MM-dd") ?? "-")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button @onclick="() => ShowEditMuscleGroupForm(muscleGroup)" 
                                            class="text-indigo-600 hover:text-indigo-900 mr-4">
                                        Edit
                                    </button>
                                    <button @onclick="() => ShowDeleteMuscleGroupConfirmation(muscleGroup)" 
                                            class="text-red-600 hover:text-red-900">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <p class="text-gray-500">No muscle groups found.</p>
            </div>
        }
    </div>

    @if (showMuscleGroupForm)
    {
        <GetFitterGetBigger.Admin.Components.Pages.MuscleGroups.MuscleGroupForm 
            MuscleGroup="@selectedMuscleGroup" 
            BodyParts="@MuscleGroupsStateService.BodyParts" 
            OnSave="HandleMuscleGroupSave" 
            OnCancel="HideMuscleGroupForm" />
    }

    @if (showDeleteMuscleGroupConfirmation && muscleGroupToDelete != null)
    {
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div class="bg-white rounded-lg p-6 max-w-md w-full">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Delete Muscle Group</h3>
                <p class="text-sm text-gray-500 mb-6">
                    Are you sure you want to delete <strong>@muscleGroupToDelete.Name</strong> from <strong>@(muscleGroupToDelete.BodyPartName ?? "Unknown")</strong>? 
                    This action cannot be undone.
                </p>
                @if (MuscleGroupsStateService.IsDeleting)
                {
                    <div class="text-center">
                        <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
                    </div>
                }
                else
                {
                    <div class="flex justify-end space-x-3">
                        <button @onclick="HideDeleteMuscleGroupConfirmation" 
                                class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                            Cancel
                        </button>
                        <button @onclick="ConfirmDeleteMuscleGroup" 
                                class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700">
                            Delete
                        </button>
                    </div>
                }
            </div>
        </div>
    }
}
else if (TableName == "WorkoutObjectives")
{
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-semibold text-gray-800">Workout Objectives</h2>
                <p class="text-gray-600">View workout objectives for training programs</p>
            </div>
        </div>

        <div class="mb-4">
            <ReferenceDataSearchBar
                Label="Search objectives"
                Placeholder="Search by name or description..."
                @bind-Value="@WorkoutReferenceDataStateService.ObjectivesSearchTerm"
                ShowResultCount="true"
                ResultCount="@WorkoutReferenceDataStateService.FilteredWorkoutObjectives.Count()" />
        </div>

        @if (WorkoutReferenceDataStateService.ObjectivesError != null)
        {
            <ErrorAlert 
                ErrorMessage="@WorkoutReferenceDataStateService.ObjectivesError"
                OnRetry="async () => await WorkoutReferenceDataStateService.LoadWorkoutObjectivesAsync()"
                RetryTestId="objectives-retry-button" />
        }

        @if (WorkoutReferenceDataStateService.IsLoadingObjectives)
        {
            <WorkoutObjectivesSkeleton />
        }
        else if (WorkoutReferenceDataStateService.FilteredWorkoutObjectives.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" data-testid="objectives-grid">
                @foreach (var objective in WorkoutReferenceDataStateService.FilteredWorkoutObjectives)
                {
                    <div class="bg-gray-50 p-6 rounded-lg border border-gray-200 hover:shadow-lg transition-shadow cursor-pointer"
                         @onclick="() => ShowObjectiveDetails(objective)"
                         data-testid="objective-card">
                        <h3 class="text-lg font-semibold text-gray-800 mb-3">@objective.Value</h3>
                        <p class="text-sm text-gray-600 line-clamp-3">@(objective.Description ?? "No description available")</p>
                        <button class="mt-3 text-blue-600 hover:text-blue-800 text-sm font-medium"
                                data-testid="objective-view-details-button">
                            View Details →
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <p class="text-gray-500">No workout objectives found.</p>
            </div>
        }
    </div>

    @if (selectedObjective != null)
    {
        <ReferenceDataDetailModal 
            Title="Workout Objective Details"
            Item="@selectedObjective"
            OnClose="() => selectedObjective = null"
            CloseOnBackdropClick="true"
            CloseOnEscape="true">
            <ContentTemplate Context="objective">
                <div class="space-y-4" data-testid="objective-detail-modal-content">
                    <div>
                        <h4 class="font-semibold text-gray-700">Name</h4>
                        <p class="text-gray-900">@objective.Value</p>
                    </div>
                    <div>
                        <h4 class="font-semibold text-gray-700">Description</h4>
                        <p class="text-gray-900 whitespace-pre-wrap">@(objective.Description ?? "No description available")</p>
                    </div>
                    <div>
                        <h4 class="font-semibold text-gray-700">ID</h4>
                        <p class="text-gray-500 font-mono text-sm">@objective.Id</p>
                    </div>
                </div>
            </ContentTemplate>
        </ReferenceDataDetailModal>
    }
}
else if (TableName == "WorkoutCategories")
{
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-semibold text-gray-800">Workout Categories</h2>
                <p class="text-gray-600">View workout categories and their muscle group associations</p>
            </div>
        </div>

        <div class="mb-4">
            <ReferenceDataSearchBar
                Label="Search categories"
                Placeholder="Search by name or muscle groups..."
                @bind-Value="@WorkoutReferenceDataStateService.CategoriesSearchTerm"
                ShowResultCount="true"
                ResultCount="@WorkoutReferenceDataStateService.FilteredWorkoutCategories.Count()" />
        </div>

        @if (WorkoutReferenceDataStateService.CategoriesError != null)
        {
            <ErrorAlert 
                ErrorMessage="@WorkoutReferenceDataStateService.CategoriesError"
                OnRetry="async () => await WorkoutReferenceDataStateService.LoadWorkoutCategoriesAsync()"
                RetryTestId="categories-retry-button" />
        }

        @if (WorkoutReferenceDataStateService.IsLoadingCategories)
        {
            <WorkoutCategoriesSkeleton />
        }
        else if (WorkoutReferenceDataStateService.FilteredWorkoutCategories.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4" data-testid="categories-grid">
                @foreach (var category in WorkoutReferenceDataStateService.FilteredWorkoutCategories)
                {
                    <div class="bg-gray-50 p-4 rounded-lg border border-gray-200 hover:shadow-lg transition-all cursor-pointer text-center"
                         style="border: 2px solid @(category.Color ?? "#E5E7EB")20"
                         @onclick="() => ShowCategoryDetails(category)"
                         data-testid="category-card">
                        <div class="w-16 h-16 mx-auto mb-3 flex items-center justify-center rounded-lg"
                             style="background-color: @(category.Color ?? "#E5E7EB")20">
                            @if (!string.IsNullOrEmpty(category.Icon))
                            {
                                <div class="w-12 h-12" data-testid="category-icon">
                                    @((MarkupString)category.Icon)
                                </div>
                            }
                            else
                            {
                                <span class="text-2xl font-bold" style="color: @(category.Color ?? "#6B7280")">
                                    @(category.Value?.FirstOrDefault())
                                </span>
                            }
                        </div>
                        <h3 class="font-semibold text-gray-800 mb-1">@category.Value</h3>
                        @if (!string.IsNullOrEmpty(category.PrimaryMuscleGroups))
                        {
                            <p class="text-xs text-gray-600" data-testid="muscle-groups">@category.PrimaryMuscleGroups</p>
                        }
                        <button class="mt-2 text-blue-600 hover:text-blue-800 text-sm font-medium"
                                data-testid="category-view-details-button">
                            View Details
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <p class="text-gray-500">No workout categories found.</p>
            </div>
        }
    </div>

    @if (selectedCategory != null)
    {
        <ReferenceDataDetailModal 
            Title="Workout Category Details"
            Item="@selectedCategory"
            OnClose="() => selectedCategory = null"
            CloseOnBackdropClick="true"
            CloseOnEscape="true">
            <ContentTemplate Context="category">
                <div class="space-y-4" data-testid="category-detail-modal-content">
                    <div>
                        <h4 class="font-semibold text-gray-700">Name</h4>
                        <p class="text-gray-900">@category.Value</p>
                    </div>
                    @if (!string.IsNullOrEmpty(category.Description))
                    {
                        <div>
                            <h4 class="font-semibold text-gray-700">Description</h4>
                            <p class="text-gray-900 whitespace-pre-wrap">@category.Description</p>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(category.PrimaryMuscleGroups))
                    {
                        <div>
                            <h4 class="font-semibold text-gray-700">Primary Muscle Groups</h4>
                            <p class="text-gray-900">@category.PrimaryMuscleGroups</p>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(category.Color))
                    {
                        <div>
                            <h4 class="font-semibold text-gray-700">Color</h4>
                            <div class="flex items-center gap-2">
                                <div class="w-6 h-6 rounded" style="background-color: @category.Color"></div>
                                <p class="text-gray-900 font-mono">@category.Color</p>
                            </div>
                        </div>
                    }
                    <div>
                        <h4 class="font-semibold text-gray-700">ID</h4>
                        <p class="text-gray-500 font-mono text-sm">@category.WorkoutCategoryId</p>
                    </div>
                </div>
            </ContentTemplate>
        </ReferenceDataDetailModal>
    }
}
else if (TableName == "ExecutionProtocols")
{
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h2 class="text-2xl font-semibold text-gray-800">Execution Protocols</h2>
                <p class="text-gray-600">View exercise execution protocols and timing patterns</p>
            </div>
        </div>

        <div class="mb-4">
            <ReferenceDataSearchBar
                Label="Search protocols"
                Placeholder="Search by name or code..."
                @bind-Value="@WorkoutReferenceDataStateService.ProtocolsSearchTerm"
                ShowResultCount="true"
                ResultCount="@WorkoutReferenceDataStateService.FilteredExecutionProtocols.Count()" />
        </div>

        @if (WorkoutReferenceDataStateService.ProtocolsError != null)
        {
            <ErrorAlert 
                ErrorMessage="@WorkoutReferenceDataStateService.ProtocolsError"
                OnRetry="async () => await WorkoutReferenceDataStateService.LoadExecutionProtocolsAsync()"
                RetryTestId="protocols-retry-button" />
        }

        @if (WorkoutReferenceDataStateService.IsLoadingProtocols)
        {
            <ExecutionProtocolsSkeleton />
        }
        else if (WorkoutReferenceDataStateService.FilteredExecutionProtocols.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" data-testid="protocols-grid">
                @foreach (var protocol in WorkoutReferenceDataStateService.FilteredExecutionProtocols)
                {
                    <div class="bg-gray-50 p-6 rounded-lg border border-gray-200 hover:shadow-lg transition-shadow"
                         data-testid="protocol-card">
                        <div class="flex items-center justify-between mb-3">
                            <h3 class="text-lg font-semibold text-gray-800">@protocol.Value</h3>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                @protocol.Code
                            </span>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(protocol.Description))
                        {
                            <p class="text-sm text-gray-600 mb-4 line-clamp-2">@protocol.Description</p>
                        }
                        
                        <div class="bg-white p-3 rounded border mb-3">
                            <div class="grid grid-cols-2 gap-2 text-xs">
                                <div>
                                    <span class="font-medium text-gray-700">Time-Based:</span>
                                    <span class="text-gray-900">@(protocol.TimeBase ? "Yes" : "No")</span>
                                </div>
                                <div>
                                    <span class="font-medium text-gray-700">Rep-Based:</span>
                                    <span class="text-gray-900">@(protocol.RepBase ? "Yes" : "No")</span>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(protocol.IntensityLevel))
                            {
                                <div class="mt-2">
                                    <span class="font-medium text-gray-700 text-xs">Intensity:</span>
                                    @{
                                        var intensityColor = protocol.IntensityLevel?.ToLower() switch
                                        {
                                            "low" => "bg-green-100 text-green-800",
                                            "medium" => "bg-yellow-100 text-yellow-800",
                                            "high" => "bg-red-100 text-red-800",
                                            _ => "bg-gray-100 text-gray-800"
                                        };
                                    }
                                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium @intensityColor ml-1">
                                        @protocol.IntensityLevel
                                    </span>
                                </div>
                            }
                        </div>
                        
                        <button @onclick="() => ShowProtocolDetails(protocol)"
                                class="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                data-testid="protocol-view-details-button">
                            View Details →
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8">
                <p class="text-gray-500">No execution protocols found.</p>
            </div>
        }
    </div>

    @if (selectedProtocol != null)
    {
        <ReferenceDataDetailModal 
            Title="Execution Protocol Details"
            Item="@selectedProtocol"
            OnClose="() => selectedProtocol = null"
            CloseOnBackdropClick="true"
            CloseOnEscape="true">
            <ContentTemplate Context="protocol">
                <div class="space-y-4" data-testid="protocol-detail-modal-content">
                    <div>
                        <h4 class="font-semibold text-gray-700">Name</h4>
                        <p class="text-gray-900">@protocol.Value</p>
                    </div>
                    <div>
                        <h4 class="font-semibold text-gray-700">Code</h4>
                        <p class="text-gray-900 font-mono">@protocol.Code</p>
                    </div>
                    @if (!string.IsNullOrEmpty(protocol.Description))
                    {
                        <div>
                            <h4 class="font-semibold text-gray-700">Description</h4>
                            <p class="text-gray-900 whitespace-pre-wrap">@protocol.Description</p>
                        </div>
                    }
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <h4 class="font-semibold text-gray-700">Time-Based</h4>
                            <p class="text-gray-900">@(protocol.TimeBase ? "Yes" : "No")</p>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-700">Rep-Based</h4>
                            <p class="text-gray-900">@(protocol.RepBase ? "Yes" : "No")</p>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(protocol.IntensityLevel))
                    {
                        <div>
                            <h4 class="font-semibold text-gray-700">Intensity Level</h4>
                            <p class="text-gray-900">@protocol.IntensityLevel</p>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(protocol.RestPattern))
                    {
                        <div>
                            <h4 class="font-semibold text-gray-700">Rest Pattern</h4>
                            <p class="text-gray-900">@protocol.RestPattern</p>
                        </div>
                    }
                    <div>
                        <h4 class="font-semibold text-gray-700">ID</h4>
                        <p class="text-gray-500 font-mono text-sm">@protocol.ExecutionProtocolId</p>
                    </div>
                </div>
            </ContentTemplate>
        </ReferenceDataDetailModal>
    }
}
else
{
    <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-semibold text-gray-800">@DisplayName</h2>
            <button class="bg-gray-300 text-gray-500 font-bold py-2 px-4 rounded cursor-not-allowed" disabled>
                Add New
            </button>
        </div>

        @if (items == null)
        {
            <ReferenceTableSkeleton />
        }
        else
        {
            <div class="overflow-x-auto">
                <table class="min-w-full bg-white">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="py-3 px-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                            <th class="py-3 px-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        </tr>
                    </thead>
                    <tbody class="text-gray-700">
                        @foreach (var item in items)
                        {
                            <tr class="border-b border-gray-200 hover:bg-gray-50">
                                <td class="py-4 px-6">@item.Value</td>
                                <td class="py-4 px-6">@item.Description</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string TableName { get; set; } = string.Empty;

    private IEnumerable<ReferenceDataDto> items = Enumerable.Empty<ReferenceDataDto>();
    private string DisplayName { get; set; } = string.Empty;

    // Dictionary mapping table names to their data fetching methods
    private readonly Dictionary<string, Func<Task<IEnumerable<ReferenceDataDto>>>> _dataFetchers = new();

    // Dictionary mapping table names to display names
    private static readonly Dictionary<string, string> _displayNames = new()
    {
        ["BodyParts"] = "Body Parts",
        ["DifficultyLevels"] = "Difficulty Levels",
        ["Equipment"] = "Equipment",
        ["ExerciseWeightTypes"] = "Exercise Weight Types",
        ["KineticChainTypes"] = "Kinetic Chain Types",
        ["MetricTypes"] = "Metric Types",
        ["MovementPatterns"] = "Movement Patterns",
        ["MuscleGroups"] = "Muscle Groups",
        ["MuscleRoles"] = "Muscle Roles",
        ["WorkoutObjectives"] = "Workout Objectives",
        ["WorkoutCategories"] = "Workout Categories",
        ["ExecutionProtocols"] = "Execution Protocols"
    };

    protected override void OnInitialized()
    {
        // Initialize data fetchers dictionary
        _dataFetchers["BodyParts"] = ReferenceDataService.GetBodyPartsAsync;
        _dataFetchers["DifficultyLevels"] = ReferenceDataService.GetDifficultyLevelsAsync;
        _dataFetchers["Equipment"] = ReferenceDataService.GetEquipmentAsync;
        _dataFetchers["KineticChainTypes"] = ReferenceDataService.GetKineticChainTypesAsync;
        _dataFetchers["MetricTypes"] = ReferenceDataService.GetMetricTypesAsync;
        _dataFetchers["MovementPatterns"] = ReferenceDataService.GetMovementPatternsAsync;
        _dataFetchers["MuscleGroups"] = ReferenceDataService.GetMuscleGroupsAsync;
        _dataFetchers["MuscleRoles"] = ReferenceDataService.GetMuscleRolesAsync;
    }

    // Equipment management fields
    private bool showForm = false;
    private bool showDeleteConfirmation = false;
    private EquipmentDto? selectedEquipment;
    private EquipmentDto? equipmentToDelete;

    // MuscleGroups management fields
    private bool showMuscleGroupForm = false;
    private bool showDeleteMuscleGroupConfirmation = false;
    private MuscleGroupDto? selectedMuscleGroup;
    private MuscleGroupDto? muscleGroupToDelete;

    // Workout Reference Data fields
    private ReferenceDataDto? selectedObjective;
    private WorkoutCategoryDto? selectedCategory;
    private ExecutionProtocolDto? selectedProtocol;

    protected override async Task OnInitializedAsync()
    {
        SetDisplayName();
        
        if (TableName == "Equipment")
        {
            EquipmentStateService.OnChange += StateHasChanged;
            await EquipmentStateService.InitializeAsync();
        }
        else if (TableName == "ExerciseWeightTypes")
        {
            ExerciseWeightTypeStateService.OnChange += StateHasChanged;
            await ExerciseWeightTypeStateService.LoadWeightTypesAsync();
        }
        else if (TableName == "MuscleGroups")
        {
            MuscleGroupsStateService.OnChange += StateHasChanged;
            await MuscleGroupsStateService.InitializeAsync();
        }
        else if (TableName == "WorkoutObjectives" || TableName == "WorkoutCategories" || TableName == "ExecutionProtocols")
        {
            WorkoutReferenceDataStateService.OnChange += StateHasChanged;
            await WorkoutReferenceDataStateService.InitializeAsync();
        }
        else
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        if (_dataFetchers.TryGetValue(TableName, out var fetcher))
        {
            items = await fetcher();
        }
        else
        {
            items = new List<ReferenceDataDto>();
        }
    }

    private void SetDisplayName()
    {
        DisplayName = _displayNames.TryGetValue(TableName, out var name) ? name : TableName;
    }

    // Equipment management methods
    private void ShowCreateForm()
    {
        selectedEquipment = null;
        showForm = true;
    }

    private void ShowEditForm(EquipmentDto equipment)
    {
        selectedEquipment = equipment;
        showForm = true;
    }

    private void HideForm()
    {
        showForm = false;
        selectedEquipment = null;
    }

    private async Task HandleSave()
    {
        HideForm();
        await EquipmentStateService.LoadEquipmentAsync(); // Refresh the list
    }

    private void ShowDeleteConfirmation(EquipmentDto equipment)
    {
        equipmentToDelete = equipment;
        showDeleteConfirmation = true;
    }

    private void HideDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        equipmentToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (equipmentToDelete != null)
        {
            await EquipmentStateService.DeleteEquipmentAsync(equipmentToDelete.Id);
            HideDeleteConfirmation();
        }
    }

    // MuscleGroups management methods
    private void ShowCreateMuscleGroupForm()
    {
        selectedMuscleGroup = null;
        showMuscleGroupForm = true;
    }

    private void ShowEditMuscleGroupForm(MuscleGroupDto muscleGroup)
    {
        selectedMuscleGroup = muscleGroup;
        showMuscleGroupForm = true;
    }

    private void HideMuscleGroupForm()
    {
        showMuscleGroupForm = false;
        selectedMuscleGroup = null;
    }

    private async Task HandleMuscleGroupSave()
    {
        HideMuscleGroupForm();
        await MuscleGroupsStateService.LoadMuscleGroupsAsync(); // Refresh the list
    }

    private void ShowDeleteMuscleGroupConfirmation(MuscleGroupDto muscleGroup)
    {
        muscleGroupToDelete = muscleGroup;
        showDeleteMuscleGroupConfirmation = true;
    }

    private void HideDeleteMuscleGroupConfirmation()
    {
        showDeleteMuscleGroupConfirmation = false;
        muscleGroupToDelete = null;
    }

    private async Task ConfirmDeleteMuscleGroup()
    {
        if (muscleGroupToDelete != null)
        {
            await MuscleGroupsStateService.DeleteMuscleGroupAsync(muscleGroupToDelete.Id);
            HideDeleteMuscleGroupConfirmation();
        }
    }

    // Workout Reference Data methods
    private void ShowObjectiveDetails(ReferenceDataDto objective)
    {
        selectedObjective = objective;
    }

    private void ShowCategoryDetails(WorkoutCategoryDto category)
    {
        selectedCategory = category;
    }

    private void ShowProtocolDetails(ExecutionProtocolDto protocol)
    {
        selectedProtocol = protocol;
    }

    public void Dispose()
    {
        if (TableName == "Equipment")
        {
            EquipmentStateService.OnChange -= StateHasChanged;
        }
        else if (TableName == "ExerciseWeightTypes")
        {
            ExerciseWeightTypeStateService.OnChange -= StateHasChanged;
        }
        else if (TableName == "MuscleGroups")
        {
            MuscleGroupsStateService.OnChange -= StateHasChanged;
        }
        else if (TableName == "WorkoutObjectives" || TableName == "WorkoutCategories" || TableName == "ExecutionProtocols")
        {
            WorkoutReferenceDataStateService.OnChange -= StateHasChanged;
        }
    }
}
