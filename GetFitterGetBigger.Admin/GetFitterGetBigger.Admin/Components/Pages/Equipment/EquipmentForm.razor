@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using System.ComponentModel.DataAnnotations
@inject IEquipmentStateService StateService

<div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 class="text-lg font-medium text-gray-900 mb-4">
            @(Equipment == null ? "Add New Equipment" : "Edit Equipment")
        </h3>

        <EditForm Model="@model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            
            <div class="mb-4">
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                    Equipment Name <span class="text-red-500">*</span>
                </label>
                <InputText id="name" @bind-Value="model.Name" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                           placeholder="Enter equipment name" />
                <ValidationMessage For="@(() => model.Name)" class="text-red-500 text-sm mt-1" />
            </div>

            @if (StateService.ErrorMessage != null)
            {
                <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
                    <p>@StateService.ErrorMessage</p>
                </div>
            }

            <div class="flex justify-end space-x-3">
                <button type="button" @onclick="OnCancel" 
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                        disabled="@(StateService.IsCreating || StateService.IsUpdating)">
                    Cancel
                </button>
                <button type="submit" 
                        class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50"
                        disabled="@(StateService.IsCreating || StateService.IsUpdating)">
                    @if (StateService.IsCreating || StateService.IsUpdating)
                    {
                        <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                    }
                    @(Equipment == null ? "Create" : "Update")
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public EquipmentDto? Equipment { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private EquipmentFormModel model = new();

    protected override void OnInitialized()
    {
        if (Equipment != null)
        {
            model.Name = Equipment.Name;
        }
    }

    private async Task HandleSubmit()
    {
        StateService.ClearError();

        if (Equipment == null)
        {
            // Create new equipment
            var createDto = new CreateEquipmentDto { Name = model.Name };
            await StateService.CreateEquipmentAsync(createDto);
        }
        else
        {
            // Update existing equipment
            var updateDto = new UpdateEquipmentDto { Name = model.Name };
            await StateService.UpdateEquipmentAsync(Equipment.Id, updateDto);
        }

        if (StateService.ErrorMessage == null)
        {
            await OnSave.InvokeAsync();
        }
    }

    private class EquipmentFormModel
    {
        [Required(ErrorMessage = "Equipment name is required")]
        [StringLength(100, ErrorMessage = "Equipment name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;
    }
}