@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Components.Shared
@inject IExerciseWeightTypeStateService ExerciseWeightTypeStateService
@implements IDisposable

<div class="bg-white rounded-lg shadow-md p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-2xl font-semibold text-gray-800">Exercise Weight Types</h1>
            <p class="text-gray-600">View exercise weight type classifications and validation rules</p>
        </div>
    </div>

    @if (ExerciseWeightTypeStateService.ErrorMessage != null)
    {
        <ErrorAlert 
            ErrorMessage="@ExerciseWeightTypeStateService.ErrorMessage"
            OnDismiss="ExerciseWeightTypeStateService.ClearError"
            OnRetry="async () => await ExerciseWeightTypeStateService.LoadWeightTypesAsync()"
            RetryTestId="weighttype-retry-button"
            DismissTestId="weighttype-dismiss-button" />
    }

    @if (ExerciseWeightTypeStateService.IsLoading)
    {
        <ExerciseWeightTypesSkeleton />
    }
    else if (ExerciseWeightTypeStateService.WeightTypes.Any())
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var weightType in ExerciseWeightTypeStateService.WeightTypes)
            {
                <div class="bg-gray-50 p-6 rounded-lg border border-gray-200 hover:shadow-lg transition-shadow">
                    <div class="flex items-center justify-between mb-3">
                        <h3 class="text-lg font-semibold text-gray-800">@weightType.Name</h3>
                        @{
                            var badgeColor = GetWeightTypeBadgeColor(weightType.Code);
                        }
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @badgeColor">
                            @weightType.Code
                        </span>
                    </div>
                    <p class="text-sm text-gray-600 mb-4">@weightType.Description</p>
                    <div class="bg-white p-3 rounded border">
                        <h4 class="text-xs font-medium text-gray-700 mb-2">Validation Rule:</h4>
                        <p class="text-xs text-gray-600">@ExerciseWeightTypeStateService.GetValidationMessage(weightType.Code)</p>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-8">
            <p class="text-gray-500">No exercise weight types found.</p>
        </div>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        ExerciseWeightTypeStateService.OnChange += StateHasChanged;
        await ExerciseWeightTypeStateService.LoadWeightTypesAsync();
    }

    private string GetWeightTypeBadgeColor(string code)
    {
        return code switch
        {
            "BODYWEIGHT_ONLY" => "bg-blue-100 text-blue-800",
            "NO_WEIGHT" => "bg-gray-100 text-gray-800",
            "BODYWEIGHT_OPTIONAL" => "bg-green-100 text-green-800",
            "WEIGHT_REQUIRED" => "bg-orange-100 text-orange-800",
            "MACHINE_WEIGHT" => "bg-purple-100 text-purple-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    public void Dispose()
    {
        ExerciseWeightTypeStateService.OnChange -= StateHasChanged;
    }
}