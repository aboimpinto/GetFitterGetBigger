@* This is a demo page showing how to use the WorkoutTemplateList component *@
@page "/workout-templates-demo"
@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Builders
@using GetFitterGetBigger.Admin.Components.WorkoutTemplates
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer
@inject IWorkoutTemplateStateService StateService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Workout Templates - GetFitterGetBigger Admin</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="bg-white rounded-lg shadow-md p-6">
        @* Header *@
        <div class="flex justify-between items-center mb-6">
            <div>
                <h1 class="text-2xl font-semibold text-gray-800">Workout Templates</h1>
                <p class="text-gray-600">Manage and organize workout templates</p>
            </div>
            <button @onclick="NavigateToCreate" 
                    data-testid="create-template-button"
                    class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                New Template
            </button>
        </div>

        @* Filters *@
        <div class="mb-6 grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Search</label>
                <input type="text" 
                       @bind="filterName" 
                       @bind:event="oninput"
                       @onkeyup="@(async (e) => { if (e.Key == "Enter") await ApplyFilter(); })"
                       data-testid="search-input"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="Template name...">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select @bind="filterCategory" 
                        data-testid="category-select"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All Categories</option>
                    @foreach (var category in StateService.WorkoutCategories)
                    {
                        <option value="@category.Id">@category.Value</option>
                    }
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Difficulty</label>
                <select @bind="filterDifficulty" 
                        data-testid="difficulty-select"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All Levels</option>
                    @foreach (var difficulty in StateService.DifficultyLevels)
                    {
                        <option value="@difficulty.Id">@difficulty.Value</option>
                    }
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">State</label>
                <select @bind="filterState" 
                        data-testid="state-select"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All States</option>
                    @foreach (var state in StateService.WorkoutStates)
                    {
                        <option value="@state.Id">@state.Value</option>
                    }
                </select>
            </div>
            <div class="flex items-end gap-2">
                <button @onclick="ApplyFilter" 
                        data-testid="apply-filter-button"
                        class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-md transition-colors">
                    Apply
                </button>
                <button @onclick="ClearFilter" 
                        data-testid="clear-filter-button"
                        class="bg-gray-400 hover:bg-gray-500 text-white font-medium py-2 px-4 rounded-md transition-colors">
                    Clear
                </button>
            </div>
        </div>

        @* Workout Template List Component *@
        <WorkoutTemplateList 
            OnCreateNew="NavigateToCreate"
            OnTemplateSelected="HandleTemplateSelected"
            OnTemplateEdit="HandleTemplateEdit"
            OnTemplateDuplicate="HandleTemplateDuplicate"
            OnTemplateDelete="HandleTemplateDelete" />
    </div>
</div>

@code {
    private string filterName = "";
    private string filterCategory = "";
    private string filterDifficulty = "";
    private string filterState = "";

    protected override async Task OnInitializedAsync()
    {
        StateService.OnChange += StateHasChanged;

        // Initialize the state service if needed
        if (StateService.CurrentPage == null)
        {
            await StateService.InitializeAsync();
        }
    }

    private async Task ApplyFilter()
    {
        var filter = new WorkoutTemplateFilterDtoBuilder()
            .WithNamePattern(string.IsNullOrWhiteSpace(filterName) ? null : filterName)
            .WithCategoryId(string.IsNullOrWhiteSpace(filterCategory) ? null : filterCategory)
            .WithDifficultyId(string.IsNullOrWhiteSpace(filterDifficulty) ? null : filterDifficulty)
            .WithStateId(string.IsNullOrWhiteSpace(filterState) ? null : filterState)
            .WithPage(1)
            .WithPageSize(StateService.CurrentFilter.PageSize)
            .Build();

        await StateService.LoadWorkoutTemplatesAsync(filter);
    }

    private async Task ClearFilter()
    {
        filterName = "";
        filterCategory = "";
        filterDifficulty = "";
        filterState = "";

        var filter = new WorkoutTemplateFilterDtoBuilder()
            .WithPage(1)
            .WithPageSize(StateService.CurrentFilter.PageSize)
            .Build();
            
        await StateService.LoadWorkoutTemplatesAsync(filter);
    }

    private void NavigateToCreate()
    {
        StateService.StoreReturnPage();
        Navigation.NavigateTo("/workout-templates/new");
    }

    private void HandleTemplateSelected(WorkoutTemplateDto template)
    {
        StateService.StoreReturnPage();
        Navigation.NavigateTo($"/workout-templates/{template.Id}");
    }

    private void HandleTemplateEdit(WorkoutTemplateDto template)
    {
        StateService.StoreReturnPage();
        Navigation.NavigateTo($"/workout-templates/{template.Id}/edit");
    }

    private async Task HandleTemplateDuplicate(WorkoutTemplateDto template)
    {
        // In a real implementation, you might show a dialog to get the new name
        var duplicateDto = new DuplicateWorkoutTemplateDto
        {
            NewName = $"{template.Name} (Copy)"
        };

        await StateService.DuplicateWorkoutTemplateAsync(template.Id, duplicateDto);
    }

    private async Task HandleTemplateDelete(WorkoutTemplateDto template)
    {
        // In a real implementation, you would show a confirmation dialog
        if (template.WorkoutState?.Value?.ToUpperInvariant() == "DRAFT" || 
            template.WorkoutState?.Value?.ToUpperInvariant() == "ARCHIVED")
        {
            await StateService.DeleteWorkoutTemplateAsync(template.Id);
        }
    }

    public void Dispose()
    {
        StateService.OnChange -= StateHasChanged;
    }
}