@page "/workout-templates/{Id}"
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Components.WorkoutTemplates
@using GetFitterGetBigger.Admin.Components.Shared
@inject IWorkoutTemplateService WorkoutTemplateService
@inject NavigationManager Navigation

<PageTitle>Workout Template Details</PageTitle>

<div class="container mx-auto px-4 py-6">
    <div class="mb-4">
        <Breadcrumb Items="@breadcrumbItems" />
    </div>
    @if (_isLoading)
    {
        <WorkoutTemplateDetailSkeleton />
    }
    else if (_errorMessage != null)
    {
        <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert" data-testid="error-message">
            <strong class="font-bold">Error:</strong>
            <span class="block sm:inline">@_errorMessage</span>
        </div>
    }
    else
    {
        <WorkoutTemplateDetail 
            Template="@_template"
            OnEdit="@HandleEdit"
            OnDuplicate="@HandleDuplicate"
            OnDelete="@HandleDelete"
            OnStateChange="@HandleStateChange" />
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private WorkoutTemplateDto? _template;
    private bool _isLoading = true;
    private string? _errorMessage;
    private List<Breadcrumb.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplate();
    }

    private async Task LoadTemplate()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            _template = await WorkoutTemplateService.GetWorkoutTemplateByIdAsync(Id);
            
            if (_template != null)
            {
                // Initialize breadcrumb
                breadcrumbItems = new List<Breadcrumb.BreadcrumbItem>
                {
                    new() { Text = "Home", Href = "/" },
                    new() { Text = "Workout Templates", Href = "/workout-templates" },
                    new() { Text = _template.Name }
                };
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void HandleEdit(WorkoutTemplateDto template)
    {
        Navigation.NavigateTo($"/workout-templates/{template.Id}/edit");
    }

    private async Task HandleDuplicate(WorkoutTemplateDto template)
    {
        try
        {
            var duplicateDto = new DuplicateWorkoutTemplateDto { NewName = $"{template.Name} (Copy)" };
            var duplicatedTemplate = await WorkoutTemplateService.DuplicateWorkoutTemplateAsync(template.Id, duplicateDto);
            Navigation.NavigateTo($"/workout-templates/{duplicatedTemplate.Id}/edit");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to duplicate template: {ex.Message}";
        }
    }

    private async Task HandleDelete(WorkoutTemplateDto template)
    {
        try
        {
            // In a real app, we'd show a confirmation dialog here
            await WorkoutTemplateService.DeleteWorkoutTemplateAsync(template.Id);
            Navigation.NavigateTo("/workout-templates");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to delete template: {ex.Message}";
        }
    }

    private async Task HandleStateChange(ReferenceDataDto newState)
    {
        try
        {
            var changeStateDto = new ChangeWorkoutStateDto { NewStateId = newState.Id };
            _template = await WorkoutTemplateService.ChangeWorkoutTemplateStateAsync(_template!.Id, changeStateDto);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to update template state: {ex.Message}";
        }
    }
}