@page "/workout-templates/{Id}"
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Models.ReferenceData
@using GetFitterGetBigger.Admin.Components.WorkoutTemplates
@using GetFitterGetBigger.Admin.Components.Shared
@inject IWorkoutTemplateService WorkoutTemplateService
@inject IToastService ToastService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Workout Template Details</PageTitle>

<div class="container mx-auto px-4 py-6">
    <div class="mb-4">
        <Breadcrumb Items="@breadcrumbItems" />
    </div>
    @if (_isLoading)
    {
        <WorkoutTemplateDetailSkeleton />
    }
    else if (_errorMessage != null)
    {
        <ErrorDisplay ErrorMessage="@_errorMessage"
                     Title="Error loading workout template"
                     ShowRetry="true"
                     OnRetry="LoadTemplate"
                     IsRetrying="_isLoading" />
    }
    else if (_template == null)
    {
        <div class="bg-white rounded-lg shadow-md p-8 text-center" data-testid="not-found-message">
            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h2 class="text-2xl font-semibold text-gray-900 mb-2">Workout template not found</h2>
            <p class="text-gray-600 mb-6">The workout template you're looking for doesn't exist or has been removed.</p>
            <a href="/workout-templates" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700">
                Back to Templates
            </a>
        </div>
    }
    else
    {
        <WorkoutTemplateDetail 
            Template="@_template"
            OnEdit="@HandleEdit"
            OnDuplicate="@HandleDuplicate"
            OnDelete="@HandleDelete"
            OnStateChange="@HandleStateChange" />
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private WorkoutTemplateDto? _template;
    private bool _isLoading = true;
    private string? _errorMessage;
    private List<Breadcrumb.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplate();
    }

    private async Task LoadTemplate()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            
            var templateResult = await WorkoutTemplateService.GetWorkoutTemplateByIdAsync(Id);
            
            if (templateResult.IsSuccess)
            {
                if (templateResult.Data != null && !templateResult.Data.IsEmpty)
                {
                    _template = templateResult.Data;
                    
                    // Initialize breadcrumb
                    breadcrumbItems = new List<Breadcrumb.BreadcrumbItem>
                    {
                        new() { Text = "Home", Href = "/" },
                        new() { Text = "Workout Templates", Href = "/workout-templates" },
                        new() { Text = _template.Name }
                    };
                }
                else
                {
                    // Template not found - set _template to null so the not-found UI shows
                    _template = null;
                }
            }
            else
            {
                _errorMessage = templateResult.Errors.FirstOrDefault()?.Message ?? "Failed to load template";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = GetUserFriendlyErrorMessage(ex);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void HandleEdit(WorkoutTemplateDto template)
    {
        Navigation.NavigateTo($"/workout-templates/{template.Id}/edit", forceLoad: true);
    }

    private async Task HandleDuplicate(WorkoutTemplateDto template)
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            StateHasChanged();
            
            var duplicateDto = new DuplicateWorkoutTemplateDto { NewName = $"{template.Name} (Copy)" };
            var result = await WorkoutTemplateService.DuplicateWorkoutTemplateAsync(template.Id, duplicateDto);
            
            if (result.IsSuccess)
            {
                ToastService.ShowSuccess($"Workout template '{template.Name}' duplicated successfully as '{result.Data!.Name}'.");
                // Navigate to the duplicated template detail page instead of edit
                Navigation.NavigateTo($"/workout-templates/{result.Data.Id}", forceLoad: true);
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to duplicate template";
                ToastService.ShowError(_errorMessage);
                _isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = GetUserFriendlyErrorMessage(ex, "Failed to duplicate template");
            ToastService.ShowError(_errorMessage);
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleDelete(WorkoutTemplateDto template)
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            StateHasChanged();
            
            // In a real app, we'd show a confirmation dialog here
            var result = await WorkoutTemplateService.DeleteWorkoutTemplateAsync(template.Id);
            
            if (result.IsSuccess)
            {
                ToastService.ShowSuccess($"Workout template '{template.Name}' has been deleted successfully.");
                Navigation.NavigateTo("/workout-templates", forceLoad: true);
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to delete template";
                ToastService.ShowError(_errorMessage);
                _isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = GetUserFriendlyErrorMessage(ex, "Failed to delete template");
            ToastService.ShowError(_errorMessage);
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleStateChange(ReferenceDataDto newState)
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            
            var changeStateDto = new ChangeWorkoutStateDto { WorkoutStateId = newState.Id };
            var result = await WorkoutTemplateService.ChangeWorkoutTemplateStateAsync(_template!.Id, changeStateDto);
            
            if (result.IsSuccess)
            {
                _template = result.Data!;
                ToastService.ShowSuccess($"Template state changed to '{newState.Value}' successfully.");
                
                // Update breadcrumb with new template data
                breadcrumbItems = new List<Breadcrumb.BreadcrumbItem>
                {
                    new() { Text = "Home", Href = "/" },
                    new() { Text = "Workout Templates", Href = "/workout-templates" },
                    new() { Text = _template.Name }
                };
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to update template state";
                ToastService.ShowError(_errorMessage);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = GetUserFriendlyErrorMessage(ex, "Failed to update template state");
            ToastService.ShowError(_errorMessage);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
    
    private string GetUserFriendlyErrorMessage(Exception ex, string? context = null)
    {
        var prefix = string.IsNullOrEmpty(context) ? "" : $"{context}: ";
        
        return ex switch
        {
            HttpRequestException httpEx => httpEx.StatusCode switch
            {
                System.Net.HttpStatusCode.NotFound => $"{prefix}The workout template was not found.",
                System.Net.HttpStatusCode.Unauthorized => $"{prefix}You are not authorized to perform this action.",
                System.Net.HttpStatusCode.Forbidden => $"{prefix}You do not have permission to perform this action.",
                System.Net.HttpStatusCode.Conflict => $"{prefix}The operation conflicts with the current state.",
                System.Net.HttpStatusCode.ServiceUnavailable => $"{prefix}The service is temporarily unavailable. Please try again later.",
                _ => $"{prefix}A network error occurred. Please check your connection and try again."
            },
            TaskCanceledException => $"{prefix}The operation timed out. Please try again.",
            _ => $"{prefix}An unexpected error occurred. Please try again."
        };
    }
}