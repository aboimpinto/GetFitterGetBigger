@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Services.Stores
@inject IWorkoutTemplateService WorkoutTemplateService
@inject IWorkoutReferenceDataStore ReferenceDataStore
@inject NavigationManager NavigationManager

<div class="workout-template-create-form" data-testid="workout-template-create-form">
    <h3>Create New Workout Template</h3>
    
    @if (IsLoading)
    {
        <div class="text-center p-4" data-testid="loading-indicator">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert" data-testid="error-message">
                    @ErrorMessage
                </div>
            }
            
            <div class="mb-3">
                <label for="name" class="form-label">Name *</label>
                <InputText id="name" 
                          class="form-control" 
                          @bind-Value="Model.Name" 
                          data-testid="name-input"
                          placeholder="Enter template name" />
                <ValidationMessage For="@(() => Model.Name)" />
            </div>
            
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputTextArea id="description" 
                              class="form-control" 
                              @bind-Value="Model.Description" 
                              data-testid="description-input"
                              placeholder="Enter template description"
                              rows="3" />
                <ValidationMessage For="@(() => Model.Description)" />
            </div>
            
            <div class="mb-3">
                <label for="category" class="form-label">Category *</label>
                <InputSelect id="category" 
                            class="form-select" 
                            @bind-Value="Model.CategoryId"
                            data-testid="category-select">
                    <option value="">Select a category</option>
                    @foreach (var category in ReferenceDataStore.WorkoutCategories)
                    {
                        <option value="@category.Id">@category.Value</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.CategoryId)" />
            </div>
            
            <div class="mb-3">
                <label for="difficulty" class="form-label">Difficulty *</label>
                <InputSelect id="difficulty" 
                            class="form-select" 
                            @bind-Value="Model.DifficultyId"
                            data-testid="difficulty-select">
                    <option value="">Select a difficulty</option>
                    @foreach (var difficulty in ReferenceDataStore.DifficultyLevels)
                    {
                        <option value="@difficulty.Id">@difficulty.Value</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Model.DifficultyId)" />
            </div>
            
            <div class="mb-3">
                <label for="duration" class="form-label">Estimated Duration (minutes) *</label>
                <InputNumber id="duration" 
                            class="form-control" 
                            @bind-Value="Model.EstimatedDurationMinutes"
                            data-testid="duration-input"
                            placeholder="5-300" />
                <ValidationMessage For="@(() => Model.EstimatedDurationMinutes)" />
            </div>
            
            <div class="mb-3">
                <div class="form-check">
                    <InputCheckbox id="isPublic" 
                                  class="form-check-input" 
                                  @bind-Value="Model.IsPublic"
                                  data-testid="public-checkbox" />
                    <label class="form-check-label" for="isPublic">
                        Make this template public
                    </label>
                </div>
            </div>
            
            <div class="mb-3">
                <label for="tags" class="form-label">Tags</label>
                <InputText id="tags" 
                          class="form-control" 
                          @bind-Value="TagsInput"
                          @onblur="ProcessTags"
                          data-testid="tags-input"
                          placeholder="Enter tags separated by commas" />
                <small class="form-text text-muted">Separate tags with commas</small>
                @if (Model.Tags.Any())
                {
                    <div class="mt-2" data-testid="tags-display">
                        @foreach (var tag in Model.Tags)
                        {
                            <span class="badge bg-secondary me-1">@tag</span>
                        }
                    </div>
                }
            </div>
            
            <div class="mb-3">
                <p class="text-info">
                    <i class="bi bi-info-circle"></i>
                    New templates will be created in <strong>Draft</strong> state.
                </p>
            </div>
            
            <div class="d-flex justify-content-end gap-2">
                <button type="button" 
                        class="btn btn-secondary" 
                        @onclick="HandleCancel"
                        data-testid="cancel-button"
                        disabled="@IsSubmitting">
                    Cancel
                </button>
                <button type="submit" 
                        class="btn btn-primary" 
                        data-testid="submit-button"
                        disabled="@IsSubmitting">
                    @if (IsSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    Create Template
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public EventCallback<WorkoutTemplateDto> OnTemplateCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private CreateWorkoutTemplateDto Model = new();
    private string TagsInput = string.Empty;
    private bool IsLoading = true;
    private bool IsSubmitting = false;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadReferenceData();
    }

    private async Task LoadReferenceData()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            // Ensure reference data is loaded
            if (!ReferenceDataStore.IsLoaded)
            {
                await ReferenceDataStore.LoadReferenceDataAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to load reference data. Please try again.";
            Console.Error.WriteLine($"Error loading reference data: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ProcessTags()
    {
        if (!string.IsNullOrWhiteSpace(TagsInput))
        {
            Model.Tags = TagsInput
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(t => t.Trim())
                .Where(t => !string.IsNullOrWhiteSpace(t))
                .Distinct()
                .ToList();
        }
        else
        {
            Model.Tags.Clear();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            IsSubmitting = true;
            ErrorMessage = null;

            // Process tags one more time to ensure they're up to date
            ProcessTags();

            var result = await WorkoutTemplateService.CreateWorkoutTemplateAsync(Model);
            
            if (!result.IsSuccess)
            {
                // Handle validation errors
                ErrorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to create workout template";
                return;
            }
            
            var createdTemplate = result.Data!;
            
            if (OnTemplateCreated.HasDelegate)
            {
                await OnTemplateCreated.InvokeAsync(createdTemplate);
            }
            else
            {
                // Navigate to the template list if no callback is provided
                NavigationManager.NavigateTo("/workout-templates");
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = "Network error occurred. Please check your connection and try again.";
            Console.Error.WriteLine($"HTTP error creating template: {ex.Message}");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to create workout template. Please try again.";
            Console.Error.WriteLine($"Error creating template: {ex.Message}");
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/workout-templates");
        }
    }
}