@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using System.ComponentModel.DataAnnotations

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert" data-testid="error-message">
            @ErrorMessage
        </div>
    }
    
    <div class="mb-3">
        <label for="name" class="form-label">Name *</label>
        <InputText id="name" 
                  class="form-control" 
                  @bind-Value="Model.Name"
                  @bind-Value:after="@(async () => { await ValidateNameAsync(Model.Name); MarkAsDirty(); })"
                  data-testid="name-input"
                  placeholder="Enter template name"
                  disabled="@IsFieldDisabled(nameof(Model.Name))" />
        <ValidationMessage For="@(() => Model.Name)" />
        @if (ShowNameExistsWarning)
        {
            <div class="invalid-feedback d-block" data-testid="name-exists-warning">
                A template with this name already exists
            </div>
        }
    </div>
    
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" 
                      class="form-control" 
                      @bind-Value="Model.Description"
                      @bind-Value:after="@MarkAsDirty" 
                      data-testid="description-input"
                      placeholder="Enter template description"
                      rows="3"
                      disabled="@IsFieldDisabled(nameof(Model.Description))" />
        <ValidationMessage For="@(() => Model.Description)" />
    </div>
    
    <div class="mb-3">
        <label for="category" class="form-label">Category *</label>
        <InputSelect id="category" 
                    class="form-select" 
                    @bind-Value="Model.CategoryId"
                    @bind-Value:after="@MarkAsDirty"
                    data-testid="category-select"
                    disabled="@(IsLoading || IsFieldDisabled(nameof(Model.CategoryId)))">
            <option value="">Select a category</option>
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Value</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.CategoryId)" />
    </div>
    
    <div class="mb-3">
        <label for="difficulty" class="form-label">Difficulty *</label>
        <InputSelect id="difficulty" 
                    class="form-select" 
                    @bind-Value="Model.DifficultyId"
                    @bind-Value:after="@MarkAsDirty"
                    data-testid="difficulty-select"
                    disabled="@(IsLoading || IsFieldDisabled(nameof(Model.DifficultyId)))">
            <option value="">Select a difficulty</option>
            @foreach (var difficulty in Difficulties)
            {
                <option value="@difficulty.Id">@difficulty.Value</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.DifficultyId)" />
    </div>
    
    <div class="mb-3">
        <label for="objective" class="form-label">Objective</label>
        <InputSelect id="objective" 
                    class="form-select" 
                    @bind-Value="Model.ObjectiveId"
                    @bind-Value:after="@MarkAsDirty"
                    data-testid="objective-select"
                    disabled="@(IsLoading || IsFieldDisabled(nameof(Model.ObjectiveId)))">
            <option value="">Select an objective (optional)</option>
            @foreach (var objective in Objectives)
            {
                <option value="@objective.Id">@objective.Value</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.ObjectiveId)" />
    </div>
    
    <div class="mb-3">
        <label for="duration" class="form-label">Estimated Duration (minutes) *</label>
        <InputNumber id="duration" 
                    class="form-control" 
                    @bind-Value="Model.EstimatedDurationMinutes"
                    @bind-Value:after="@MarkAsDirty"
                    data-testid="duration-input"
                    placeholder="5-300"
                    disabled="@IsFieldDisabled(nameof(Model.EstimatedDurationMinutes))" />
        <ValidationMessage For="@(() => Model.EstimatedDurationMinutes)" />
    </div>
    
    <div class="mb-3">
        <div class="form-check">
            <InputCheckbox id="isPublic" 
                          class="form-check-input" 
                          @bind-Value="Model.IsPublic"
                          @bind-Value:after="@MarkAsDirty"
                          data-testid="public-checkbox"
                          disabled="@IsFieldDisabled(nameof(Model.IsPublic))" />
            <label class="form-check-label" for="isPublic">
                Make this template public
            </label>
        </div>
    </div>
    
    <div class="mb-3">
        <label for="tags" class="form-label">Tags</label>
        <InputText id="tags" 
                  class="form-control" 
                  @bind-Value="TagsInput"
                  @bind-Value:after="@ProcessTags"
                  data-testid="tags-input"
                  placeholder="Enter tags separated by commas"
                  disabled="@IsFieldDisabled(nameof(Model.Tags))" />
        <small class="form-text text-muted">Separate tags with commas</small>
        @if (Model.Tags.Any())
        {
            <div class="mt-2" data-testid="tags-display">
                @foreach (var tag in Model.Tags)
                {
                    <span class="badge bg-secondary me-1">@tag</span>
                }
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(WorkoutStateInfo))
    {
        <div class="mb-3">
            <p class="text-info" data-testid="state-info">
                <i class="bi bi-info-circle"></i>
                @WorkoutStateInfo
            </p>
        </div>
    }
    
    @if (ShowAutoSaveIndicator)
    {
        <div class="mb-3">
            <div class="d-flex align-items-center text-muted" data-testid="autosave-indicator">
                @if (IsAutoSaving)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Saving...</span>
                }
                else if (LastAutoSaved.HasValue)
                {
                    <i class="bi bi-check-circle text-success me-2"></i>
                    <span>Last saved: @GetLastSavedTimeAgo()</span>
                }
            </div>
        </div>
    }
    
</EditForm>

@* Floating action buttons - always visible *@
@if (!IsLoading)
{
    @* Cancel button - responsive positioning *@
    <div class="fixed bottom-8 z-50 cancelPositionStyle">
        <button type="button" @onclick="HandleCancel"
                class="flex flex-col items-center group"
                data-testid="floating-cancel-button"
                disabled="@IsSubmitting">
            <div class="w-14 h-14 @(IsSubmitting ? "bg-gray-400 cursor-not-allowed" : "bg-gray-600 hover:bg-gray-700") rounded-full flex items-center justify-center shadow-lg transition-colors">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </div>
            <span class="text-xs text-gray-600 mt-1 font-medium">Cancel</span>
        </button>
    </div>

    @* Save button - responsive positioning *@
    <div class="fixed bottom-8 right-4 z-50 xl:right-[calc(50%-41rem)]">
        <button type="button" @onclick="HandleSubmitFromFloating" 
                disabled="@(IsSubmitting || !IsFormValid())"
                class="flex flex-col items-center group"
                data-testid="floating-save-button">
            <div class="w-14 h-14 @(IsSubmitting ? "bg-blue-400" : "bg-blue-600 hover:bg-blue-700") rounded-full flex items-center justify-center shadow-lg transition-colors @(IsSubmitting || !IsFormValid() ? "cursor-not-allowed" : "")">
                @if (IsSubmitting)
                {
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                }
                else
                {
                    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17 3H5C3.89 3 3 3.9 3 5V19C3 20.1 3.89 21 5 21H19C20.1 21 21 20.1 21 19V7L17 3M19 19H5V5H16.17L19 7.83V19M12 12C10.34 12 9 15.34 9 15S10.34 18 12 18 15 16.66 15 15 13.66 12 12 12M6 6H15V10H6V6Z"/>
                    </svg>
                }
            </div>
            <span class="text-xs text-gray-600 mt-1 font-medium">@SubmitButtonText</span>
        </button>
    </div>
}

<style>
    @* Large screen positioning *@
    @@media (min-width: 1280px) {
        .cancelPositionStyle {
            left: calc(50% - 25rem) !important;
        }
    }

    @* Medium screens *@
    @@media (max-width: 1279px) {
        .cancelPositionStyle {
            left: 1rem;
        }
    }
}</style>
