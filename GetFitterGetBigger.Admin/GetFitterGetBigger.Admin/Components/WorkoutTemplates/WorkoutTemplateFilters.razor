@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@inject IWorkoutTemplateStateService StateService

<div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200" data-testid="workout-template-filters">
    <div class="space-y-4">
        @* Search Bar *@
        <div data-testid="search-section">
            <ReferenceDataSearchBar
                Value="@searchTerm"
                ValueChanged="@((value) => searchTerm = value)"
                Label="Search Templates"
                Placeholder="Search by name..."
                DebounceDelay="300"
                ShowResultCount="@ShowResultCount"
                ResultCount="@ResultCount" />
        </div>

        @* Filters Grid *@
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            @* Category Filter *@
            <div data-testid="category-filter">
                <label class="block text-sm font-medium text-gray-700 mb-1">
                    Category
                </label>
                <select @bind="selectedCategory"
                        data-testid="category-select"
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <option value="">All Categories</option>
                    @foreach (var category in StateService.WorkoutCategories)
                    {
                        <option value="@category.Id">@category.Value</option>
                    }
                </select>
            </div>

            @* Difficulty Filter *@
            <div data-testid="difficulty-filter">
                <label class="block text-sm font-medium text-gray-700 mb-1">
                    Difficulty
                </label>
                <select @bind="selectedDifficulty"
                        data-testid="difficulty-select"
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <option value="">All Difficulties</option>
                    @foreach (var difficulty in StateService.DifficultyLevels)
                    {
                        <option value="@difficulty.Id">@difficulty.Value</option>
                    }
                </select>
            </div>

            @* State Filter *@
            <div data-testid="state-filter">
                <label class="block text-sm font-medium text-gray-700 mb-1">
                    State
                </label>
                <select @bind="selectedState"
                        data-testid="state-select"
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <option value="">All States</option>
                    @foreach (var state in StateService.WorkoutStates)
                    {
                        <option value="@state.Id">@state.Value</option>
                    }
                </select>
            </div>

            @* Public Filter *@
            <div data-testid="public-filter">
                <label class="block text-sm font-medium text-gray-700 mb-1">
                    Visibility
                </label>
                <select @bind="selectedPublic"
                        data-testid="public-select"
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <option value="">All Templates</option>
                    <option value="true">Public Only</option>
                    <option value="false">Private Only</option>
                </select>
            </div>
        </div>


        @* Filter Actions *@
        <div class="flex items-center justify-between pt-2">
            <div data-testid="active-filter-count">
                @if (GetActiveFilterCount() > 0)
                {
                    <span class="text-sm text-gray-600">
                        @GetActiveFilterCount() filter@(GetActiveFilterCount() == 1 ? "" : "s") active
                    </span>
                }
            </div>
            <div class="flex items-center gap-2">
                <button type="button"
                        @onclick="ClearAllFilters"
                        data-testid="clear-filters-button"
                        class="px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
                        disabled="@(GetActiveFilterCount() == 0)">
                    Clear All
                </button>
                <button type="button"
                        @onclick="ApplyFilters"
                        data-testid="apply-filters-button"
                        class="px-4 py-1.5 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Apply Filters
                </button>
            </div>
        </div>

        @* Filter Summary Pills *@
        @if (ShowFilterSummary && GetActiveFilterCount() > 0)
        {
            <div class="flex flex-wrap gap-2 pt-2" data-testid="filter-summary">
                @if (!string.IsNullOrWhiteSpace(searchTerm))
                {
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                          data-testid="filter-pill">
                        Search: @searchTerm
                        <button type="button"
                                @onclick="async () => { searchTerm = string.Empty; await ApplyFilters(); }"
                                class="ml-1 inline-flex items-center p-0.5 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none"
                                data-testid="remove-filter-button"
                                aria-label="Remove Search: @searchTerm filter">
                            <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </span>
                }
                @if (!string.IsNullOrEmpty(selectedCategory))
                {
                    var category = StateService.WorkoutCategories.FirstOrDefault(c => c.Id == selectedCategory);
                    if (category != null)
                    {
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                              data-testid="filter-pill">
                            Category: @category.Value
                            <button type="button"
                                    @onclick="async () => { selectedCategory = string.Empty; await ApplyFilters(); }"
                                    class="ml-1 inline-flex items-center p-0.5 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none"
                                    data-testid="remove-filter-button"
                                    aria-label="Remove Category: @category.Value filter">
                                <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </span>
                    }
                }
                @if (!string.IsNullOrEmpty(selectedDifficulty))
                {
                    var difficulty = StateService.DifficultyLevels.FirstOrDefault(d => d.Id == selectedDifficulty);
                    if (difficulty != null)
                    {
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                              data-testid="filter-pill">
                            Difficulty: @difficulty.Value
                            <button type="button"
                                    @onclick="async () => { selectedDifficulty = string.Empty; await ApplyFilters(); }"
                                    class="ml-1 inline-flex items-center p-0.5 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none"
                                    data-testid="remove-filter-button"
                                    aria-label="Remove Difficulty: @difficulty.Value filter">
                                <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </span>
                    }
                }
                @if (!string.IsNullOrEmpty(selectedState))
                {
                    var state = StateService.WorkoutStates.FirstOrDefault(s => s.Id == selectedState);
                    if (state != null)
                    {
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                              data-testid="filter-pill">
                            State: @state.Value
                            <button type="button"
                                    @onclick="async () => { selectedState = string.Empty; await ApplyFilters(); }"
                                    class="ml-1 inline-flex items-center p-0.5 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none"
                                    data-testid="remove-filter-button"
                                    aria-label="Remove State: @state.Value filter">
                                <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </span>
                    }
                }
                @if (!string.IsNullOrEmpty(selectedPublic))
                {
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                          data-testid="filter-pill">
                        Visibility: @(selectedPublic == "true" ? "Public" : "Private")
                        <button type="button"
                                @onclick="async () => { selectedPublic = string.Empty; await ApplyFilters(); }"
                                class="ml-1 inline-flex items-center p-0.5 rounded-full text-blue-400 hover:bg-blue-200 hover:text-blue-600 focus:outline-none"
                                data-testid="remove-filter-button"
                                aria-label="Remove Visibility: @(selectedPublic == "true" ? "Public" : "Private") filter">
                            <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </span>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public WorkoutTemplateFilterDto Filter { get; set; } = new();
    [Parameter] public EventCallback<WorkoutTemplateFilterDto> OnFilterChanged { get; set; }
    [Parameter] public bool ShowResultCount { get; set; } = true;
    [Parameter] public int? ResultCount { get; set; }
    [Parameter] public bool ShowFilterSummary { get; set; } = true;

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedDifficulty = string.Empty;
    private string selectedState = string.Empty;
    private string selectedPublic = string.Empty;

    protected override void OnParametersSet()
    {
        // Sync local state with the Filter parameter
        if (Filter != null)
        {
            searchTerm = Filter.NamePattern ?? string.Empty;
            selectedCategory = Filter.CategoryId ?? string.Empty;
            selectedDifficulty = Filter.DifficultyId ?? string.Empty;
            selectedState = Filter.StateId ?? string.Empty;
            selectedPublic = Filter.IsPublic?.ToString().ToLower() ?? string.Empty;
        }
    }

    internal int GetActiveFilterCount()
    {
        var count = 0;
        if (!string.IsNullOrWhiteSpace(searchTerm)) count++;
        if (!string.IsNullOrEmpty(selectedCategory)) count++;
        if (!string.IsNullOrEmpty(selectedDifficulty)) count++;
        if (!string.IsNullOrEmpty(selectedState)) count++;
        if (!string.IsNullOrEmpty(selectedPublic)) count++;
        return count;
    }

    internal async Task ApplyFilters()
    {
        var newFilter = new WorkoutTemplateFilterDto
        {
            NamePattern = string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm,
            CategoryId = string.IsNullOrEmpty(selectedCategory) ? null : selectedCategory,
            DifficultyId = string.IsNullOrEmpty(selectedDifficulty) ? null : selectedDifficulty,
            StateId = string.IsNullOrEmpty(selectedState) ? null : selectedState,
            IsPublic = string.IsNullOrEmpty(selectedPublic) ? null : bool.Parse(selectedPublic),
            Page = 1, // Reset to first page when filters change
            PageSize = Filter.PageSize
        };

        if (OnFilterChanged.HasDelegate)
        {
            await OnFilterChanged.InvokeAsync(newFilter);
        }
    }

    internal void ClearAllFilters()
    {
        searchTerm = string.Empty;
        selectedCategory = string.Empty;
        selectedDifficulty = string.Empty;
        selectedState = string.Empty;
        selectedPublic = string.Empty;
        
        // Don't apply immediately in case user wants to set multiple filters
    }

}