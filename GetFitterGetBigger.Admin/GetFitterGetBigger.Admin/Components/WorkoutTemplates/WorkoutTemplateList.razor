@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Builders
@inject IWorkoutTemplateStateService StateService
@implements IDisposable

<div class="workout-template-list" data-testid="workout-template-list">
    @* Error State *@
    @if (!string.IsNullOrWhiteSpace(StateService.ErrorMessage))
    {
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6" data-testid="error-state">
            <div class="flex">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">Error loading workout templates</h3>
                    <div class="mt-2 text-sm text-red-700">
                        <p>@StateService.ErrorMessage</p>
                    </div>
                    <div class="mt-4">
                        <button @onclick="HandleRetry" 
                                data-testid="retry-button"
                                class="text-sm font-medium text-red-600 hover:text-red-500">
                            Try again
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Sorting Controls *@
    @if (!StateService.IsLoading && StateService.CurrentPage?.Items?.Any() == true)
    {
        <div class="mb-6 flex flex-wrap items-center gap-4" data-testid="sorting-controls">
            <label class="text-sm font-medium text-gray-700">Sort by:</label>
            <select @bind="sortBy" 
                    @bind:after="HandleSortChange"
                    data-testid="sort-select"
                    class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="name">Name</option>
                <option value="created">Created Date</option>
                <option value="updated">Updated Date</option>
                @* Popularity sorting would be added when we have usage statistics *@
            </select>
            
            <button @onclick="ToggleSortDirection" 
                    data-testid="sort-direction-button"
                    class="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
                    title="@(isAscending ? "Sort ascending" : "Sort descending")">
                @if (isAscending)
                {
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12" />
                    </svg>
                }
                else
                {
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4" />
                    </svg>
                }
            </button>
        </div>
    }

    @* Loading State *@
    @if (StateService.IsLoading)
    {
        <WorkoutTemplateListSkeleton />
    }
    @* Content *@
    else if (StateService.CurrentPage?.Items?.Any() == true)
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" data-testid="template-grid">
            @foreach (var template in GetSortedTemplates())
            {
                <WorkoutTemplateCard 
                    Template="@template"
                    OnClick="HandleTemplateClick"
                    OnEdit="HandleTemplateEdit"
                    OnDuplicate="HandleTemplateDuplicate"
                    OnDelete="HandleTemplateDelete"
                    OnStateChange="HandleTemplateStateChange" />
            }
        </div>

        @* Pagination *@
        @if (StateService.CurrentPage.TotalPages > 1)
        {
            <div class="mt-8 flex items-center justify-between" data-testid="pagination">
                <div class="text-sm text-gray-700">
                    Showing @((StateService.CurrentFilter.Page - 1) * StateService.CurrentFilter.PageSize + 1) to 
                    @(Math.Min(StateService.CurrentFilter.Page * StateService.CurrentFilter.PageSize, StateService.CurrentPage.TotalCount)) 
                    of @StateService.CurrentPage.TotalCount workout templates
                </div>
                <div class="flex space-x-2">
                    <button @onclick="GoToPreviousPage" 
                            disabled="@(StateService.CurrentFilter.Page <= 1)"
                            data-testid="prev-page-button"
                            class="px-3 py-1 text-sm border rounded-md @(StateService.CurrentFilter.Page <= 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50")">
                        Previous
                    </button>
                    
                    @for (int i = Math.Max(1, StateService.CurrentFilter.Page - 2); i <= Math.Min(StateService.CurrentPage.TotalPages, StateService.CurrentFilter.Page + 2); i++)
                    {
                        var pageNumber = i;
                        <button @onclick="() => GoToPage(pageNumber)"
                                data-testid="@($"page-{pageNumber}-button")"
                                class="px-3 py-1 text-sm border rounded-md @(pageNumber == StateService.CurrentFilter.Page ? "bg-blue-600 text-white" : "bg-white text-gray-700 hover:bg-gray-50")">
                            @pageNumber
                        </button>
                    }
                    
                    <button @onclick="GoToNextPage" 
                            disabled="@(StateService.CurrentFilter.Page >= StateService.CurrentPage.TotalPages)"
                            data-testid="next-page-button"
                            class="px-3 py-1 text-sm border rounded-md @(StateService.CurrentFilter.Page >= StateService.CurrentPage.TotalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50")">
                        Next
                    </button>
                </div>
            </div>
        }
    }
    @* Empty State *@
    else if (!StateService.IsLoading && string.IsNullOrWhiteSpace(StateService.ErrorMessage))
    {
        <div class="text-center py-12" data-testid="empty-state">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No workout templates found</h3>
            <p class="mt-1 text-sm text-gray-500">
                @if (HasActiveFilters())
                {
                    <text>Try adjusting your filters or create a new workout template.</text>
                }
                else
                {
                    <text>Get started by creating your first workout template.</text>
                }
            </p>
            @if (OnCreateNew.HasDelegate)
            {
                <div class="mt-6">
                    <button @onclick="HandleCreateNew" 
                            data-testid="create-new-button"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="mr-2 -ml-1 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        Create Workout Template
                    </button>
                </div>
            }
        </div>
    }
</div>