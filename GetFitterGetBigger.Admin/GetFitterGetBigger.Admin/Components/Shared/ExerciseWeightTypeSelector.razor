@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@inject IExerciseWeightTypeStateService WeightTypeStateService
@implements IDisposable

<div class="space-y-2">
    <label class="block text-sm font-medium text-gray-700">
        Weight Type
        @if (Required && !Disabled)
        {
            <span class="text-red-500">*</span>
        }
        @if (Disabled)
        {
            <span class="text-sm text-gray-500 ml-1">(disabled)</span>
        }
    </label>

    @if (WeightTypeStateService.IsLoading)
    {
        <div class="flex items-center justify-center h-10 border border-gray-300 rounded-md bg-gray-50">
            <div class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-gray-900"></div>
            <span class="ml-2 text-sm text-gray-600">Loading weight types...</span>
        </div>
    }
    else if (WeightTypeStateService.ErrorMessage != null)
    {
        <div class="bg-red-50 border border-red-200 text-red-700 px-3 py-2 rounded-md text-sm">
            <p>@WeightTypeStateService.ErrorMessage</p>
            <button type="button" @onclick="RetryLoad" class="text-red-800 underline mt-1">Retry</button>
        </div>
    }
    else
    {
        <select @bind="Value"
                @bind:after="HandleValueChanged"
                disabled="@Disabled"
                data-testid="exercise-weight-type-select"
                class="w-full px-3 py-2 border @(ShowValidationError ? "border-red-300" : "border-gray-300") rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 @(Disabled ? "bg-gray-100 cursor-not-allowed" : "")"
                title="@GetSelectedWeightTypeDescription()">
            @if (!Required || string.IsNullOrEmpty(Value))
            {
                <option value="">Select weight type</option>
            }
            @foreach (var weightType in WeightTypeStateService.WeightTypes)
            {
                <option value="@weightType.Id" title="@weightType.Description">
                    @weightType.Name
                </option>
            }
        </select>

        @if (!string.IsNullOrEmpty(Value))
        {
            var selectedType = WeightTypeStateService.WeightTypes.FirstOrDefault(wt => wt.Id.ToString() == Value);
            if (selectedType != null)
            {
                <div class="mt-2 p-3 bg-gray-50 border border-gray-200 rounded-md">
                    <div class="flex items-start space-x-2">
                        @{
                            var (icon, colorClass) = GetWeightTypeIconAndColor(selectedType.Code);
                        }
                        <span class="@colorClass text-lg mt-0.5">@icon</span>
                        <div class="flex-1">
                            <p class="text-sm font-medium text-gray-700">@selectedType.Name</p>
                            <p class="text-xs text-gray-600 mt-1">@selectedType.Description</p>
                            <p class="text-xs text-blue-600 mt-2">
                                <span class="font-medium">Validation:</span> @WeightTypeStateService.GetValidationMessage(selectedType.Code)
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    }

    @if (!string.IsNullOrEmpty(ValidationMessage))
    {
        <p class="mt-1 text-sm text-red-600" data-testid="weight-type-validation-error">@ValidationMessage</p>
    }
</div>

@code {
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public bool Required { get; set; } = true;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string ValidationMessage { get; set; } = string.Empty;
    [Parameter] public bool ShowValidationError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WeightTypeStateService.OnChange += StateHasChanged;
        
        if (!WeightTypeStateService.WeightTypes.Any())
        {
            await WeightTypeStateService.LoadWeightTypesAsync();
        }
    }

    private async Task HandleValueChanged()
    {
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task RetryLoad()
    {
        WeightTypeStateService.ClearError();
        await WeightTypeStateService.LoadWeightTypesAsync();
    }

    private string GetSelectedWeightTypeDescription()
    {
        if (string.IsNullOrEmpty(Value))
            return "Select a weight type for this exercise";

        var selectedType = WeightTypeStateService.WeightTypes.FirstOrDefault(wt => wt.Id.ToString() == Value);
        return selectedType?.Description ?? "Select a weight type for this exercise";
    }

    private (string icon, string colorClass) GetWeightTypeIconAndColor(string code)
    {
        return code switch
        {
            "BODYWEIGHT_ONLY" => ("üí™", "text-blue-600"),
            "NO_WEIGHT" => ("üö´", "text-gray-600"),
            "BODYWEIGHT_OPTIONAL" => ("‚öñÔ∏è", "text-green-600"),
            "WEIGHT_REQUIRED" => ("üèãÔ∏è", "text-orange-600"),
            "MACHINE_WEIGHT" => ("üéØ", "text-purple-600"),
            _ => ("‚ùì", "text-gray-600")
        };
    }

    public void Dispose()
    {
        WeightTypeStateService.OnChange -= StateHasChanged;
    }
}