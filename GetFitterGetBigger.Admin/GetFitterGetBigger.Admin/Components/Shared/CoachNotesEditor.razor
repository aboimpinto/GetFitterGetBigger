@using GetFitterGetBigger.Admin.Models.Dtos

<div class="space-y-4">
    <div class="flex justify-between items-center">
        <h3 class="text-lg font-medium text-gray-900">Coach Notes <span class="text-sm font-normal text-gray-500">(Optional)</span></h3>
        <button type="button" @onclick="AddNote" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            <span class="mr-1">+</span>
            Add Note
        </button>
    </div>

    @if (Notes.Any())
    {
        <div class="space-y-2">
            @for (var i = 0; i < Notes.Count; i++)
            {
                var index = i; // Capture for closure
                var note = Notes[index];
                
                <div class="border rounded-lg p-4 bg-gray-50">
                    <div class="flex items-start space-x-3">
                        <div class="flex flex-col space-y-1">
                            <button type="button" 
                                    @onclick="() => MoveNoteUp(index)"
                                    disabled="@(index == 0)"
                                    class="p-2 rounded text-gray-400 hover:text-gray-600 hover:bg-gray-100 @(index == 0 ? "opacity-50 cursor-not-allowed" : "")"
                                    title="Move up">
                                ‚Üë
                            </button>
                            <button type="button" 
                                    @onclick="() => MoveNoteDown(index)"
                                    disabled="@(index == Notes.Count - 1)"
                                    class="p-2 rounded text-gray-400 hover:text-gray-600 hover:bg-gray-100 @(index == Notes.Count - 1 ? "opacity-50 cursor-not-allowed" : "")"
                                    title="Move down">
                                ‚Üì
                            </button>
                        </div>
                        
                        <div class="flex-1">
                            <div class="flex items-center justify-between mb-2">
                                <label class="text-sm font-medium text-gray-700">
                                    Step @(index + 1)
                                </label>
                                <span class="text-xs text-gray-500">
                                    @note.Text.Length / 1000 characters
                                </span>
                            </div>
                            <textarea 
                                value="@note.Text"
                                @onchange="@(e => UpdateNoteText(index, e.Value?.ToString() ?? string.Empty))"
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                rows="3"
                                maxlength="1000"
                                placeholder="Enter coaching instruction (optional)...">
                            </textarea>
                            @if (note.Text.Length > 900)
                            {
                                <p class="text-xs text-yellow-600 mt-1">
                                    @(1000 - note.Text.Length) characters remaining
                                </p>
                            }
                        </div>
                        
                        <button type="button" 
                                @onclick="() => RemoveNote(index)"
                                class="p-2 rounded text-red-500 hover:text-red-700 hover:bg-red-50 font-bold"
                                title="Remove note">
                            ‚úï
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-8 text-gray-500">
            <div class="text-6xl mb-4">üìù</div>
            <p>No coach notes added yet.</p>
            <p class="text-sm">Coach notes are optional. Click "Add Note" if you'd like to add instructions.</p>
        </div>
    }
</div>

@code {
    [Parameter] public List<CoachNoteCreateDto> Notes { get; set; } = new();
    [Parameter] public EventCallback<List<CoachNoteCreateDto>> NotesChanged { get; set; }

    private async Task AddNote()
    {
        Notes.Add(new CoachNoteCreateDto 
        { 
            Text = string.Empty,
            Order = Notes.Count
        });
        await NotifyChange();
    }

    private async Task RemoveNote(int index)
    {
        Notes.RemoveAt(index);
        ReorderNotes();
        await NotifyChange();
    }

    private async Task UpdateNoteText(int index, string text)
    {
        if (index >= 0 && index < Notes.Count)
        {
            Notes[index].Text = text.Length > 1000 ? text.Substring(0, 1000) : text;
            await NotifyChange();
        }
    }

    private async Task MoveNoteUp(int index)
    {
        if (index > 0)
        {
            var temp = Notes[index];
            Notes[index] = Notes[index - 1];
            Notes[index - 1] = temp;
            ReorderNotes();
            await NotifyChange();
        }
    }

    private async Task MoveNoteDown(int index)
    {
        if (index < Notes.Count - 1)
        {
            var temp = Notes[index];
            Notes[index] = Notes[index + 1];
            Notes[index + 1] = temp;
            ReorderNotes();
            await NotifyChange();
        }
    }

    private void ReorderNotes()
    {
        for (var i = 0; i < Notes.Count; i++)
        {
            Notes[i].Order = i;
        }
    }

    private async Task NotifyChange()
    {
        await NotesChanged.InvokeAsync(Notes);
    }
}