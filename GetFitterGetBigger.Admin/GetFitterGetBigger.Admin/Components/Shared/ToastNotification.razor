@if (IsVisible)
{
    <div class="@GetPositionClasses()" data-testid="toast-container">
        <div class="@GetContainerClasses()" 
             role="alert"
             data-testid="toast-notification"
             @onanimationend="HandleAnimationEnd">
            <div class="flex">
                @if (ShowIcon)
                {
                    <div class="flex-shrink-0">
                        @if (Type == ToastType.Success)
                        {
                            <svg class="@GetIconClasses()" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                        }
                        else if (Type == ToastType.Error)
                        {
                            <svg class="@GetIconClasses()" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        }
                        else if (Type == ToastType.Warning)
                        {
                            <svg class="@GetIconClasses()" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        }
                        else
                        {
                            <svg class="@GetIconClasses()" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                            </svg>
                        }
                    </div>
                }
                <div class="@(ShowIcon ? "ml-3" : "") flex-1">
                    @if (!string.IsNullOrWhiteSpace(Title))
                    {
                        <p class="@GetTitleClasses()">@Title</p>
                    }
                    @if (!string.IsNullOrWhiteSpace(Message))
                    {
                        <p class="@GetMessageClasses()">@Message</p>
                    }
                    @if (Actions != null)
                    {
                        <div class="mt-3">
                            @Actions
                        </div>
                    }
                </div>
                @if (ShowDismiss)
                {
                    <div class="ml-4">
                        <button @onclick="Dismiss"
                                data-testid="dismiss-button"
                                class="@GetDismissButtonClasses()">
                            <span class="sr-only">Dismiss</span>
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                            </svg>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}

@implements IDisposable

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Message { get; set; }
    [Parameter] public ToastType Type { get; set; } = ToastType.Success;
    [Parameter] public ToastPosition Position { get; set; } = ToastPosition.TopRight;
    [Parameter] public int Duration { get; set; } = 5000; // milliseconds
    [Parameter] public bool ShowIcon { get; set; } = true;
    [Parameter] public bool ShowDismiss { get; set; } = true;
    [Parameter] public RenderFragment? Actions { get; set; }
    [Parameter] public EventCallback OnDismissed { get; set; }
    
    private bool IsVisible { get; set; }
    private bool IsLeaving { get; set; }
    private Timer? dismissTimer;
    
    public enum ToastType
    {
        Success,
        Error,
        Warning,
        Info
    }
    
    public enum ToastPosition
    {
        TopLeft,
        TopCenter,
        TopRight,
        BottomLeft,
        BottomCenter,
        BottomRight
    }
    
    public void Show()
    {
        IsVisible = true;
        IsLeaving = false;
        StateHasChanged();
        
        if (Duration > 0)
        {
            dismissTimer?.Dispose();
            dismissTimer = new Timer(_ => InvokeAsync(Dismiss), null, Duration, Timeout.Infinite);
        }
    }
    
    public void Dismiss()
    {
        dismissTimer?.Dispose();
        IsLeaving = true;
        StateHasChanged();
    }
    
    private async Task HandleAnimationEnd()
    {
        if (IsLeaving)
        {
            IsVisible = false;
            IsLeaving = false;
            await OnDismissed.InvokeAsync();
            StateHasChanged();
        }
    }
    
    private string GetPositionClasses()
    {
        var baseClasses = "fixed z-50 pointer-events-none";
        
        return Position switch
        {
            ToastPosition.TopLeft => $"{baseClasses} top-4 left-4",
            ToastPosition.TopCenter => $"{baseClasses} top-4 left-1/2 transform -translate-x-1/2",
            ToastPosition.TopRight => $"{baseClasses} top-4 right-4",
            ToastPosition.BottomLeft => $"{baseClasses} bottom-4 left-4",
            ToastPosition.BottomCenter => $"{baseClasses} bottom-4 left-1/2 transform -translate-x-1/2",
            ToastPosition.BottomRight => $"{baseClasses} bottom-4 right-4",
            _ => $"{baseClasses} top-4 right-4"
        };
    }
    
    private string GetContainerClasses()
    {
        var baseClasses = "pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg shadow-lg";
        
        var animationClasses = IsLeaving
            ? "animate-slide-out-right"
            : "animate-slide-in-right";
        
        var bgClasses = Type switch
        {
            ToastType.Error => "bg-red-50 border border-red-200",
            ToastType.Warning => "bg-yellow-50 border border-yellow-200",
            ToastType.Info => "bg-blue-50 border border-blue-200",
            _ => "bg-green-50 border border-green-200"
        };
        
        return $"{baseClasses} {bgClasses} {animationClasses} p-4";
    }
    
    private string GetIconClasses()
    {
        var colorClasses = Type switch
        {
            ToastType.Error => "text-red-400",
            ToastType.Warning => "text-yellow-400",
            ToastType.Info => "text-blue-400",
            _ => "text-green-400"
        };
        
        return $"h-5 w-5 {colorClasses}";
    }
    
    private string GetTitleClasses()
    {
        var colorClasses = Type switch
        {
            ToastType.Error => "text-red-900",
            ToastType.Warning => "text-yellow-900",
            ToastType.Info => "text-blue-900",
            _ => "text-green-900"
        };
        
        return $"text-sm font-medium {colorClasses}";
    }
    
    private string GetMessageClasses()
    {
        var colorClasses = Type switch
        {
            ToastType.Error => "text-red-700",
            ToastType.Warning => "text-yellow-700",
            ToastType.Info => "text-blue-700",
            _ => "text-green-700"
        };
        
        var marginClasses = string.IsNullOrWhiteSpace(Title) ? "" : "mt-1";
        
        return $"text-sm {colorClasses} {marginClasses}";
    }
    
    private string GetDismissButtonClasses()
    {
        var colorClasses = Type switch
        {
            ToastType.Error => "text-red-400 hover:text-red-500",
            ToastType.Warning => "text-yellow-400 hover:text-yellow-500",
            ToastType.Info => "text-blue-400 hover:text-blue-500",
            _ => "text-green-400 hover:text-green-500"
        };
        
        return $"inline-flex rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 {colorClasses} transition-colors duration-200";
    }
    
    public void Dispose()
    {
        dismissTimer?.Dispose();
    }
}

<style>
    @@keyframes slide-in-right {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @@keyframes slide-out-right {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    .animate-slide-in-right {
        animation: slide-in-right 0.3s ease-out;
    }
    
    .animate-slide-out-right {
        animation: slide-out-right 0.3s ease-in;
    }
</style>