@using GetFitterGetBigger.Admin.Models
@using GetFitterGetBigger.Admin.Models.Dtos

@typeparam TItem where TItem : class

<div class="space-y-3">
    <!-- Selection Controls -->
    <div class="flex gap-2">
        <select @bind="selectedItemId"
                @onkeydown="HandleKeyDown"
                disabled="@Disabled"
                class="flex-1 px-3 py-2 border @(EnableInlineCreation && !Disabled ? "border-blue-400" : "border-gray-300") rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 @(Disabled ? "bg-gray-100 cursor-not-allowed" : "")"
                title="@(EnableInlineCreation && !Disabled ? "Select or press Ctrl+N to add new " + EntityTypeName : "")">
            <option value="">@Placeholder</option>
            @foreach (var item in AvailableItems)
            {
                var itemId = GetItemId(item);
                var itemName = GetItemName(item);
                var isSelected = SelectedValues?.Contains(itemId) ?? false;
                
                if (!isSelected)
                {
                    <option value="@itemId">@itemName</option>
                }
            }
        </select>
        
        <button type="button"
                @onclick="AddSelectedItem"
                disabled="@(Disabled || string.IsNullOrEmpty(selectedItemId))"
                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
            Add
        </button>
    </div>

    <!-- Inline Creation Link -->
    @if (EnableInlineCreation && !Disabled)
    {
        <div class="text-xs">
            <button type="button" 
                    @onclick="OpenCreateModal" 
                    class="text-blue-600 hover:text-blue-800 underline">
                Can't find @EntityTypeName? Create here
            </button>
        </div>
    }

    <!-- Selected Items as Tags -->
    @if (SelectedItems.Any())
    {
        <div class="flex flex-wrap gap-2">
            @foreach (var item in SelectedItems)
            {
                @if (RenderTag != null)
                {
                    @RenderTag((item, EventCallback.Factory.Create<TItem>(this, HandleRemoveItem)))
                }
                else
                {
                    <!-- Default tag rendering -->
                    <span class="inline-flex items-center gap-1 px-2.5 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-800 border border-gray-200">
                        <span>@GetItemName(item)</span>
                        @if (!Disabled)
                        {
                            <button type="button" 
                                    @onclick="() => HandleRemoveItem(item)" 
                                    @onclick:stopPropagation="true"
                                    class="ml-1 text-gray-400 hover:text-gray-600 focus:outline-none"
                                    title="Remove @GetItemName(item)">
                                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        }
                    </span>
                }
            }
        </div>
    }
    else
    {
        <div class="text-sm text-gray-500 italic">
            No @EntityTypeName.ToLower() selected
        </div>
    }
</div>

@if (showCreateModal)
{
    <AddReferenceItemModal EntityType="@EntityType"
                          OnItemCreated="HandleItemCreated"
                          OnCancel="CloseCreateModal" />
}

@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public List<string>? SelectedValues { get; set; }
    [Parameter] public EventCallback<List<string>> SelectedValuesChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Select an option";
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool EnableInlineCreation { get; set; } = false;
    [Parameter] public ReferenceEntityType EntityType { get; set; }
    [Parameter] public Func<TItem, string> GetItemId { get; set; } = item => string.Empty;
    [Parameter] public Func<TItem, string> GetItemName { get; set; } = item => string.Empty;
    [Parameter] public EventCallback OnItemsRefreshed { get; set; }
    [Parameter] public EventCallback<string> OnCreationError { get; set; }
    [Parameter] public RenderFragment<(TItem item, EventCallback<TItem> onRemove)>? RenderTag { get; set; }

    private string selectedItemId = string.Empty;
    private bool showCreateModal = false;
    private List<TItem> optimisticallyAddedItems = new();
    private bool isRefreshing = false;

    private IEnumerable<TItem> AvailableItems => 
        (Items ?? Enumerable.Empty<TItem>()).Concat(optimisticallyAddedItems);

    private IEnumerable<TItem> SelectedItems =>
        AvailableItems.Where(item => SelectedValues?.Contains(GetItemId(item)) ?? false);

    private string EntityTypeName => EntityType switch
    {
        ReferenceEntityType.Equipment => "equipment",
        ReferenceEntityType.MuscleGroup => "muscle group",
        _ => "item"
    };

    private void AddSelectedItem()
    {
        if (!string.IsNullOrEmpty(selectedItemId) && SelectedValues != null)
        {
            if (!SelectedValues.Contains(selectedItemId))
            {
                SelectedValues.Add(selectedItemId);
                SelectedValuesChanged.InvokeAsync(SelectedValues);
            }
            selectedItemId = string.Empty;
        }
    }

    private async Task HandleRemoveItem(TItem item)
    {
        if (SelectedValues != null)
        {
            var itemId = GetItemId(item);
            SelectedValues.Remove(itemId);
            await SelectedValuesChanged.InvokeAsync(SelectedValues);
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        // Handle Enter key to add selected item
        if (e.Key == "Enter" && !string.IsNullOrEmpty(selectedItemId))
        {
            AddSelectedItem();
        }
        // Handle Ctrl+N for inline creation
        else if (EnableInlineCreation && !Disabled && !showCreateModal && e.Key == "n" && (e.CtrlKey || e.MetaKey))
        {
            OpenCreateModal();
        }
    }

    private void OpenCreateModal()
    {
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private async Task HandleItemCreated(object createdItem)
    {
        showCreateModal = false;

        // Add the item optimistically for immediate display
        if (createdItem != null && createdItem is TItem typedItem)
        {
            optimisticallyAddedItems.Add(typedItem);
            
            // Auto-select the created item
            string createdItemId = GetItemId(typedItem);
            
            if (SelectedValues == null)
            {
                SelectedValues = new List<string>();
            }
            if (!SelectedValues.Contains(createdItemId))
            {
                SelectedValues.Add(createdItemId);
                await SelectedValuesChanged.InvokeAsync(SelectedValues);
            }
            
            // Force UI update to show the new item immediately
            StateHasChanged();
            
            try
            {
                isRefreshing = true;
                // Notify parent to refresh items from server
                await OnItemsRefreshed.InvokeAsync();
            }
            catch (Exception ex)
            {
                // If refresh fails, remove the optimistically added item
                optimisticallyAddedItems.Remove(typedItem);
                
                // Deselect the item
                SelectedValues.Remove(createdItemId);
                await SelectedValuesChanged.InvokeAsync(SelectedValues);
                
                // Notify about the error
                await OnCreationError.InvokeAsync($"Failed to refresh after creating {EntityTypeName}: {ex.Message}");
                
                StateHasChanged();
            }
            finally
            {
                isRefreshing = false;
                StateHasChanged();
            }
        }
    }
    
    protected override void OnParametersSet()
    {
        // When Items parameter changes (after refresh), clear optimistically added items
        if (optimisticallyAddedItems.Any() && Items != null)
        {
            var actualItemIds = Items.Select(item => GetItemId(item)).ToHashSet();
            optimisticallyAddedItems.RemoveAll(item => actualItemIds.Contains(GetItemId(item)));
        }
        
        // Reset the refreshing state if it got stuck
        if (isRefreshing)
        {
            isRefreshing = false;
        }
    }
}