@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Services
@using System.ComponentModel.DataAnnotations

@typeparam TCreateDto where TCreateDto : new()

<div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50" @onclick="HandleBackdropClick">
    <div class="bg-white rounded-lg p-6 max-w-md w-full" @onclick:stopPropagation="true">
        <h3 class="text-lg font-medium text-gray-900 mb-4">
            Add New @EntityName
        </h3>

        <EditForm Model="@model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            
            @if (EntityType == ReferenceEntityType.Equipment)
            {
                <div class="mb-4">
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                        Equipment Name <span class="text-red-500">*</span>
                    </label>
                    <InputText id="name" @bind-Value="((EquipmentFormModel)(object)model).Name" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                               placeholder="Enter equipment name"
                               autofocus />
                    <ValidationMessage For="@(() => ((EquipmentFormModel)(object)model).Name)" class="text-red-500 text-sm mt-1" />
                </div>
            }
            else if (EntityType == ReferenceEntityType.MuscleGroup)
            {
                <div class="mb-4">
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                        Muscle Group Name <span class="text-red-500">*</span>
                    </label>
                    <InputText id="name" @bind-Value="((MuscleGroupFormModel)(object)model).Name" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                               placeholder="Enter muscle group name"
                               autofocus />
                    <ValidationMessage For="@(() => ((MuscleGroupFormModel)(object)model).Name)" class="text-red-500 text-sm mt-1" />
                </div>

                <div class="mb-4">
                    <label for="bodyPart" class="block text-sm font-medium text-gray-700 mb-1">
                        Body Part <span class="text-red-500">*</span>
                    </label>
                    <InputSelect id="bodyPart" @bind-Value="((MuscleGroupFormModel)(object)model).BodyPartId" 
                                 class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">Select a body part</option>
                        @if (bodyParts != null)
                        {
                            @foreach (var bodyPart in bodyParts.OrderBy(bp => bp.Value))
                            {
                                <option value="@bodyPart.Id">@bodyPart.Value</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => ((MuscleGroupFormModel)(object)model).BodyPartId)" class="text-red-500 text-sm mt-1" />
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
                    <p>@errorMessage</p>
                </div>
            }

            <div class="flex justify-end space-x-3">
                <button type="button" @onclick="OnCancel" 
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                        disabled="@isSubmitting">
                    Cancel
                </button>
                <button type="submit" 
                        class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50"
                        disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                    }
                    Create
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public ReferenceEntityType EntityType { get; set; }
    [Parameter] public EventCallback<object> OnItemCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    
    [Inject] private IEquipmentService? EquipmentService { get; set; }
    [Inject] private IMuscleGroupsService? MuscleGroupsService { get; set; }
    [Inject] private IReferenceDataService? ReferenceDataService { get; set; }

    private object model = new();
    private bool isSubmitting = false;
    private string? errorMessage;
    private IEnumerable<ReferenceDataDto>? bodyParts;

    private string EntityName => EntityType switch
    {
        ReferenceEntityType.Equipment => "Equipment",
        ReferenceEntityType.MuscleGroup => "Muscle Group",
        _ => "Item"
    };

    protected override async Task OnInitializedAsync()
    {
        InitializeModel();
        
        if (EntityType == ReferenceEntityType.MuscleGroup && ReferenceDataService != null)
        {
            bodyParts = await ReferenceDataService.GetBodyPartsAsync();
        }
    }

    private void InitializeModel()
    {
        model = EntityType switch
        {
            ReferenceEntityType.Equipment => new EquipmentFormModel(),
            ReferenceEntityType.MuscleGroup => new MuscleGroupFormModel(),
            _ => new()
        };
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            object? createdItem = null;

            switch (EntityType)
            {
                case ReferenceEntityType.Equipment when EquipmentService != null:
                    var equipmentModel = (EquipmentFormModel)(object)model;
                    var createEquipmentDto = new CreateEquipmentDto { Name = equipmentModel.Name };
                    var createdEquipment = await EquipmentService.CreateEquipmentAsync(createEquipmentDto);
                    createdItem = createdEquipment;
                    break;

                case ReferenceEntityType.MuscleGroup when MuscleGroupsService != null:
                    var muscleGroupModel = (MuscleGroupFormModel)(object)model;
                    var createMuscleGroupDto = new CreateMuscleGroupDto 
                    { 
                        Name = muscleGroupModel.Name,
                        BodyPartId = muscleGroupModel.BodyPartId
                    };
                    var createdMuscleGroup = await MuscleGroupsService.CreateMuscleGroupAsync(createMuscleGroupDto);
                    createdItem = createdMuscleGroup;
                    break;
            }

            if (createdItem != null)
            {
                await OnItemCreated.InvokeAsync(createdItem);
            }
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleBackdropClick()
    {
        if (!isSubmitting)
        {
            OnCancel.InvokeAsync();
        }
    }

    public enum ReferenceEntityType
    {
        Equipment,
        MuscleGroup
    }

    private class EquipmentFormModel
    {
        [Required(ErrorMessage = "Equipment name is required")]
        [StringLength(100, ErrorMessage = "Equipment name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;
    }

    private class MuscleGroupFormModel
    {
        [Required(ErrorMessage = "Muscle group name is required")]
        [StringLength(100, ErrorMessage = "Muscle group name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Body part is required")]
        public string BodyPartId { get; set; } = string.Empty;
    }
}