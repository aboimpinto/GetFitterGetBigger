@using GetFitterGetBigger.Admin.Models
@using GetFitterGetBigger.Admin.Models.Dtos
@using GetFitterGetBigger.Admin.Models.ReferenceData
@using GetFitterGetBigger.Admin.Services
@using System.ComponentModel.DataAnnotations

<div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50 animate-fade-in" 
     data-testid="add-reference-modal-backdrop"
     @onclick="HandleBackdropClick"
     @onkeydown="HandleKeyDown"
     role="dialog"
     aria-modal="true"
     aria-labelledby="modal-title"
     aria-describedby="modal-description"
     tabindex="-1">
    <div class="bg-white rounded-lg p-6 max-w-md w-full animate-scale-in" 
         data-testid="add-reference-modal-content"
         @onclick:stopPropagation="true">
        <h3 id="modal-title" data-testid="modal-title" class="text-lg font-medium text-gray-900 mb-4">
            Add New @EntityName
        </h3>
        <div id="modal-description" class="sr-only">
            Dialog for adding a new @EntityName.ToLower() to the system.
        </div>

        <EditForm Model="@model" OnValidSubmit="HandleSubmit" data-testid="add-reference-form">
            <DataAnnotationsValidator />
            
            @if (EntityType == ReferenceEntityType.Equipment)
            {
                <div class="mb-4">
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                        Equipment Name <span class="text-red-500">*</span>
                    </label>
                    <InputText id="name" @bind-Value="((EquipmentFormModel)(object)model).Name" 
                               @ref="firstInput"
                               data-testid="equipment-name-input"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                               placeholder="Enter equipment name" />
                    <ValidationMessage For="@(() => ((EquipmentFormModel)(object)model).Name)" 
                                     data-testid="equipment-name-error" 
                                     class="text-red-500 text-sm mt-1" />
                </div>
            }
            else if (EntityType == ReferenceEntityType.MuscleGroup)
            {
                <div class="mb-4">
                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
                        Muscle Group Name <span class="text-red-500">*</span>
                    </label>
                    <InputText id="name" @bind-Value="((MuscleGroupFormModel)(object)model).Name" 
                               @ref="firstInput"
                               data-testid="muscle-group-name-input"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                               placeholder="Enter muscle group name" />
                    <ValidationMessage For="@(() => ((MuscleGroupFormModel)(object)model).Name)" 
                                     data-testid="muscle-group-name-error" 
                                     class="text-red-500 text-sm mt-1" />
                </div>

                <div class="mb-4">
                    <label for="bodyPart" class="block text-sm font-medium text-gray-700 mb-1">
                        Body Part <span class="text-red-500">*</span>
                    </label>
                    @if (isLoadingBodyParts)
                    {
                        <div class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 flex items-center">
                            <span class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></span>
                            <span class="text-gray-600">Loading body parts...</span>
                        </div>
                    }
                    else
                    {
                        <InputSelect id="bodyPart" @bind-Value="((MuscleGroupFormModel)(object)model).BodyPartId" 
                                     data-testid="body-part-select"
                                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                     disabled="@(bodyParts == null || !bodyParts.Any())">
                            <option value="">@(bodyParts?.Any() == true ? "Select a body part" : "No body parts available")</option>
                            @if (bodyParts != null)
                            {
                                @foreach (var bodyPart in bodyParts.OrderBy(bp => bp.Value))
                                {
                                    <option value="@bodyPart.Id">@bodyPart.Value</option>
                                }
                            }
                        </InputSelect>
                    }
                    <ValidationMessage For="@(() => ((MuscleGroupFormModel)(object)model).BodyPartId)" 
                                     data-testid="body-part-error" 
                                     class="text-red-500 text-sm mt-1" />
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div data-testid="error-message" class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
                    <p>@errorMessage</p>
                </div>
            }

            <div class="flex justify-end space-x-3">
                <button type="button" @onclick="OnCancel" 
                        data-testid="cancel-button"
                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                        disabled="@isSubmitting">
                    Cancel
                </button>
                <button type="submit" 
                        data-testid="submit-button"
                        class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50"
                        disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span data-testid="loading-spinner" class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                    }
                    Create
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public ReferenceEntityType EntityType { get; set; }
    [Parameter] public EventCallback<object> OnItemCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    
    [Inject] private IEquipmentService? EquipmentService { get; set; }
    [Inject] private IMuscleGroupsService? MuscleGroupsService { get; set; }
    [Inject] private IGenericReferenceDataService? ReferenceDataService { get; set; }

    internal object model = new();
    internal bool isSubmitting = false;
    internal string? errorMessage;
    internal IEnumerable<ReferenceDataDto>? bodyParts;
    internal bool isLoadingBodyParts = false;
    private InputText? firstInput;

    private string EntityName => EntityType switch
    {
        ReferenceEntityType.Equipment => "Equipment",
        ReferenceEntityType.MuscleGroup => "Muscle Group",
        _ => "Item"
    };

    protected override async Task OnInitializedAsync()
    {
        InitializeModel();
        
        if (EntityType == ReferenceEntityType.MuscleGroup && ReferenceDataService != null)
        {
            isLoadingBodyParts = true;
            try
            {
                bodyParts = await ReferenceDataService.GetReferenceDataAsync<BodyParts>();
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to load body parts: {ex.Message}";
            }
            finally
            {
                isLoadingBodyParts = false;
            }
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && firstInput?.Element != null)
        {
            await firstInput.Element.Value.FocusAsync();
        }
    }

    private void InitializeModel()
    {
        model = EntityType switch
        {
            ReferenceEntityType.Equipment => new EquipmentFormModel(),
            ReferenceEntityType.MuscleGroup => new MuscleGroupFormModel(),
            _ => new()
        };
    }

    internal async Task HandleSubmit()
    {
        Console.WriteLine($"[AddReferenceItemModal] HandleSubmit called for {EntityType}");
        
        // Prevent duplicate submissions
        if (isSubmitting)
        {
            Console.WriteLine($"[AddReferenceItemModal] Submission already in progress, ignoring duplicate submit");
            return;
        }
        
        isSubmitting = true;
        errorMessage = null;

        try
        {
            object? createdItem = null;

            switch (EntityType)
            {
                case ReferenceEntityType.Equipment when EquipmentService != null:
                    var equipmentModel = (EquipmentFormModel)(object)model;
                    Console.WriteLine($"[AddReferenceItemModal] Creating equipment: {equipmentModel.Name}");
                    var createEquipmentDto = new CreateEquipmentDto { Name = equipmentModel.Name };
                    var createdEquipment = await EquipmentService.CreateEquipmentAsync(createEquipmentDto);
                    Console.WriteLine($"[AddReferenceItemModal] Equipment created with ID: {createdEquipment?.Id}");
                    
                    // Convert EquipmentDto to ReferenceDataDto for consistency with the Items type
                    if (createdEquipment != null)
                    {
                        createdItem = new ReferenceDataDto
                        {
                            Id = createdEquipment.Id,
                            Value = createdEquipment.Name,
                            Description = null
                        };
                    }
                    break;

                case ReferenceEntityType.MuscleGroup when MuscleGroupsService != null:
                    var muscleGroupModel = (MuscleGroupFormModel)(object)model;
                    Console.WriteLine($"[AddReferenceItemModal] Creating muscle group: {muscleGroupModel.Name} for body part: {muscleGroupModel.BodyPartId}");
                    var createMuscleGroupDto = new CreateMuscleGroupDto 
                    { 
                        Name = muscleGroupModel.Name,
                        BodyPartId = muscleGroupModel.BodyPartId
                    };
                    var createdMuscleGroup = await MuscleGroupsService.CreateMuscleGroupAsync(createMuscleGroupDto);
                    Console.WriteLine($"[AddReferenceItemModal] Muscle group created with ID: {createdMuscleGroup?.Id}");
                    
                    // Convert MuscleGroupDto to ReferenceDataDto for consistency with the Items type
                    if (createdMuscleGroup != null)
                    {
                        createdItem = new ReferenceDataDto
                        {
                            Id = createdMuscleGroup.Id,
                            Value = createdMuscleGroup.Name,
                            Description = $"Body Part: {createdMuscleGroup.BodyPartName ?? "Unknown"}"
                        };
                    }
                    break;
            }

            if (createdItem != null)
            {
                Console.WriteLine($"[AddReferenceItemModal] Invoking OnItemCreated callback");
                await OnItemCreated.InvokeAsync(createdItem);
            }
        }
        catch (InvalidOperationException ex)
        {
            // These are business logic errors with user-friendly messages
            errorMessage = ex.Message;
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Unable to connect to the server. Please check your connection and try again.";
            Console.WriteLine($"[AddReferenceItemModal] Network error: {ex}");
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again or contact support if the issue persists.";
            Console.WriteLine($"[AddReferenceItemModal] Unexpected error: {ex}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleBackdropClick()
    {
        if (!isSubmitting)
        {
            OnCancel.InvokeAsync();
        }
    }
    
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && !isSubmitting)
        {
            OnCancel.InvokeAsync();
        }
    }

    internal class EquipmentFormModel
    {
        [Required(ErrorMessage = "Equipment name is required")]
        [StringLength(100, ErrorMessage = "Equipment name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;
    }

    internal class MuscleGroupFormModel
    {
        [Required(ErrorMessage = "Muscle group name is required")]
        [StringLength(100, ErrorMessage = "Muscle group name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Body part is required")]
        public string BodyPartId { get; set; } = string.Empty;
    }
}