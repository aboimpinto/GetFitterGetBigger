@using GetFitterGetBigger.Admin.Models.Dtos

<div class="space-y-4">
    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2">
        <h3 class="text-lg font-medium text-gray-900">Exercise Types</h3>
        @if (!string.IsNullOrEmpty(ValidationMessage))
        {
            <span class="text-sm text-red-600">@ValidationMessage</span>
        }
    </div>

    <div class="space-y-2">
        @foreach (var type in AvailableTypes)
        {
            <label class="flex items-start space-x-3 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer @(IsTypeDisabled(type) ? "opacity-50 cursor-not-allowed" : "")"
                   title="@GetTypeTooltip(type)">
                <input type="checkbox"
                       checked="@IsTypeSelected(type)"
                       disabled="@IsTypeDisabled(type)"
                       @onchange="@(e => OnTypeChanged(type, e.Value is bool isChecked && isChecked))"
                       class="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
                <div class="flex-1">
                    <div class="font-medium text-gray-900">@type.Value</div>
                    <div class="text-sm text-gray-500">@type.Description</div>
                    @if (type.Value == "Rest" && SelectedTypeIds.Any() && !SelectedTypeIds.Contains(type.Id))
                    {
                        <div class="text-xs text-yellow-600 mt-1">
                            <span class="mr-1">⚠️</span>
                            Rest type cannot be combined with other types
                        </div>
                    }
                    @if (type.Value != "Rest" && IsRestSelected())
                    {
                        <div class="text-xs text-yellow-600 mt-1">
                            <span class="mr-1">⚠️</span>
                            Cannot be selected when Rest is selected
                        </div>
                    }
                </div>
            </label>
        }
    </div>

    <div class="text-sm text-gray-600 bg-blue-50 border border-blue-200 rounded-md p-3">
        <span class="mr-1">ℹ️</span>
        <span class="font-medium">Rules:</span> At least one type must be selected. Rest type is exclusive. Cannot select all four types.
    </div>
</div>

@code {
    [Parameter] public List<ExerciseTypeDto> AvailableTypes { get; set; } = new();
    [Parameter] public List<string> SelectedTypeIds { get; set; } = new();
    [Parameter] public EventCallback<List<string>> SelectedTypeIdsChanged { get; set; }

    private string ValidationMessage = string.Empty;

    private bool IsTypeSelected(ExerciseTypeDto type)
    {
        return SelectedTypeIds.Contains(type.Id);
    }

    private bool IsTypeDisabled(ExerciseTypeDto type)
    {
        // When Rest is NOT selected but other types are, disable Rest
        if (type.Value == "Rest" && !IsTypeSelected(type) && SelectedTypeIds.Any())
        {
            return true;
        }

        // Other types are disabled when Rest is selected
        if (type.Value != "Rest" && IsRestSelected() && !IsTypeSelected(type))
        {
            return true;
        }

        // Prevent selecting all four types
        if (!IsTypeSelected(type) && SelectedTypeIds.Count == 3)
        {
            return true;
        }

        // Allow unchecking any type - users can temporarily have no types selected

        return false;
    }

    private bool IsRestSelected()
    {
        return SelectedTypeIds.Any(id => 
            AvailableTypes.FirstOrDefault(t => t.Id == id)?.Value == "Rest");
    }

    private async Task OnTypeChanged(ExerciseTypeDto type, bool isChecked)
    {
        ValidationMessage = string.Empty;

        if (isChecked)
        {
            // Add the type
            if (!SelectedTypeIds.Contains(type.Id))
            {
                SelectedTypeIds.Add(type.Id);
            }
        }
        else
        {
            // Remove the type
            SelectedTypeIds.Remove(type.Id);
        }

        // Validate the selection
        if (!ValidateSelection())
        {
            // Revert the change if validation fails
            if (isChecked)
            {
                SelectedTypeIds.Remove(type.Id);
            }
            else
            {
                SelectedTypeIds.Add(type.Id);
            }
        }

        await SelectedTypeIdsChanged.InvokeAsync(SelectedTypeIds);
        StateHasChanged();
    }

    private bool ValidateSelection()
    {
        // Rule 1: At least one type must be selected (but allow temporary empty state)
        if (!SelectedTypeIds.Any())
        {
            ValidationMessage = "At least one exercise type must be selected";
            return true; // Allow the change but show warning
        }

        // Rule 2: Cannot select all four types
        if (SelectedTypeIds.Count == 4)
        {
            ValidationMessage = "Cannot select all four exercise types";
            return false;
        }

        // Rule 3: Rest is exclusive
        var hasRest = SelectedTypeIds.Any(id => 
            AvailableTypes.FirstOrDefault(t => t.Id == id)?.Value == "Rest");
        
        if (hasRest && SelectedTypeIds.Count > 1)
        {
            ValidationMessage = "Rest type cannot be combined with other types";
            return false;
        }

        return true;
    }

    private string GetTypeTooltip(ExerciseTypeDto type)
    {
        if (IsTypeDisabled(type))
        {
            if (type.Value == "Rest" && SelectedTypeIds.Any())
            {
                return "Rest type cannot be combined with other exercise types";
            }
            else if (type.Value != "Rest" && IsRestSelected())
            {
                return "Cannot select this type when Rest is selected";
            }
            else if (SelectedTypeIds.Count == 3)
            {
                return "Cannot select all four exercise types";
            }
        }
        
        return type.Value switch
        {
            "Warmup" => "Preparatory exercises to get the body ready for workout",
            "Workout" => "Main exercise performed during the training session",
            "Cooldown" => "Recovery exercises performed after the main workout",
            "Rest" => "Rest period between sets or exercises (exclusive type)",
            _ => type.Description
        };
    }
}