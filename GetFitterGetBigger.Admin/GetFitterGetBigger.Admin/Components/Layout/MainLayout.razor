@inherits LayoutComponentBase
@using GetFitterGetBigger.Admin.Services.Authentication
@using GetFitterGetBigger.Admin.Services
@using GetFitterGetBigger.Admin.Components.Shared
@inject IAuthorizationStateService AuthorizationStateService
@inject INavigationService NavigationService
@inject NavigationManager Navigation
@implements IDisposable

<div class="flex min-h-screen bg-gray-100">
    <div class="w-64 bg-gray-800 text-white">
        <NavMenu />
    </div>

    <div class="flex-1 flex flex-col">
        <header class="bg-white shadow">
            <div class="flex justify-between items-center py-4 px-6">
                <h1 class="text-2xl font-semibold text-gray-800">GetFitterGetBigger Admin</h1>
                <div>
                    <UserProfile />
                </div>
            </div>
        </header>

        <main class="flex-1 bg-gray-100 p-6">
            @{
                RenderFragment content = GetMainContent();
            }
            @content
        </main>
    </div>
</div>

<ToastContainer />

<div id="blazor-error-ui" data-nosnippet class="fixed bottom-0 left-0 w-full bg-yellow-100 p-4 shadow-md z-50 hidden">
    An unhandled error has occurred.
    <a href="." class="text-blue-600 hover:text-blue-800 ml-2">Reload</a>
    <span class="float-right cursor-pointer" onclick="this.parentNode.style.display='none'">🗙</span>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        AuthorizationStateService.OnChange += StateHasChanged;
        await AuthorizationStateService.InitializeAsync();
        
        // Initialize navigation tracking
        NavigationService.Initialize(Navigation);
    }

    private RenderFragment GetMainContent()
    {
        if (!AuthorizationStateService.IsReady)
        {
            return builder => builder.AddContent(0, "Loading...");
        }

        if (!AuthorizationStateService.UserHasAdminAccess)
        {
            return builder => builder.AddContent(0, new ForbiddenAccess());
        }

        return Body ?? (builder => { });
    }

    public void Dispose()
    {
        AuthorizationStateService.OnChange -= StateHasChanged;
    }
}
