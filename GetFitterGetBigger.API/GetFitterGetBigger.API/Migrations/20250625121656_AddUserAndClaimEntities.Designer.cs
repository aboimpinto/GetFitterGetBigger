// <auto-generated />
using System;
using GetFitterGetBigger.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GetFitterGetBigger.API.Migrations
{
    [DbContext(typeof(FitnessDbContext))]
    [Migration("20250625121656_AddUserAndClaimEntities")]
    partial class AddUserAndClaimEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.BodyPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BodyParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c5a2d6e-e87e-4c8a-9f1d-9eb734f3df3c"),
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Chest"
                        },
                        new
                        {
                            Id = new Guid("b2d89d5c-cb8a-4f5d-8a9e-2c3b76612c5a"),
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Back"
                        },
                        new
                        {
                            Id = new Guid("4a6f1b42-5c9b-4c4e-878a-b3d9f2c1f1f5"),
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Legs"
                        },
                        new
                        {
                            Id = new Guid("d7e0e24c-f8d4-4b8a-b1e0-cf9c2e6b5d0a"),
                            DisplayOrder = 4,
                            IsActive = true,
                            Value = "Shoulders"
                        },
                        new
                        {
                            Id = new Guid("9c5f1b4e-2b8a-4c9d-8e7f-c5a9e2d7b8c1"),
                            DisplayOrder = 5,
                            IsActive = true,
                            Value = "Arms"
                        },
                        new
                        {
                            Id = new Guid("3e9f8a7d-6c5b-4a3e-8d2f-1b7c9a6d5e4c"),
                            DisplayOrder = 6,
                            IsActive = true,
                            Value = "Core"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Resource")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.DifficultyLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a8adb1d-24d2-4979-a5a6-0d760e6da24b"),
                            Description = "Suitable for those new to fitness",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Beginner"
                        },
                        new
                        {
                            Id = new Guid("9c7b59a4-bcd8-48a6-971a-cd67b0a7ab5a"),
                            Description = "Suitable for those with some fitness experience",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Intermediate"
                        },
                        new
                        {
                            Id = new Guid("3e27f9a7-d5a5-4f8e-8a76-6de2d23c9a3c"),
                            Description = "Suitable for those with significant fitness experience",
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Advanced"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DifficultyLevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsUnilateral")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KineticChainTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("KineticChainTypeId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseEquipment", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ExerciseEquipment");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMetricSupport", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MetricTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "MetricTypeId");

                    b.HasIndex("MetricTypeId");

                    b.ToTable("ExerciseMetricSupport");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMovementPattern", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatternId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "PatternId");

                    b.HasIndex("PatternId");

                    b.ToTable("ExerciseMovementPatterns");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseTargetedMuscle", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MuscleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MuscleRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.HasIndex("MuscleRoleId");

                    b.ToTable("ExerciseTargetedMuscles");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.KineticChainType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KineticChainTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5d5a2de-9c4e-4b87-b8c3-5d1e17d0b1f4"),
                            Description = "Exercises that work multiple muscle groups",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Compound"
                        },
                        new
                        {
                            Id = new Guid("2b3e7cb2-9a3e-4c9a-88d8-b7c019c90d1b"),
                            Description = "Exercises that work a single muscle group",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Isolation"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MetricType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MetricTypes");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MovementPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MovementPatterns");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodyPartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartId");

                    b.ToTable("MuscleGroups");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MuscleRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d8e9a7b-3c2d-4f6a-9b8c-1e5d7f3a2c9b"),
                            Description = "The main muscle targeted by the exercise",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Primary"
                        },
                        new
                        {
                            Id = new Guid("8c7d6b5a-4e3f-2a1b-9c8d-7e6f5d4c3b2a"),
                            Description = "A muscle that assists in the exercise",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Secondary"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            Description = "A muscle that helps stabilize the body during the exercise",
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Stabilizer"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutLogs");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLogSet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("DistanceCompletedM")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationCompletedSec")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("RepsCompleted")
                        .HasColumnType("integer");

                    b.Property<int>("SetOrder")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WeightUsedKg")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("LogId");

                    b.ToTable("WorkoutLogSets");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Claim", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Exercise", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.DifficultyLevel", "DifficultyLevel")
                        .WithMany("Exercises")
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.KineticChainType", "KineticChainType")
                        .WithMany("Exercises")
                        .HasForeignKey("KineticChainTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DifficultyLevel");

                    b.Navigation("KineticChainType");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseEquipment", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Equipment", "Equipment")
                        .WithMany("Exercises")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("Equipment")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMetricSupport", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("SupportedMetrics")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MetricType", "MetricType")
                        .WithMany("Exercises")
                        .HasForeignKey("MetricTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MetricType");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMovementPattern", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("MovementPatterns")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MovementPattern", "Pattern")
                        .WithMany("Exercises")
                        .HasForeignKey("PatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Pattern");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseTargetedMuscle", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("TargetedMuscles")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MuscleGroup", "MuscleGroup")
                        .WithMany("Exercises")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MuscleRole", "MuscleRole")
                        .WithMany()
                        .HasForeignKey("MuscleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MuscleGroup");

                    b.Navigation("MuscleRole");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleGroup", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.BodyPart", "BodyPart")
                        .WithMany()
                        .HasForeignKey("BodyPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyPart");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLog", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.User", "User")
                        .WithMany("WorkoutLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLogSet", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("WorkoutLogSets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.WorkoutLog", "WorkoutLog")
                        .WithMany("Sets")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutLog");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.DifficultyLevel", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Equipment", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Exercise", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("MovementPatterns");

                    b.Navigation("SupportedMetrics");

                    b.Navigation("TargetedMuscles");

                    b.Navigation("WorkoutLogSets");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.KineticChainType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MetricType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MovementPattern", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleGroup", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("WorkoutLogs");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLog", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
