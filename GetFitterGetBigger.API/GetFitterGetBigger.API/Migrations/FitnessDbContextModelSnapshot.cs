// <auto-generated />
using System;
using GetFitterGetBigger.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GetFitterGetBigger.API.Migrations
{
    [DbContext(typeof(FitnessDbContext))]
    partial class FitnessDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.BodyPart", b =>
                {
                    b.Property<Guid>("BodyPartId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BodyPartId");

                    b.ToTable("BodyParts");

                    b.HasData(
                        new
                        {
                            BodyPartId = new Guid("7c5a2d6e-e87e-4c8a-9f1d-9eb734f3df3c"),
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Chest"
                        },
                        new
                        {
                            BodyPartId = new Guid("b2d89d5c-cb8a-4f5d-8a9e-2c3b76612c5a"),
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Back"
                        },
                        new
                        {
                            BodyPartId = new Guid("4a6f1b42-5c9b-4c4e-878a-b3d9f2c1f1f5"),
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Legs"
                        },
                        new
                        {
                            BodyPartId = new Guid("d7e0e24c-f8d4-4b8a-b1e0-cf9c2e6b5d0a"),
                            DisplayOrder = 4,
                            IsActive = true,
                            Value = "Shoulders"
                        },
                        new
                        {
                            BodyPartId = new Guid("9c5f1b4e-2b8a-4c9d-8e7f-c5a9e2d7b8c1"),
                            DisplayOrder = 5,
                            IsActive = true,
                            Value = "Arms"
                        },
                        new
                        {
                            BodyPartId = new Guid("3e9f8a7d-6c5b-4a3e-8d2f-1b7c9a6d5e4c"),
                            DisplayOrder = 6,
                            IsActive = true,
                            Value = "Core"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Resource")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.CoachNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId", "Order")
                        .HasDatabaseName("IX_CoachNote_ExerciseId_Order");

                    b.ToTable("CoachNotes");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.DifficultyLevel", b =>
                {
                    b.Property<Guid>("DifficultyLevelId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DifficultyLevelId");

                    b.ToTable("DifficultyLevels");

                    b.HasData(
                        new
                        {
                            DifficultyLevelId = new Guid("8a8adb1d-24d2-4979-a5a6-0d760e6da24b"),
                            Description = "Suitable for those new to fitness",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Beginner"
                        },
                        new
                        {
                            DifficultyLevelId = new Guid("9c7b59a4-bcd8-48a6-971a-cd67b0a7ab5a"),
                            Description = "Suitable for those with some fitness experience",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Intermediate"
                        },
                        new
                        {
                            DifficultyLevelId = new Guid("3e27f9a7-d5a5-4f8e-8a76-6de2d23c9a3c"),
                            Description = "Suitable for those with significant fitness experience",
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Advanced"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExecutionProtocol", b =>
                {
                    b.Property<Guid>("ExecutionProtocolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IntensityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("RepBase")
                        .HasColumnType("boolean");

                    b.Property<string>("RestPattern")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("TimeBase")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ExecutionProtocolId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_ExecutionProtocol_Code");

                    b.HasIndex("Value")
                        .HasDatabaseName("IX_ExecutionProtocol_Value");

                    b.ToTable("ExecutionProtocols");

                    b.HasData(
                        new
                        {
                            ExecutionProtocolId = new Guid("30000003-3000-4000-8000-300000000001"),
                            Code = "STANDARD",
                            Description = "Standard protocol with balanced rep and time components",
                            DisplayOrder = 1,
                            IntensityLevel = "Moderate to High",
                            IsActive = true,
                            RepBase = true,
                            RestPattern = "60-90 seconds between sets",
                            TimeBase = true,
                            Value = "Standard"
                        },
                        new
                        {
                            ExecutionProtocolId = new Guid("30000003-3000-4000-8000-300000000002"),
                            Code = "SUPERSET",
                            Description = "Perform exercises back-to-back without rest",
                            DisplayOrder = 2,
                            IntensityLevel = "High",
                            IsActive = true,
                            RepBase = true,
                            RestPattern = "Rest after completing both exercises",
                            TimeBase = false,
                            Value = "Superset"
                        },
                        new
                        {
                            ExecutionProtocolId = new Guid("30000003-3000-4000-8000-300000000003"),
                            Code = "DROP_SET",
                            Description = "Reduce weight after reaching failure",
                            DisplayOrder = 3,
                            IntensityLevel = "Very High",
                            IsActive = true,
                            RepBase = true,
                            RestPattern = "Minimal rest between drops",
                            TimeBase = false,
                            Value = "Drop Set"
                        },
                        new
                        {
                            ExecutionProtocolId = new Guid("30000003-3000-4000-8000-300000000004"),
                            Code = "AMRAP",
                            Description = "As Many Reps As Possible in given time",
                            DisplayOrder = 4,
                            IntensityLevel = "High",
                            IsActive = true,
                            RepBase = false,
                            RestPattern = "Fixed rest periods",
                            TimeBase = true,
                            Value = "AMRAP"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExerciseWeightTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnilateral")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KineticChainId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("ExerciseWeightTypeId");

                    b.HasIndex("KineticChainId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseBodyPart", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodyPartId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "BodyPartId");

                    b.HasIndex("BodyPartId");

                    b.ToTable("ExerciseBodyParts");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseEquipment", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ExerciseEquipment");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseExerciseType", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "ExerciseTypeId");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("ExerciseExerciseTypes");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseLink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("SourceExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetExerciseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TargetExerciseId")
                        .HasDatabaseName("IX_ExerciseLink_TargetExerciseId");

                    b.HasIndex("SourceExerciseId", "LinkType")
                        .HasDatabaseName("IX_ExerciseLink_SourceExerciseId_LinkType");

                    b.HasIndex("SourceExerciseId", "TargetExerciseId", "LinkType")
                        .IsUnique()
                        .HasDatabaseName("IX_ExerciseLink_Source_Target_Type_Unique");

                    b.ToTable("ExerciseLinks");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMetricSupport", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MetricTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "MetricTypeId");

                    b.HasIndex("MetricTypeId");

                    b.ToTable("ExerciseMetricSupport");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMovementPattern", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovementPatternId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "MovementPatternId");

                    b.HasIndex("MovementPatternId");

                    b.ToTable("ExerciseMovementPatterns");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMuscleGroup", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MuscleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MuscleRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.HasIndex("MuscleRoleId");

                    b.ToTable("ExerciseMuscleGroups");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseTargetedMuscle", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MuscleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MuscleRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.HasIndex("MuscleRoleId");

                    b.ToTable("ExerciseTargetedMuscles");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseType", b =>
                {
                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExerciseTypeId");

                    b.ToTable("ExerciseTypes");

                    b.HasData(
                        new
                        {
                            ExerciseTypeId = new Guid("a1b2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            Description = "Exercises performed to prepare the body for more intense activity",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Warmup"
                        },
                        new
                        {
                            ExerciseTypeId = new Guid("b2c3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            Description = "Main exercises that form the core of the training session",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Workout"
                        },
                        new
                        {
                            ExerciseTypeId = new Guid("c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            Description = "Exercises performed to help the body recover after intense activity",
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Cooldown"
                        },
                        new
                        {
                            ExerciseTypeId = new Guid("d4e5f6a7-8b9c-0d1e-2f3a-4b5c6d7e8f9a"),
                            Description = "Periods of rest between exercises or sets",
                            DisplayOrder = 4,
                            IsActive = true,
                            Value = "Rest"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseWeightType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_ExerciseWeightType_Code");

                    b.HasIndex("Value")
                        .HasDatabaseName("IX_ExerciseWeightType_Value");

                    b.ToTable("ExerciseWeightTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1f3e2d4-5b6c-4d7e-8f9a-0b1c2d3e4f5a"),
                            Code = "BODYWEIGHT_ONLY",
                            Description = "Exercises that cannot have external weight added",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Bodyweight Only"
                        },
                        new
                        {
                            Id = new Guid("b2e4d3c5-6a7b-5c8d-9e0f-1a2b3c4d5e6f"),
                            Code = "BODYWEIGHT_OPTIONAL",
                            Description = "Exercises that can be performed with or without additional weight",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Bodyweight Optional"
                        },
                        new
                        {
                            Id = new Guid("c3d5c4b6-7b8c-6d9e-0f1a-2b3c4d5e6f7a"),
                            Code = "WEIGHT_REQUIRED",
                            Description = "Exercises that must have external weight specified",
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Weight Required"
                        },
                        new
                        {
                            Id = new Guid("d4c6b5a7-8c9d-7e0f-1a2b-3c4d5e6f7a8b"),
                            Code = "MACHINE_WEIGHT",
                            Description = "Exercises performed on machines with weight stacks",
                            DisplayOrder = 4,
                            IsActive = true,
                            Value = "Machine Weight"
                        },
                        new
                        {
                            Id = new Guid("e5b7a698-9d0e-8f1a-2b3c-4d5e6f7a8b9c"),
                            Code = "NO_WEIGHT",
                            Description = "Exercises that do not use weight as a metric",
                            DisplayOrder = 5,
                            IsActive = true,
                            Value = "No Weight"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.KineticChainType", b =>
                {
                    b.Property<Guid>("KineticChainTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("KineticChainTypeId");

                    b.ToTable("KineticChainTypes");

                    b.HasData(
                        new
                        {
                            KineticChainTypeId = new Guid("f5d5a2de-9c4e-4b87-b8c3-5d1e17d0b1f4"),
                            Description = "Exercises that work multiple muscle groups",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Compound"
                        },
                        new
                        {
                            KineticChainTypeId = new Guid("2b3e7cb2-9a3e-4c9a-88d8-b7c019c90d1b"),
                            Description = "Exercises that work a single muscle group",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Isolation"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MetricType", b =>
                {
                    b.Property<Guid>("MetricTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MetricTypeId");

                    b.ToTable("MetricTypes");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MovementPattern", b =>
                {
                    b.Property<Guid>("MovementPatternId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MovementPatternId");

                    b.ToTable("MovementPatterns");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodyPartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartId");

                    b.HasIndex("Name", "IsActive")
                        .HasDatabaseName("IX_MuscleGroup_Name_IsActive");

                    b.ToTable("MuscleGroups");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleRole", b =>
                {
                    b.Property<Guid>("MuscleRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MuscleRoleId");

                    b.ToTable("MuscleRoles");

                    b.HasData(
                        new
                        {
                            MuscleRoleId = new Guid("5d8e9a7b-3c2d-4f6a-9b8c-1e5d7f3a2c9b"),
                            Description = "The main muscle targeted by the exercise",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Primary"
                        },
                        new
                        {
                            MuscleRoleId = new Guid("8c7d6b5a-4e3f-2a1b-9c8d-7e6f5d4c3b2a"),
                            Description = "A muscle that assists in the exercise",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Secondary"
                        },
                        new
                        {
                            MuscleRoleId = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            Description = "A muscle that helps stabilize the body during the exercise",
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Stabilizer"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutCategory", b =>
                {
                    b.Property<Guid>("WorkoutCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PrimaryMuscleGroups")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("WorkoutCategoryId");

                    b.HasIndex("Value")
                        .HasDatabaseName("IX_WorkoutCategory_Value");

                    b.ToTable("WorkoutCategories");

                    b.HasData(
                        new
                        {
                            WorkoutCategoryId = new Guid("20000002-2000-4000-8000-200000000001"),
                            Color = "#FF5722",
                            Description = "Push exercises targeting chest, shoulders, and triceps",
                            DisplayOrder = 1,
                            Icon = "💪",
                            IsActive = true,
                            PrimaryMuscleGroups = "Chest,Shoulders,Triceps",
                            Value = "Upper Body - Push"
                        },
                        new
                        {
                            WorkoutCategoryId = new Guid("20000002-2000-4000-8000-200000000002"),
                            Color = "#4CAF50",
                            Description = "Pull exercises targeting back and biceps",
                            DisplayOrder = 2,
                            Icon = "🏋️",
                            IsActive = true,
                            PrimaryMuscleGroups = "Back,Biceps",
                            Value = "Upper Body - Pull"
                        },
                        new
                        {
                            WorkoutCategoryId = new Guid("20000002-2000-4000-8000-200000000003"),
                            Color = "#2196F3",
                            Description = "Lower body exercises for legs and glutes",
                            DisplayOrder = 3,
                            Icon = "🦵",
                            IsActive = true,
                            PrimaryMuscleGroups = "Quadriceps,Hamstrings,Glutes,Calves",
                            Value = "Lower Body"
                        },
                        new
                        {
                            WorkoutCategoryId = new Guid("20000002-2000-4000-8000-200000000004"),
                            Color = "#9C27B0",
                            Description = "Core stability and strength exercises",
                            DisplayOrder = 4,
                            Icon = "🎯",
                            IsActive = true,
                            PrimaryMuscleGroups = "Abs,Obliques,Lower Back",
                            Value = "Core"
                        },
                        new
                        {
                            WorkoutCategoryId = new Guid("20000002-2000-4000-8000-200000000005"),
                            Color = "#FF9800",
                            Description = "Compound exercises engaging multiple muscle groups",
                            DisplayOrder = 5,
                            Icon = "🏃",
                            IsActive = true,
                            PrimaryMuscleGroups = "Multiple",
                            Value = "Full Body"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutLogs");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLogSet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("DistanceCompletedM")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationCompletedSec")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("RepsCompleted")
                        .HasColumnType("integer");

                    b.Property<int>("SetOrder")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WeightUsedKg")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("LogId");

                    b.ToTable("WorkoutLogSets");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutMuscles", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("EngagementLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LoadEstimation")
                        .HasColumnType("integer");

                    b.Property<Guid>("MuscleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkoutTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("WorkoutMuscles");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutObjective", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .HasDatabaseName("IX_WorkoutObjective_Value");

                    b.ToTable("WorkoutObjectives");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000001-1000-4000-8000-100000000001"),
                            Description = "Build maximum strength through heavy loads and low repetitions",
                            DisplayOrder = 1,
                            IsActive = true,
                            Value = "Muscular Strength"
                        },
                        new
                        {
                            Id = new Guid("10000001-1000-4000-8000-100000000002"),
                            Description = "Increase muscle size through moderate loads and volume",
                            DisplayOrder = 2,
                            IsActive = true,
                            Value = "Muscular Hypertrophy"
                        },
                        new
                        {
                            Id = new Guid("10000001-1000-4000-8000-100000000003"),
                            Description = "Improve ability to sustain effort over time",
                            DisplayOrder = 3,
                            IsActive = true,
                            Value = "Muscular Endurance"
                        },
                        new
                        {
                            Id = new Guid("10000001-1000-4000-8000-100000000004"),
                            Description = "Develop explosive strength and speed",
                            DisplayOrder = 4,
                            IsActive = true,
                            Value = "Power Development"
                        });
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Claim", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.CoachNote", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("CoachNotes")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Exercise", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.DifficultyLevel", "Difficulty")
                        .WithMany("Exercises")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.ExerciseWeightType", "ExerciseWeightType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseWeightTypeId");

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.KineticChainType", "KineticChain")
                        .WithMany("Exercises")
                        .HasForeignKey("KineticChainId");

                    b.Navigation("Difficulty");

                    b.Navigation("ExerciseWeightType");

                    b.Navigation("KineticChain");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseBodyPart", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.BodyPart", "BodyPart")
                        .WithMany()
                        .HasForeignKey("BodyPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseBodyParts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyPart");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseEquipment", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Equipment", "Equipment")
                        .WithMany("Exercises")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseEquipment")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseExerciseType", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseExerciseTypes")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseLink", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "SourceExercise")
                        .WithMany()
                        .HasForeignKey("SourceExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "TargetExercise")
                        .WithMany()
                        .HasForeignKey("TargetExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceExercise");

                    b.Navigation("TargetExercise");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMetricSupport", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MetricType", "MetricType")
                        .WithMany("Exercises")
                        .HasForeignKey("MetricTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MetricType");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMovementPattern", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseMovementPatterns")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MovementPattern", "MovementPattern")
                        .WithMany("Exercises")
                        .HasForeignKey("MovementPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MovementPattern");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseMuscleGroup", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseMuscleGroups")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MuscleGroup", "MuscleGroup")
                        .WithMany()
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MuscleRole", "MuscleRole")
                        .WithMany()
                        .HasForeignKey("MuscleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MuscleGroup");

                    b.Navigation("MuscleRole");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseTargetedMuscle", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MuscleGroup", "MuscleGroup")
                        .WithMany("Exercises")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MuscleRole", "MuscleRole")
                        .WithMany()
                        .HasForeignKey("MuscleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MuscleGroup");

                    b.Navigation("MuscleRole");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleGroup", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.BodyPart", "BodyPart")
                        .WithMany()
                        .HasForeignKey("BodyPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyPart");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLog", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.User", "User")
                        .WithMany("WorkoutLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLogSet", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetFitterGetBigger.API.Models.Entities.WorkoutLog", "WorkoutLog")
                        .WithMany("Sets")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutLog");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutMuscles", b =>
                {
                    b.HasOne("GetFitterGetBigger.API.Models.Entities.MuscleGroup", "MuscleGroup")
                        .WithMany()
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.DifficultyLevel", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Equipment", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.Exercise", b =>
                {
                    b.Navigation("CoachNotes");

                    b.Navigation("ExerciseBodyParts");

                    b.Navigation("ExerciseEquipment");

                    b.Navigation("ExerciseExerciseTypes");

                    b.Navigation("ExerciseMovementPatterns");

                    b.Navigation("ExerciseMuscleGroups");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.ExerciseWeightType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.KineticChainType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MetricType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MovementPattern", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.MuscleGroup", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("WorkoutLogs");
                });

            modelBuilder.Entity("GetFitterGetBigger.API.Models.Entities.WorkoutLog", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
