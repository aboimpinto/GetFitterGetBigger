// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Equipment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EquipmentRepositoryOperationsFeature : object, Xunit.IClassFixture<EquipmentRepositoryOperationsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public EquipmentRepositoryOperationsFeature(EquipmentRepositoryOperationsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Equipment", "Equipment Repository Operations", "  As an API service\n  I want to perform CRUD operations on equipment\n  So that th" +
                    "e system can manage equipment data correctly", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a \"PT-Tier\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the system has been initialized with seed data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all equipment returns only active equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Get all equipment returns only active equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetAllEquipmentReturnsOnlyActiveEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all equipment returns only active equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have equipment \"Dumbbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have equipment \"Old Machine\" that is inactive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I get all equipment from repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive 2 equipment items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("all equipment should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment should not include \"Old Machine\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by ID when exists returns equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by ID when exists returns equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByIDWhenExistsReturnsEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by ID when exists returns equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get equipment by ID for \"Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive the equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the equipment name should be \"Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by ID when not exists returns null")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by ID when not exists returns null")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByIDWhenNotExistsReturnsNull()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by ID when not exists returns null", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get equipment by non-existent ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive no equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by name when active exists returns equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by name when active exists returns equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByNameWhenActiveExistsReturnsEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by name when active exists returns equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get equipment by name \"Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive the equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the equipment name should be \"Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by name when inactive returns null")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by name when inactive returns null")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByNameWhenInactiveReturnsNull()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by name when inactive returns null", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Old Machine\" that is inactive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get equipment by name \"Old Machine\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive no equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by name is case insensitive")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by name is case insensitive")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByNameIsCaseInsensitive()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by name is case insensitive", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get equipment by name \"BARBELL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive the equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the equipment name should be \"Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create new equipment succeeds")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Create new equipment succeeds")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "create")]
        public async System.Threading.Tasks.Task CreateNewEquipmentSucceeds()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new equipment succeeds", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create equipment \"Kettlebell\" via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the equipment should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the equipment name should be \"Kettlebell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment should be persisted in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update existing equipment succeeds")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Update existing equipment succeeds")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "update")]
        public async System.Threading.Tasks.Task UpdateExistingEquipmentSucceeds()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update existing equipment succeeds", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I update equipment \"Barbell\" to name \"Olympic Barbell\" via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the equipment should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the equipment name should be \"Olympic Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment updated timestamp should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment should be persisted in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deactivate existing equipment succeeds")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Deactivate existing equipment succeeds")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "delete")]
        public async System.Threading.Tasks.Task DeactivateExistingEquipmentSucceeds()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate existing equipment succeeds", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I deactivate equipment \"Barbell\" via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the deactivation should succeed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the equipment should be inactive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment updated timestamp should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deactivate non-existent equipment fails")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Deactivate non-existent equipment fails")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "delete")]
        public async System.Threading.Tasks.Task DeactivateNon_ExistentEquipmentFails()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate non-existent equipment fails", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I deactivate equipment by non-existent ID via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the deactivation should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check equipment exists when active returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Check equipment exists when active returns true")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CheckEquipmentExistsWhenActiveReturnsTrue()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check equipment exists when active returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I check if equipment \"Barbell\" exists via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the existence check should return true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check equipment exists when inactive returns false")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Check equipment exists when inactive returns false")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CheckEquipmentExistsWhenInactiveReturnsFalse()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check equipment exists when inactive returns false", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Old Machine\" that is inactive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I check if equipment \"Old Machine\" exists via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the existence check should return false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check equipment exists when not exists returns false")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Check equipment exists when not exists returns false")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CheckEquipmentExistsWhenNotExistsReturnsFalse()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check equipment exists when not exists returns false", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I check if equipment \"NonExistent\" exists via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the existence check should return false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check equipment exists with exclude ID excludes specified ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Check equipment exists with exclude ID excludes specified ID")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CheckEquipmentExistsWithExcludeIDExcludesSpecifiedID()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check equipment exists with exclude ID excludes specified ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I check if equipment \"Barbell\" exists excluding its own ID via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the existence check should return false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check equipment exists is case insensitive")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Check equipment exists is case insensitive")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CheckEquipmentExistsIsCaseInsensitive()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check equipment exists is case insensitive", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I check if equipment \"BARBELL\" exists via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the existence check should return true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check equipment in use when not used returns false")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Check equipment in use when not used returns false")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CheckEquipmentInUseWhenNotUsedReturnsFalse()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check equipment in use when not used returns false", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I check if equipment \"Barbell\" is in use via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the in use check should return false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check equipment in use when used by exercise returns true")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment Repository Operations")]
        [Xunit.TraitAttribute("Description", "Check equipment in use when used by exercise returns true")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "repository")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CheckEquipmentInUseWhenUsedByExerciseReturnsTrue()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "repository",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check equipment in use when used by exercise returns true", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have equipment \"Barbell\" that is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise \"Barbell Squat\" that uses equipment \"Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I check if equipment \"Barbell\" is in use via repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the in use check should return true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await EquipmentRepositoryOperationsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await EquipmentRepositoryOperationsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
