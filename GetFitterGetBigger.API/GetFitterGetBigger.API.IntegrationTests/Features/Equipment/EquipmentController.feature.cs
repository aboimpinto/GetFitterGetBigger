// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Equipment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EquipmentAPIControllerOperationsFeature : object, Xunit.IClassFixture<EquipmentAPIControllerOperationsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public EquipmentAPIControllerOperationsFeature(EquipmentAPIControllerOperationsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Equipment", "Equipment API Controller Operations", "  As an API consumer\n  I want to perform CRUD operations on equipment\n  So that I" +
                    " can manage equipment reference data", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a \"PT-Tier\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the system has been initialized with seed data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all equipment returns only active equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get all equipment returns only active equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetAllEquipmentReturnsOnlyActiveEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all equipment returns only active equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"Test Barbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created equipment \"Test Dumbbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I get all equipment via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive a collection of equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("all equipment items should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by valid ID returns equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by valid ID returns equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByValidIDReturnsEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by valid ID returns equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"Test Barbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get the created equipment by ID via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment name should be \"Test Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by invalid ID format returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by invalid ID format returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetEquipmentByInvalidIDFormatReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by invalid ID format returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get equipment by ID \"invalid-format\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetEquipmentByEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get equipment by ID \"equipment-00000000-0000-0000-0000-000000000000\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by non-existent ID returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by non-existent ID returns not found")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetEquipmentByNon_ExistentIDReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by non-existent ID returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get equipment by ID \"equipment-11111111-1111-1111-1111-111111111111\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by name returns equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by name returns equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByNameReturnsEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by name returns equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"Test Barbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get equipment by name \"Test Barbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the equipment reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment value should be \"Test Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment by value returns equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by value returns equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetEquipmentByValueReturnsEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by value returns equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"Test Barbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get equipment by name \"Test Barbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the equipment reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment value should be \"Test Barbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get equipment by name is case insensitive")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get equipment by name is case insensitive")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "read")]
        [Xunit.InlineDataAttribute("CaseSensitiveBarbell", new string[0])]
        [Xunit.InlineDataAttribute("casesensitivebarbell", new string[0])]
        [Xunit.InlineDataAttribute("CASESENSITIVEBARBELL", new string[0])]
        [Xunit.InlineDataAttribute("CaSeSenSiTiveBaRbElL", new string[0])]
        public async System.Threading.Tasks.Task GetEquipmentByNameIsCaseInsensitive(string casing_Variant, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "equipment",
                    "api",
                    "read"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("casing_variant", casing_Variant);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment by name is case insensitive", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"CaseSensitiveBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync(string.Format("I get equipment by name \"{0}\" via API", casing_Variant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the equipment reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment value should be \"CaseSensitiveBarbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create equipment with valid data returns created equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Create equipment with valid data returns created equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "create")]
        public async System.Threading.Tasks.Task CreateEquipmentWithValidDataReturnsCreatedEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create equipment with valid data returns created equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create equipment \"NewKettlebell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the created equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment name should be \"NewKettlebell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment created timestamp should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment updated timestamp should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create equipment with duplicate name returns conflict")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Create equipment with duplicate name returns conflict")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateEquipmentWithDuplicateNameReturnsConflict()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create equipment with duplicate name returns conflict", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"DuplicateBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I create equipment \"DuplicateBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"conflict\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain \"already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update equipment with valid data returns updated equipment")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Update equipment with valid data returns updated equipment")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "update")]
        public async System.Threading.Tasks.Task UpdateEquipmentWithValidDataReturnsUpdatedEquipment()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update equipment with valid data returns updated equipment", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"OriginalBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I update the equipment to name \"UpdatedBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the updated equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment name should be \"UpdatedBarbell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the equipment updated timestamp should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Update equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateEquipmentWithEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update equipment with empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I update equipment \"equipment-00000000-0000-0000-0000-000000000000\" to name \"Upda" +
                        "ted\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update non-existent equipment returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Update non-existent equipment returns not found")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateNon_ExistentEquipmentReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update non-existent equipment returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I update equipment \"equipment-11111111-1111-1111-1111-111111111111\" to name \"Upda" +
                        "ted\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update equipment with duplicate name returns conflict")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Update equipment with duplicate name returns conflict")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateEquipmentWithDuplicateNameReturnsConflict()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update equipment with duplicate name returns conflict", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"ExistingBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created equipment \"OriginalDumbbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I update the second equipment to name \"ExistingBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"conflict\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete existing equipment returns no content")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Delete existing equipment returns no content")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "delete")]
        public async System.Threading.Tasks.Task DeleteExistingEquipmentReturnsNoContent()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete existing equipment returns no content", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"DeleteTestBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I delete the equipment via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"no content\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the equipment should no longer be retrievable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Delete equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task DeleteEquipmentWithEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete equipment with empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I delete equipment \"equipment-00000000-0000-0000-0000-000000000000\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete non-existent equipment returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Delete non-existent equipment returns not found")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task DeleteNon_ExistentEquipmentReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete non-existent equipment returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I delete equipment \"equipment-11111111-1111-1111-1111-111111111111\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete equipment in use returns conflict")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Delete equipment in use returns conflict")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "api")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task DeleteEquipmentInUseReturnsConflict()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "api",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete equipment in use returns conflict", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have created equipment \"InUseBarbell\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created an exercise \"Barbell Squat\" that uses the equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I delete the equipment via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"conflict\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain \"in use\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await EquipmentAPIControllerOperationsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await EquipmentAPIControllerOperationsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
