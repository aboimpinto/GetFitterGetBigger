// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Equipment
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EquipmentCRUDSimpleOperationsFeature : object, Xunit.IClassFixture<EquipmentCRUDSimpleOperationsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public EquipmentCRUDSimpleOperationsFeature(EquipmentCRUDSimpleOperationsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Equipment", "Equipment CRUD Simple Operations", "  As a fitness application\n  I want to manage equipment through CRUD operations\n " +
                    " So that I can maintain equipment data", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the database has reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Equipment CRUD full flow success")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Equipment CRUD full flow success")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "crud")]
        public async System.Threading.Tasks.Task EquipmentCRUDFullFlowSuccess()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "crud"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equipment CRUD full flow success", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/Equipment\" with body:", "{\n  \"name\": \"Test Equipment CRUD Flow\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Test Equipment CRUD Flow\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"isActive\" with value \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the response property \"id\" as \"createdEquipmentId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a PUT request to \"/api/ReferenceTables/Equipment/<createdEquipmentId>\" wit" +
                        "h body:", "{\n  \"name\": \"Test Equipment CRUD Flow Updated\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Test Equipment CRUD Flow Upd" +
                        "ated\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a DELETE request to \"/api/ReferenceTables/Equipment/<createdEquipmentId>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/Equipment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should be a JSON array", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should not contain item with property \"id\" equals \"<createdEquipment" +
                        "Id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create equipment with empty name returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Create equipment with empty name returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateEquipmentWithEmptyNameReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create equipment with empty name returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/Equipment\" with body:", "{\n  \"name\": \"\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Update equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateEquipmentWithEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update equipment with empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a PUT request to \"/api/ReferenceTables/Equipment/equipment-00000000-0000-0" +
                        "000-0000-000000000000\" with body:", "{\n  \"name\": \"Updated\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update non-existent equipment returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Update non-existent equipment returns not found")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateNon_ExistentEquipmentReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update non-existent equipment returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a PUT request to \"/api/ReferenceTables/Equipment/equipment-11111111-1111-1" +
                        "111-1111-111111111111\" with body:", "{\n  \"name\": \"Updated\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Delete equipment with empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task DeleteEquipmentWithEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete equipment with empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a DELETE request to \"/api/ReferenceTables/Equipment/equipment-00000000-000" +
                        "0-0000-0000-000000000000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete non-existent equipment returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Delete non-existent equipment returns not found")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task DeleteNon_ExistentEquipmentReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete non-existent equipment returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a DELETE request to \"/api/ReferenceTables/Equipment/equipment-11111111-111" +
                        "1-1111-1111-111111111111\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Invalid ID format returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Invalid ID format returns bad request")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.InlineDataAttribute("invalid-format", new string[0])]
        [Xunit.InlineDataAttribute("equipment-not-a-guid", new string[0])]
        [Xunit.InlineDataAttribute("12345", new string[0])]
        public async System.Threading.Tasks.Task InvalidIDFormatReturnsBadRequest(string invalidId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "equipment",
                    "validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("invalidId", invalidId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid ID format returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync(string.Format("I send a GET request to \"/api/ReferenceTables/Equipment/{0}\"", invalidId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.WhenAsync(string.Format("I send a PUT request to \"/api/ReferenceTables/Equipment/{0}\" with body:", invalidId), "{\n  \"name\": \"Test\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.WhenAsync(string.Format("I send a DELETE request to \"/api/ReferenceTables/Equipment/{0}\"", invalidId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create equipment then get by ID success")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Create equipment then get by ID success")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "crud")]
        public async System.Threading.Tasks.Task CreateEquipmentThenGetByIDSuccess()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "crud"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create equipment then get by ID success", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/Equipment\" with body:", "{\n  \"name\": \"Test GetById Equipment\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I store the response property \"id\" as \"equipmentId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"id\" should start with \"equipment-\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/Equipment/<equipmentId>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"id\" with value \"<equipmentId>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Test GetById Equipment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a DELETE request to \"/api/ReferenceTables/Equipment/<equipmentId>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update just created equipment success")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Update just created equipment success")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "crud")]
        public async System.Threading.Tasks.Task UpdateJustCreatedEquipmentSuccess()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "crud"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update just created equipment success", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/Equipment\" with body:", "{\n  \"name\": \"Test Update Equipment\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I store the response property \"id\" as \"updateEquipmentId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a PUT request to \"/api/ReferenceTables/Equipment/<updateEquipmentId>\" with" +
                        " body:", "{\n  \"name\": \"Test Update Equipment Updated\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.WhenAsync("I send a DELETE request to \"/api/ReferenceTables/Equipment/<updateEquipmentId>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create equipment trims whitespace")]
        [Xunit.TraitAttribute("FeatureTitle", "Equipment CRUD Simple Operations")]
        [Xunit.TraitAttribute("Description", "Create equipment trims whitespace")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateEquipmentTrimsWhitespace()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create equipment trims whitespace", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/Equipment\" with body:", "{\n  \"name\": \"  Test Trim Equipment  \"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Test Trim Equipment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the response property \"id\" as \"trimEquipmentId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a DELETE request to \"/api/ReferenceTables/Equipment/<trimEquipmentId>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await EquipmentCRUDSimpleOperationsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await EquipmentCRUDSimpleOperationsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
