// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.ReferenceData
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MuscleGroupsReferenceDataFeature : object, Xunit.IClassFixture<MuscleGroupsReferenceDataFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public MuscleGroupsReferenceDataFeature(MuscleGroupsReferenceDataFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ReferenceData", "Muscle Groups Reference Data", "  As a fitness application user\n  I want to access muscle group information\n  So " +
                    "that I can understand which muscles are targeted by exercises", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("the database is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the database has reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all muscle groups")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Get all muscle groups")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        public async System.Threading.Tasks.Task GetAllMuscleGroups()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "reference-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all muscle groups", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should be a JSON array", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response contains at least 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by valid ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Get muscle group by valid ID")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        public async System.Threading.Tasks.Task GetMuscleGroupByValidID()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by valid ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("the response contains at least 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the first item from the response as \"firstMuscleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups/<firstMuscleGroup.id>\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"id\" with value \"<firstMuscleGroup.id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"<firstMuscleGroup.name>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"bodyPartId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"bodyPartName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by invalid ID returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Get muscle group by invalid ID returns not found")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetMuscleGroupByInvalidIDReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by invalid ID returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups/musclegroup-99999999-9" +
                        "999-9999-9999-999999999999\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by invalid ID format returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Get muscle group by invalid ID format returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetMuscleGroupByInvalidIDFormatReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by invalid ID format returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups/invalid-id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by value case insensitive")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Get muscle group by value case insensitive")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        public async System.Threading.Tasks.Task GetMuscleGroupByValueCaseInsensitive()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by value case insensitive", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("the response contains at least 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the first item from the response as \"firstMuscleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups/ByValue/<firstMuscleGr" +
                        "oup.name>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"<firstMuscleGroup.name>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by non-existent value returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Get muscle group by non-existent value returns not found")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetMuscleGroupByNon_ExistentValueReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by non-existent value returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups/ByValue/NonExistentMus" +
                        "cleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create new muscle group successfully")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Create new muscle group successfully")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        public async System.Threading.Tasks.Task CreateNewMuscleGroupSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new muscle group successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I send a GET request to \"/api/ReferenceTables/BodyParts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("the response contains at least 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the first item from the response as \"firstBodyPart\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/MuscleGroups\" with body:", "{\n  \"name\": \"Test Muscle Group\",\n  \"bodyPartId\": \"<firstBodyPart.id>\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Test Muscle Group\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"bodyPartId\" with value \"<firstBodyPart.id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"isActive\" with value \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create muscle group without required fields returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Create muscle group without required fields returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateMuscleGroupWithoutRequiredFieldsReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create muscle group without required fields returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/MuscleGroups\" with body:", "{\n  \"name\": \"Test Muscle Group\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create duplicate muscle group returns conflict")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Create duplicate muscle group returns conflict")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateDuplicateMuscleGroupReturnsConflict()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create duplicate muscle group returns conflict", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("the response contains at least 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the first item from the response as \"existingMuscleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a POST request to \"/api/ReferenceTables/MuscleGroups\" with body:", "{\n  \"name\": \"<existingMuscleGroup.name>\",\n  \"bodyPartId\": \"<existingMuscleGroup.b" +
                        "odyPartId>\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 409", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update existing muscle group")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Update existing muscle group")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        public async System.Threading.Tasks.Task UpdateExistingMuscleGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update existing muscle group", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("the response contains at least 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the first item from the response as \"muscleGroupToUpdate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a PUT request to \"/api/ReferenceTables/MuscleGroups/<muscleGroupToUpdate.i" +
                        "d>\" with body:", "{\n  \"name\": \"Updated Muscle Group Name\",\n  \"bodyPartId\": \"<muscleGroupToUpdate.bo" +
                        "dyPartId>\",\n  \"isActive\": true\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Updated Muscle Group Name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"id\" with value \"<muscleGroupToUpdate.id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deactivate muscle group - currently not working")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Deactivate muscle group - currently not working")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        public async System.Threading.Tasks.Task DeactivateMuscleGroup_CurrentlyNotWorking()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate muscle group - currently not working", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("the response contains at least 1 item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the first item from the response as \"muscleGroupToDeactivate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a PUT request to \"/api/ReferenceTables/MuscleGroups/<muscleGroupToDeactiva" +
                        "te.id>\" with body:", "{\n  \"name\": \"<muscleGroupToDeactivate.name>\",\n  \"bodyPartId\": \"<muscleGroupToDeac" +
                        "tivate.bodyPartId>\",\n  \"isActive\": false\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"isActive\" with value \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update non-existent muscle group returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Update non-existent muscle group returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateNon_ExistentMuscleGroupReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update non-existent muscle group returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a PUT request to \"/api/ReferenceTables/MuscleGroups/musclegroup-99999999-9" +
                        "999-9999-9999-999999999999\" with body:", "{\n  \"name\": \"Updated Name\",\n  \"bodyPartId\": \"bodypart-12345678-1234-1234-1234-123" +
                        "456789012\",\n  \"isActive\": true\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete muscle group returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Delete muscle group returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        public async System.Threading.Tasks.Task DeleteMuscleGroupReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete muscle group returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I send a GET request to \"/api/ReferenceTables/BodyParts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I store the first item from the response as \"bodyPart\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I send a POST request to \"/api/ReferenceTables/MuscleGroups\" with body:", "{\n  \"name\": \"Muscle Group To Delete\",\n  \"bodyPartId\": \"<bodyPart.id>\"\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I store the response property \"id\" as \"muscleGroupId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a DELETE request to \"/api/ReferenceTables/MuscleGroups/<muscleGroupId>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Muscle group response has correct structure")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups Reference Data")]
        [Xunit.TraitAttribute("Description", "Muscle group response has correct structure")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "structure")]
        public async System.Threading.Tasks.Task MuscleGroupResponseHasCorrectStructure()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "structure"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Muscle group response has correct structure", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I store the first item from the response as \"firstMuscleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should match the schema:", @"{
  ""type"": ""array"",
  ""items"": {
    ""type"": ""object"",
    ""required"": [""id"", ""name"", ""bodyPartId"", ""bodyPartName"", ""isActive"", ""createdAt""],
    ""properties"": {
      ""id"": { 
        ""type"": ""string"",
        ""pattern"": ""^musclegroup-[a-f0-9-]+$""
      },
      ""name"": { ""type"": ""string"" },
      ""bodyPartId"": { 
        ""type"": ""string"",
        ""pattern"": ""^bodypart-[a-f0-9-]+$""
      },
      ""bodyPartName"": { ""type"": ""string"" },
      ""isActive"": { ""type"": ""boolean"" },
      ""createdAt"": { ""type"": ""string"" },
      ""updatedAt"": { ""type"": [""string"", ""null""] }
    }
  }
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await MuscleGroupsReferenceDataFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await MuscleGroupsReferenceDataFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
