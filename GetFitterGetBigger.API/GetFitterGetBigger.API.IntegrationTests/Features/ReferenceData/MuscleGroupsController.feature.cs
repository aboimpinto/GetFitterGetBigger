// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.ReferenceData
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MuscleGroupsAPIControllerOperationsFeature : object, Xunit.IClassFixture<MuscleGroupsAPIControllerOperationsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public MuscleGroupsAPIControllerOperationsFeature(MuscleGroupsAPIControllerOperationsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ReferenceData", "Muscle Groups API Controller Operations", "  As an API consumer  \n  I want to perform CRUD operations on muscle groups\n  So " +
                    "that I can manage muscle group reference data", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a \"PT-Tier\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the system has been initialized with seed data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all muscle groups returns collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get all muscle groups returns collection")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetAllMuscleGroupsReturnsCollection()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all muscle groups returns collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get all muscle groups via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive a collection of muscle groups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by valid ID returns muscle group")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get muscle group by valid ID returns muscle group")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetMuscleGroupByValidIDReturnsMuscleGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by valid ID returns muscle group", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have muscle groups available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get the first muscle group by ID via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group ID should match the requested ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group name should match the expected name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by invalid ID format returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get muscle group by invalid ID format returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetMuscleGroupByInvalidIDFormatReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by invalid ID format returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get muscle group by ID \"invalid-format\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get muscle group by empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetMuscleGroupByEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get muscle group by ID \"musclegroup-00000000-0000-0000-0000-000000000000\" via A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by non-existent ID returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get muscle group by non-existent ID returns not found")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetMuscleGroupByNon_ExistentIDReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by non-existent ID returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get muscle group by ID \"musclegroup-11111111-1111-1111-1111-111111111111\" via A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by valid value returns muscle group")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get muscle group by valid value returns muscle group")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "read")]
        public async System.Threading.Tasks.Task GetMuscleGroupByValidValueReturnsMuscleGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "read"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by valid value returns muscle group", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have muscle groups available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I get the first muscle group by value via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group name should match the requested value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get muscle group by non-existent value returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get muscle group by non-existent value returns not found")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task GetMuscleGroupByNon_ExistentValueReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by non-existent value returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I get muscle group by value \"NonExistentMuscleGroup\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get muscle group by value is case insensitive")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Get muscle group by value is case insensitive")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "read")]
        [Xunit.InlineDataAttribute("Pectoralis", new string[0])]
        [Xunit.InlineDataAttribute("pectoralis", new string[0])]
        [Xunit.InlineDataAttribute("PECTORALIS", new string[0])]
        [Xunit.InlineDataAttribute("PeCtOrAlIs", new string[0])]
        public async System.Threading.Tasks.Task GetMuscleGroupByValueIsCaseInsensitive(string casing_Variant, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "read"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("casing_variant", casing_Variant);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get muscle group by value is case insensitive", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a muscle group named \"Pectoralis\" in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync(string.Format("I get muscle group by value \"{0}\" via API", casing_Variant), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group name should be \"Pectoralis\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create muscle group with valid data returns created muscle group")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Create muscle group with valid data returns created muscle group")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "create")]
        public async System.Threading.Tasks.Task CreateMuscleGroupWithValidDataReturnsCreatedMuscleGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "create"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create muscle group with valid data returns created muscle group", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have body parts available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I create muscle group \"TestMuscleGroup\" with first available body part via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the created muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group name should be \"TestMuscleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group created timestamp should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group updated timestamp should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I clean up the created muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create muscle group with duplicate name returns conflict")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Create muscle group with duplicate name returns conflict")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateMuscleGroupWithDuplicateNameReturnsConflict()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create muscle group with duplicate name returns conflict", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have body parts available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created a muscle group \"DuplicateTestMuscleGroup\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create muscle group \"DuplicateTestMuscleGroup\" with first available body part v" +
                        "ia API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"conflict\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I clean up the created muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create muscle group with invalid body part ID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Create muscle group with invalid body part ID returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateMuscleGroupWithInvalidBodyPartIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create muscle group with invalid body part ID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create muscle group \"TestMuscleGroup\" with body part ID \"invalid-format\" via AP" +
                        "I", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update muscle group with valid data returns updated muscle group")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Update muscle group with valid data returns updated muscle group")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "update")]
        public async System.Threading.Tasks.Task UpdateMuscleGroupWithValidDataReturnsUpdatedMuscleGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update muscle group with valid data returns updated muscle group", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have body parts available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created a muscle group \"OriginalMuscleGroup\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I update the muscle group to name \"UpdatedMuscleGroup\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"ok\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive the updated muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group name should be \"UpdatedMuscleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the muscle group updated timestamp should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I clean up the created muscle group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update muscle group with empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Update muscle group with empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateMuscleGroupWithEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update muscle group with empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have body parts available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I update muscle group \"musclegroup-00000000-0000-0000-0000-000000000000\" to name " +
                        "\"UpdatedName\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update non-existent muscle group returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Update non-existent muscle group returns not found")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task UpdateNon_ExistentMuscleGroupReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update non-existent muscle group returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have body parts available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I update muscle group \"musclegroup-11111111-1111-1111-1111-111111111111\" to name " +
                        "\"UpdatedName\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete existing muscle group returns no content")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Delete existing muscle group returns no content")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "delete")]
        public async System.Threading.Tasks.Task DeleteExistingMuscleGroupReturnsNoContent()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete existing muscle group returns no content", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have body parts available in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created a muscle group \"DeleteTestMuscleGroup\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I delete the muscle group via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"no content\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the muscle group should no longer be retrievable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete muscle group with empty GUID returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Delete muscle group with empty GUID returns bad request")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task DeleteMuscleGroupWithEmptyGUIDReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete muscle group with empty GUID returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I delete muscle group \"musclegroup-00000000-0000-0000-0000-000000000000\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete non-existent muscle group returns not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Muscle Groups API Controller Operations")]
        [Xunit.TraitAttribute("Description", "Delete non-existent muscle group returns not found")]
        [Xunit.TraitAttribute("Category", "reference-data")]
        [Xunit.TraitAttribute("Category", "muscle-groups")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task DeleteNon_ExistentMuscleGroupReturnsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "reference-data",
                    "muscle-groups",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete non-existent muscle group returns not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I delete muscle group \"musclegroup-11111111-1111-1111-1111-111111111111\" via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await MuscleGroupsAPIControllerOperationsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await MuscleGroupsAPIControllerOperationsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
