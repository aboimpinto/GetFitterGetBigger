// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.ReferenceData
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExecutionProtocolsReferenceDataFeature : object, Xunit.IClassFixture<ExecutionProtocolsReferenceDataFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public ExecutionProtocolsReferenceDataFeature(ExecutionProtocolsReferenceDataFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ReferenceData", "Execution Protocols Reference Data", "  As a fitness application user\n  I want to access execution protocol reference d" +
                    "ata\n  So that I can understand different workout execution methods", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExecutionProtocolId",
                        "Value",
                        "Description",
                        "Code",
                        "TimeBase",
                        "RepBase",
                        "RestPattern",
                        "IntensityLevel",
                        "DisplayOrder",
                        "IsActive"});
            table1.AddRow(new string[] {
                        "executionprotocol-30000003-3000-4000-8000-300000000001",
                        "Standard",
                        "Standard protocol with balanced rep and time components",
                        "STANDARD",
                        "true",
                        "true",
                        "60-90 seconds between sets",
                        "Moderate to High",
                        "1",
                        "true"});
            table1.AddRow(new string[] {
                        "executionprotocol-30000003-3000-4000-8000-300000000002",
                        "Superset",
                        "Perform exercises back-to-back without rest",
                        "SUPERSET",
                        "false",
                        "true",
                        "Rest after completing both exercises",
                        "High",
                        "2",
                        "true"});
            table1.AddRow(new string[] {
                        "executionprotocol-30000003-3000-4000-8000-300000000003",
                        "Drop Set",
                        "Reduce weight after reaching failure",
                        "DROP_SET",
                        "false",
                        "true",
                        "Minimal rest between drops",
                        "Very High",
                        "3",
                        "true"});
            table1.AddRow(new string[] {
                        "executionprotocol-30000003-3000-4000-8000-300000000004",
                        "AMRAP",
                        "As Many Reps As Possible in given time",
                        "AMRAP",
                        "true",
                        "false",
                        "Fixed rest periods",
                        "High",
                        "4",
                        "true"});
            table1.AddRow(new string[] {
                        "executionprotocol-55555555-5555-5555-5555-555555555555",
                        "Inactive",
                        "This protocol is no longer used",
                        "INACTIVE",
                        "false",
                        "false",
                        "N/A",
                        "N/A",
                        "5",
                        "false"});
            await testRunner.GivenAsync("the following execution protocols exist in the database:", ((string)(null)), table1, "Given ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all active execution protocols")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get all active execution protocols")]
        public async System.Threading.Tasks.Task GetAllActiveExecutionProtocols()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all active execution protocols", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain 4 execution protocols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Type",
                            "Required"});
                table2.AddRow(new string[] {
                            "executionProtocolId",
                            "string",
                            "true"});
                table2.AddRow(new string[] {
                            "value",
                            "string",
                            "true"});
                table2.AddRow(new string[] {
                            "description",
                            "string",
                            "false"});
                table2.AddRow(new string[] {
                            "code",
                            "string",
                            "true"});
                table2.AddRow(new string[] {
                            "timeBase",
                            "boolean",
                            "true"});
                table2.AddRow(new string[] {
                            "repBase",
                            "boolean",
                            "true"});
                table2.AddRow(new string[] {
                            "restPattern",
                            "string",
                            "false"});
                table2.AddRow(new string[] {
                            "intensityLevel",
                            "string",
                            "false"});
                table2.AddRow(new string[] {
                            "displayOrder",
                            "number",
                            "true"});
                table2.AddRow(new string[] {
                            "isActive",
                            "boolean",
                            "true"});
                await testRunner.AndAsync("each execution protocol should have the following fields:", ((string)(null)), table2, "And ");
                await testRunner.AndAsync("the execution protocols should be ordered by displayOrder ascending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("no inactive protocols should be included", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all execution protocols including inactive")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get all execution protocols including inactive")]
        public async System.Threading.Tasks.Task GetAllExecutionProtocolsIncludingInactive()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all execution protocols including inactive", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols?includeInactive=true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain 5 execution protocols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should include both active and inactive protocols", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get execution protocol by valid ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get execution protocol by valid ID")]
        public async System.Threading.Tasks.Task GetExecutionProtocolByValidID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get execution protocol by valid ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/executionprotocol-30000003-3000" +
                        "-4000-8000-300000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "executionProtocolId",
                            "executionprotocol-30000003-3000-4000-8000-300000000001"});
                table3.AddRow(new string[] {
                            "value",
                            "Standard"});
                table3.AddRow(new string[] {
                            "description",
                            "Standard protocol with balanced rep and time components"});
                table3.AddRow(new string[] {
                            "code",
                            "STANDARD"});
                table3.AddRow(new string[] {
                            "timeBase",
                            "true"});
                table3.AddRow(new string[] {
                            "repBase",
                            "true"});
                table3.AddRow(new string[] {
                            "restPattern",
                            "60-90 seconds between sets"});
                table3.AddRow(new string[] {
                            "intensityLevel",
                            "Moderate to High"});
                table3.AddRow(new string[] {
                            "displayOrder",
                            "1"});
                table3.AddRow(new string[] {
                            "isActive",
                            "true"});
                await testRunner.AndAsync("the response should contain an execution protocol with:", ((string)(null)), table3, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get execution protocol by non-existent ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get execution protocol by non-existent ID")]
        public async System.Threading.Tasks.Task GetExecutionProtocolByNon_ExistentID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get execution protocol by non-existent ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/executionprotocol-00000000-0000" +
                        "-0000-0000-000000000000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "message",
                            "Execution protocol not found"});
                await testRunner.AndAsync("the response should contain an error with:", ((string)(null)), table4, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get execution protocol with invalid ID format")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get execution protocol with invalid ID format")]
        public async System.Threading.Tasks.Task GetExecutionProtocolWithInvalidIDFormat()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get execution protocol with invalid ID format", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/invalid-id-format\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "message",
                            "Execution protocol not found"});
                await testRunner.AndAsync("the response should contain an error with:", ((string)(null)), table5, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get execution protocol by valid code")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get execution protocol by valid code")]
        public async System.Threading.Tasks.Task GetExecutionProtocolByValidCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get execution protocol by valid code", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/by-code/STANDARD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "executionProtocolId",
                            "executionprotocol-30000003-3000-4000-8000-300000000001"});
                table6.AddRow(new string[] {
                            "value",
                            "Standard"});
                table6.AddRow(new string[] {
                            "code",
                            "STANDARD"});
                table6.AddRow(new string[] {
                            "isActive",
                            "true"});
                await testRunner.AndAsync("the response should contain an execution protocol with:", ((string)(null)), table6, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get execution protocol by code - case insensitive")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get execution protocol by code - case insensitive")]
        public async System.Threading.Tasks.Task GetExecutionProtocolByCode_CaseInsensitive()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get execution protocol by code - case insensitive", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/by-code/standard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "code",
                            "STANDARD"});
                await testRunner.AndAsync("the response should contain an execution protocol with:", ((string)(null)), table7, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get execution protocol by non-existent code")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get execution protocol by non-existent code")]
        public async System.Threading.Tasks.Task GetExecutionProtocolByNon_ExistentCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get execution protocol by non-existent code", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/by-code/NONEXISTENT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "message",
                            "Execution protocol not found"});
                await testRunner.AndAsync("the response should contain an error with:", ((string)(null)), table8, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get inactive execution protocol by code")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get inactive execution protocol by code")]
        public async System.Threading.Tasks.Task GetInactiveExecutionProtocolByCode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get inactive execution protocol by code", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/by-code/INACTIVE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "message",
                            "Execution protocol not found"});
                await testRunner.AndAsync("the response should contain an error with:", ((string)(null)), table9, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Response caching headers are set correctly")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Response caching headers are set correctly")]
        public async System.Threading.Tasks.Task ResponseCachingHeadersAreSetCorrectly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Response caching headers are set correctly", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have cache control headers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the cache duration should be 3600 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get inactive execution protocol by ID without includeInactive flag")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get inactive execution protocol by ID without includeInactive flag")]
        public async System.Threading.Tasks.Task GetInactiveExecutionProtocolByIDWithoutIncludeInactiveFlag()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get inactive execution protocol by ID without includeInactive flag", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/executionprotocol-55555555-5555" +
                        "-5555-5555-555555555555\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "message",
                            "Execution protocol not found"});
                await testRunner.AndAsync("the response should contain an error with:", ((string)(null)), table10, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get inactive execution protocol by ID with includeInactive flag")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Get inactive execution protocol by ID with includeInactive flag")]
        public async System.Threading.Tasks.Task GetInactiveExecutionProtocolByIDWithIncludeInactiveFlag()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get inactive execution protocol by ID with includeInactive flag", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols/executionprotocol-55555555-5555" +
                        "-5555-5555-555555555555?includeInactive=true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "executionProtocolId",
                            "executionprotocol-55555555-5555-5555-5555-555555555555"});
                table11.AddRow(new string[] {
                            "value",
                            "Inactive"});
                table11.AddRow(new string[] {
                            "isActive",
                            "false"});
                await testRunner.AndAsync("the response should contain an execution protocol with:", ((string)(null)), table11, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify time and rep base combinations")]
        [Xunit.TraitAttribute("FeatureTitle", "Execution Protocols Reference Data")]
        [Xunit.TraitAttribute("Description", "Verify time and rep base combinations")]
        public async System.Threading.Tasks.Task VerifyTimeAndRepBaseCombinations()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify time and rep base combinations", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/execution-protocols\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("at least one protocol should have both timeBase and repBase as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("at least one protocol should have timeBase true and repBase false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("at least one protocol should have timeBase false and repBase true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExecutionProtocolsReferenceDataFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExecutionProtocolsReferenceDataFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
