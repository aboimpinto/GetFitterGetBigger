// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.ReferenceData
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WorkoutCategoriesReferenceDataFeature : object, Xunit.IClassFixture<WorkoutCategoriesReferenceDataFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public WorkoutCategoriesReferenceDataFeature(WorkoutCategoriesReferenceDataFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/ReferenceData", "Workout Categories Reference Data", "  As a fitness application user\n  I want to access workout category reference dat" +
                    "a\n  So that I can organize exercises by muscle groups and movement patterns", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "WorkoutCategoryId",
                        "Value",
                        "Description",
                        "Icon",
                        "Color",
                        "PrimaryMuscleGroups",
                        "DisplayOrder",
                        "IsActive"});
            table6.AddRow(new string[] {
                        "workoutcategory-20000002-2000-4000-8000-200000000001",
                        "Upper Body - Push",
                        "Push exercises targeting chest, shoulders, and triceps",
                        "💪",
                        "#FF5722",
                        "Chest,Shoulders,Triceps",
                        "1",
                        "true"});
            table6.AddRow(new string[] {
                        "workoutcategory-20000002-2000-4000-8000-200000000002",
                        "Upper Body - Pull",
                        "Pull exercises targeting back and biceps",
                        "🏋️",
                        "#4CAF50",
                        "Back,Biceps",
                        "2",
                        "true"});
            table6.AddRow(new string[] {
                        "workoutcategory-20000002-2000-4000-8000-200000000003",
                        "Lower Body",
                        "Lower body exercises for legs and glutes",
                        "🦵",
                        "#2196F3",
                        "Quadriceps,Hamstrings,Glutes,Calves",
                        "3",
                        "true"});
            table6.AddRow(new string[] {
                        "workoutcategory-20000002-2000-4000-8000-200000000004",
                        "Core",
                        "Core stability and strength exercises",
                        "🎯",
                        "#9C27B0",
                        "Abs,Obliques,Lower Back",
                        "4",
                        "true"});
            table6.AddRow(new string[] {
                        "workoutcategory-20000002-2000-4000-8000-200000000005",
                        "Full Body",
                        "Compound exercises engaging multiple muscle groups",
                        "🏃",
                        "#FF9800",
                        "Multiple",
                        "5",
                        "true"});
            table6.AddRow(new string[] {
                        "workoutcategory-55555555-5555-5555-5555-555555555555",
                        "Inactive Category",
                        "This category is no longer used",
                        "❌",
                        "#757575",
                        "None",
                        "6",
                        "false"});
            await testRunner.GivenAsync("the following workout categories exist in the database:", ((string)(null)), table6, "Given ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all active workout categories")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get all active workout categories")]
        public async System.Threading.Tasks.Task GetAllActiveWorkoutCategories()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all active workout categories", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Type",
                            "Required"});
                table7.AddRow(new string[] {
                            "workoutCategoryId",
                            "string",
                            "true"});
                table7.AddRow(new string[] {
                            "value",
                            "string",
                            "true"});
                table7.AddRow(new string[] {
                            "description",
                            "string",
                            "false"});
                table7.AddRow(new string[] {
                            "icon",
                            "string",
                            "true"});
                table7.AddRow(new string[] {
                            "color",
                            "string",
                            "true"});
                table7.AddRow(new string[] {
                            "primaryMuscleGroups",
                            "string",
                            "false"});
                table7.AddRow(new string[] {
                            "displayOrder",
                            "number",
                            "true"});
                table7.AddRow(new string[] {
                            "isActive",
                            "boolean",
                            "true"});
                await testRunner.AndAsync("each workout category should have the following fields:", ((string)(null)), table7, "And ");
                await testRunner.AndAsync("the workout categories should be ordered by displayOrder ascending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("no inactive categories should be included", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout category by valid ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get workout category by valid ID")]
        public async System.Threading.Tasks.Task GetWorkoutCategoryByValidID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout category by valid ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories/workoutcategory-2" +
                        "0000002-2000-4000-8000-200000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "workoutCategoryId",
                            "workoutcategory-20000002-2000-4000-8000-200000000001"});
                table8.AddRow(new string[] {
                            "value",
                            "Upper Body - Push"});
                table8.AddRow(new string[] {
                            "description",
                            "Push exercises targeting chest, shoulders, and triceps"});
                table8.AddRow(new string[] {
                            "icon",
                            "💪"});
                table8.AddRow(new string[] {
                            "color",
                            "#FF5722"});
                table8.AddRow(new string[] {
                            "primaryMuscleGroups",
                            "Chest,Shoulders,Triceps"});
                table8.AddRow(new string[] {
                            "displayOrder",
                            "1"});
                table8.AddRow(new string[] {
                            "isActive",
                            "true"});
                await testRunner.AndAsync("the response should contain a workout category with:", ((string)(null)), table8, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout category by non-existent ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get workout category by non-existent ID")]
        public async System.Threading.Tasks.Task GetWorkoutCategoryByNon_ExistentID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout category by non-existent ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories/workoutcategory-1" +
                        "1111111-1111-1111-1111-111111111111\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout category by empty GUID")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get workout category by empty GUID")]
        public async System.Threading.Tasks.Task GetWorkoutCategoryByEmptyGUID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout category by empty GUID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories/workoutcategory-0" +
                        "0000000-0000-0000-0000-000000000000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout category with invalid ID format")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get workout category with invalid ID format")]
        public async System.Threading.Tasks.Task GetWorkoutCategoryWithInvalidIDFormat()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout category with invalid ID format", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories/invalid-id-format" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout category by value")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get workout category by value")]
        public async System.Threading.Tasks.Task GetWorkoutCategoryByValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout category by value", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories/ByValue/Upper Bod" +
                        "y - Push\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "workoutCategoryId",
                            "workoutcategory-20000002-2000-4000-8000-200000000001"});
                table9.AddRow(new string[] {
                            "value",
                            "Upper Body - Push"});
                table9.AddRow(new string[] {
                            "description",
                            "Push exercises targeting chest, shoulders, and triceps"});
                table9.AddRow(new string[] {
                            "icon",
                            "💪"});
                table9.AddRow(new string[] {
                            "color",
                            "#FF5722"});
                table9.AddRow(new string[] {
                            "primaryMuscleGroups",
                            "Chest,Shoulders,Triceps"});
                table9.AddRow(new string[] {
                            "displayOrder",
                            "1"});
                table9.AddRow(new string[] {
                            "isActive",
                            "true"});
                await testRunner.AndAsync("the response should contain a workout category with:", ((string)(null)), table9, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout category by non-existent value")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get workout category by non-existent value")]
        public async System.Threading.Tasks.Task GetWorkoutCategoryByNon_ExistentValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout category by non-existent value", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories/ByValue/Non-Exist" +
                        "ent Category\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout category by empty value")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Get workout category by empty value")]
        public async System.Threading.Tasks.Task GetWorkoutCategoryByEmptyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout category by empty value", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories/ByValue/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify emoji support in icon field")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Categories Reference Data")]
        [Xunit.TraitAttribute("Description", "Verify emoji support in icon field")]
        public async System.Threading.Tasks.Task VerifyEmojiSupportInIconField()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify emoji support in icon field", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/WorkoutCategories\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("each category\'s icon field should contain a valid emoji character", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await WorkoutCategoriesReferenceDataFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await WorkoutCategoriesReferenceDataFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
