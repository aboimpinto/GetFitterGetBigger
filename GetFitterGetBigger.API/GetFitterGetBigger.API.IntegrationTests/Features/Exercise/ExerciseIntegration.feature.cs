// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Exercise
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExerciseIntegrationFeature : object, Xunit.IClassFixture<ExerciseIntegrationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public ExerciseIntegrationFeature(ExerciseIntegrationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Exercise", "Exercise Integration", "  As a fitness application\n  I want to manage exercises with various attributes\n " +
                    " So that I can provide comprehensive exercise information", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the database has reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleGroups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            await testRunner.AndAsync("I store the first item from the response as \"firstMuscleGroup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/MuscleRoles\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            await testRunner.AndAsync("I store the first item from the response as \"firstMuscleRole\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            await testRunner.WhenAsync("I send a GET request to \"/api/ReferenceTables/ExerciseTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            await testRunner.AndAsync("I store the first item from the response as \"firstExerciseType\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with coach notes returns created exercise with ordered notes")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Create exercise with coach notes returns created exercise with ordered notes")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        public async System.Threading.Tasks.Task CreateExerciseWithCoachNotesReturnsCreatedExerciseWithOrderedNotes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with coach notes returns created exercise with ordered notes", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/exercises\" with body:", @"{
  ""name"": ""Integration Test Squat"",
  ""description"": ""Test squat exercise with coach notes"",
  ""coachNotes"": [
    {
      ""text"": ""Warm up properly first"",
      ""order"": 1
    },
    {
      ""text"": ""Keep your back straight"",
      ""order"": 2
    },
    {
      ""text"": ""Control the descent"",
      ""order"": 3
    }
  ],
  ""exerciseTypeIds"": [""<firstExerciseType.id>""],
  ""isUnilateral"": false,
  ""difficultyId"": ""difficultylevel-8a8adb1d-24d2-4979-a5a6-0d760e6da24b"",
  ""kineticChainId"": ""kineticchaintype-f5d5a2de-9c4e-4b87-b8c3-5d1e17d0b1f4"",
  ""exerciseWeightTypeId"": ""exerciseweighttype-b2e4d3c5-6a7b-5c8d-9e0f-1a2b3c4d5e6f"",
  ""muscleGroups"": [
    {
      ""muscleGroupId"": ""<firstMuscleGroup.id>"",
      ""muscleRoleId"": ""<firstMuscleRole.id>""
    }
  ],
  ""equipmentIds"": [],
  ""bodyPartIds"": [],
  ""movementPatternIds"": [],
  ""videoUrl"": ""https://example.com/squat.mp4"",
  ""imageUrl"": ""https://example.com/squat.jpg""
}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Integration Test Squat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"description\" with value \"Test squat exercise w" +
                        "ith coach notes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"videoUrl\" with value \"https://example.com/squa" +
                        "t.mp4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"imageUrl\" with value \"https://example.com/squa" +
                        "t.jpg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"coachNotes\" as array with length 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[0].text\" should be \"Warm up properly first\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[0].order\" should be \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[1].text\" should be \"Keep your back straight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[1].order\" should be \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[2].text\" should be \"Control the descent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[2].order\" should be \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with multiple exercise types returns created exercise with all ty" +
            "pes")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Create exercise with multiple exercise types returns created exercise with all ty" +
            "pes")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        public async System.Threading.Tasks.Task CreateExerciseWithMultipleExerciseTypesReturnsCreatedExerciseWithAllTypes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with multiple exercise types returns created exercise with all ty" +
                    "pes", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/exercises\" with body:", @"{
  ""name"": ""Integration Test Compound Exercise"",
  ""description"": ""Test exercise with multiple types"",
  ""coachNotes"": [],
  ""exerciseTypeIds"": [""exercisetype-22334455-6677-8899-aabb-ccddeeff0011"", ""exercisetype-33445566-7788-99aa-bbcc-ddeeff001122""],
  ""isUnilateral"": false,
  ""difficultyId"": ""difficultylevel-8a8adb1d-24d2-4979-a5a6-0d760e6da24b"",
  ""kineticChainId"": ""kineticchaintype-f5d5a2de-9c4e-4b87-b8c3-5d1e17d0b1f4"",
  ""exerciseWeightTypeId"": ""exerciseweighttype-b2e4d3c5-6a7b-5c8d-9e0f-1a2b3c4d5e6f"",
  ""muscleGroups"": [
    {
      ""muscleGroupId"": ""<firstMuscleGroup.id>"",
      ""muscleRoleId"": ""<firstMuscleRole.id>""
    }
  ],
  ""equipmentIds"": [],
  ""bodyPartIds"": [],
  ""movementPatternIds"": []
}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Integration Test Compound Ex" +
                        "ercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with empty coach notes returns created exercise with no notes")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Create exercise with empty coach notes returns created exercise with no notes")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        public async System.Threading.Tasks.Task CreateExerciseWithEmptyCoachNotesReturnsCreatedExerciseWithNoNotes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with empty coach notes returns created exercise with no notes", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/exercises\" with body:", @"{
  ""name"": ""Exercise Without Notes"",
  ""description"": ""Test exercise with no coach notes"",
  ""coachNotes"": [],
  ""exerciseTypeIds"": [""<firstExerciseType.id>""],
  ""isUnilateral"": false,
  ""difficultyId"": ""difficultylevel-8a8adb1d-24d2-4979-a5a6-0d760e6da24b"",
  ""kineticChainId"": ""kineticchaintype-f5d5a2de-9c4e-4b87-b8c3-5d1e17d0b1f4"",
  ""exerciseWeightTypeId"": ""exerciseweighttype-b2e4d3c5-6a7b-5c8d-9e0f-1a2b3c4d5e6f"",
  ""muscleGroups"": [
    {
      ""muscleGroupId"": ""<firstMuscleGroup.id>"",
      ""muscleRoleId"": ""<firstMuscleRole.id>""
    }
  ],
  ""equipmentIds"": [],
  ""bodyPartIds"": [],
  ""movementPatternIds"": []
}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Exercise Without Notes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"coachNotes\" as array with length 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with rest and other types returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Create exercise with rest and other types returns bad request")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "rest")]
        public async System.Threading.Tasks.Task CreateExerciseWithRestAndOtherTypesReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "rest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with rest and other types returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create an exercise with rest and other types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I submit the exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain \"REST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with only rest type returns created exercise")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Create exercise with only rest type returns created exercise")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "rest")]
        public async System.Threading.Tasks.Task CreateExerciseWithOnlyRestTypeReturnsCreatedExercise()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "rest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with only rest type returns created exercise", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create a rest exercise named \"Integration Test Rest Period\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I submit the exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Integration Test Rest Period" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update exercise add coach notes updates exercise with new notes")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Update exercise add coach notes updates exercise with new notes")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "update")]
        public async System.Threading.Tasks.Task UpdateExerciseAddCoachNotesUpdatesExerciseWithNewNotes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update exercise add coach notes updates exercise with new notes", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I update the exercise \"Update Test Exercise\" with new coach notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I send a PUT request to update the exercise with coach notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Updated Test Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"coachNotes\" as array with length 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[0].text\" should be \"First step\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[0].order\" should be \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[1].text\" should be \"Second step\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[1].order\" should be \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[2].text\" should be \"Third step\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"coachNotes[2].order\" should be \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update exercise modify existing coach notes updates notes correctly")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Update exercise modify existing coach notes updates notes correctly")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "update")]
        public async System.Threading.Tasks.Task UpdateExerciseModifyExistingCoachNotesUpdatesNotesCorrectly()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update exercise modify existing coach notes updates notes correctly", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I update the exercise \"Exercise With Notes\" with new coach notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I send a PUT request to update the exercise with coach notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Updated Test Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"coachNotes\" as array with length 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update exercise change exercise types updates types correctly")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Update exercise change exercise types updates types correctly")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "update")]
        public async System.Threading.Tasks.Task UpdateExerciseChangeExerciseTypesUpdatesTypesCorrectly()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "update"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update exercise change exercise types updates types correctly", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I update the exercise \"Multi-Type Exercise\" with new coach notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I send a PUT request to update exercise types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Multi-Type Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update exercise with rest type and other types returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Integration")]
        [Xunit.TraitAttribute("Description", "Update exercise with rest type and other types returns bad request")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "update")]
        [Xunit.TraitAttribute("Category", "rest")]
        public async System.Threading.Tasks.Task UpdateExerciseWithRestTypeAndOtherTypesReturnsBadRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "update",
                    "rest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update exercise with rest type and other types returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I update the exercise \"Normal Exercise\" with new coach notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I send a PUT request to update with rest and other types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain \"REST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExerciseIntegrationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExerciseIntegrationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
