// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Exercise
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExerciseLinkCircularReferencePreventionFeature : object, Xunit.IClassFixture<ExerciseLinkCircularReferencePreventionFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public ExerciseLinkCircularReferencePreventionFeature(ExerciseLinkCircularReferencePreventionFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Exercise", "Exercise Link Circular Reference Prevention", "  As a system administrator\n  I want to prevent circular references in exercise l" +
                    "inks\n  So that exercise chains maintain logical order and don\'t create infinite " +
                    "loops", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a \"PT-Tier\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the system has been initialized with seed data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create link with direct circular reference should fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Circular Reference Prevention")]
        [Xunit.TraitAttribute("Description", "Create link with direct circular reference should fail")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "circular-reference")]
        public async System.Threading.Tasks.Task CreateLinkWithDirectCircularReferenceShouldFail()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "links",
                    "circular-reference"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create link with direct circular reference should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have an exercise named \"Exercise A\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Exercise B\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Exercise A\" to \"Exercise B\" with link type \"Warmup\" a" +
                        "nd display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Exercise B\" to \"Exercise A\" with link type \"Warmu" +
                        "p\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create link with indirect circular reference should fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Circular Reference Prevention")]
        [Xunit.TraitAttribute("Description", "Create link with indirect circular reference should fail")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "circular-reference")]
        public async System.Threading.Tasks.Task CreateLinkWithIndirectCircularReferenceShouldFail()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "links",
                    "circular-reference"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create link with indirect circular reference should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have an exercise named \"Exercise A Chain\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Exercise B Chain\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Exercise C Chain\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Exercise A Chain\" to \"Exercise B Chain\" with link typ" +
                        "e \"Warmup\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Exercise B Chain\" to \"Exercise C Chain\" with link typ" +
                        "e \"Warmup\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Exercise C Chain\" to \"Exercise A Chain\" with link" +
                        " type \"Warmup\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create link with complex circular reference should fail")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Circular Reference Prevention")]
        [Xunit.TraitAttribute("Description", "Create link with complex circular reference should fail")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "circular-reference")]
        public async System.Threading.Tasks.Task CreateLinkWithComplexCircularReferenceShouldFail()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "links",
                    "circular-reference"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create link with complex circular reference should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have an exercise named \"Complex A\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Complex B\" with exercise types \"Workout,Warmup,Cooldown" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Complex C\" with exercise types \"Workout,Cooldown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Complex D\" with exercise types \"Workout,Warmup,Cooldown" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Complex A\" to \"Complex B\" with link type \"Warmup\" and" +
                        " display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Complex B\" to \"Complex C\" with link type \"Cooldown\" a" +
                        "nd display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Complex C\" to \"Complex D\" with link type \"Cooldown\" a" +
                        "nd display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Complex D\" to \"Complex A\" with link type \"Warmup\"" +
                        " and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be \"bad request\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create non-circular complex structure should succeed")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Circular Reference Prevention")]
        [Xunit.TraitAttribute("Description", "Create non-circular complex structure should succeed")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "success")]
        public async System.Threading.Tasks.Task CreateNon_CircularComplexStructureShouldSucceed()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "links",
                    "success"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create non-circular complex structure should succeed", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have an exercise named \"Root Exercise\" with exercise types \"Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Warmup 1\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Warmup 2\" with exercise types \"Workout,Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Cooldown 1\" with exercise types \"Workout,Cooldown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Root Exercise\" to \"Warmup 1\" with link type \"Warmup\" " +
                        "and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Root Exercise\" to \"Warmup 2\" with link type \"Warmup\" " +
                        "and display order 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Root Exercise\" to \"Cooldown 1\" with link type \"Co" +
                        "oldown\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the exercise link should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the link should have target exercise \"Cooldown 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the link should have link type \"Cooldown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the link should have display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Valid exercise link creation without circular reference")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Circular Reference Prevention")]
        [Xunit.TraitAttribute("Description", "Valid exercise link creation without circular reference")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "success")]
        public async System.Threading.Tasks.Task ValidExerciseLinkCreationWithoutCircularReference()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "integration",
                    "links",
                    "success"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid exercise link creation without circular reference", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have an exercise named \"Source Exercise\" with exercise types \"Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Target Exercise\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Source Exercise\" to \"Target Exercise\" with link t" +
                        "ype \"Warmup\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the exercise link should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the link should have target exercise \"Target Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the link should have link type \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExerciseLinkCircularReferencePreventionFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExerciseLinkCircularReferencePreventionFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
