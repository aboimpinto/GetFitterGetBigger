// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Exercise
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExerciseTypesAssignmentFeature : object, Xunit.IClassFixture<ExerciseTypesAssignmentFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public ExerciseTypesAssignmentFeature(ExerciseTypesAssignmentFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Exercise", "Exercise Types Assignment", "  As a fitness application\n  I want to manage exercise types for exercises\n  So t" +
                    "hat I can categorize exercises appropriately", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the database has reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with single exercise type")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Types Assignment")]
        [Xunit.TraitAttribute("Description", "Create exercise with single exercise type")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "types")]
        public async System.Threading.Tasks.Task CreateExerciseWithSingleExerciseType()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "types"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with single exercise type", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create a workout exercise named \"Single Type Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I set the difficulty to \"Beginner\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the kinetic chain type to \"Compound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the weight type to \"Weight Required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I add muscle group \"Chest\" as \"Primary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I submit the exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"exerciseTypes\" should be a JSON array", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"exerciseTypes[0].value\" should be \"Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with multiple exercise types")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Types Assignment")]
        [Xunit.TraitAttribute("Description", "Create exercise with multiple exercise types")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "types")]
        public async System.Threading.Tasks.Task CreateExerciseWithMultipleExerciseTypes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "types"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with multiple exercise types", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create a workout exercise named \"Multi Type Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I set the difficulty to \"Beginner\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the kinetic chain type to \"Compound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the weight type to \"Weight Required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I add muscle group \"Chest\" as \"Primary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I add exercise type \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I add exercise type \"Cooldown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I submit the exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"exerciseTypes\" should be a JSON array", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with no exercise types")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Types Assignment")]
        [Xunit.TraitAttribute("Description", "Create exercise with no exercise types")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "types")]
        public async System.Threading.Tasks.Task CreateExerciseWithNoExerciseTypes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "types"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with no exercise types", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create an exercise with no types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I set the difficulty to \"Beginner\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the kinetic chain type to \"Compound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the weight type to \"Weight Required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I submit the exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"exerciseTypes\" should be a JSON array", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with mixed valid and invalid exercise type IDs filters invalid on" +
            "es")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Types Assignment")]
        [Xunit.TraitAttribute("Description", "Create exercise with mixed valid and invalid exercise type IDs filters invalid on" +
            "es")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "types")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateExerciseWithMixedValidAndInvalidExerciseTypeIDsFiltersInvalidOnes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "types",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with mixed valid and invalid exercise type IDs filters invalid on" +
                    "es", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create an exercise with mixed valid and invalid types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I set the difficulty to \"Beginner\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the kinetic chain type to \"Compound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the weight type to \"Weight Required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I add muscle group \"Chest\" as \"Primary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I submit the exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"exerciseTypes\" should be a JSON array", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"exerciseTypes[0].value\" should be \"Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create exercise with duplicate exercise type IDs deduplicates types")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Types Assignment")]
        [Xunit.TraitAttribute("Description", "Create exercise with duplicate exercise type IDs deduplicates types")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "types")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task CreateExerciseWithDuplicateExerciseTypeIDsDeduplicatesTypes()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "types",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create exercise with duplicate exercise type IDs deduplicates types", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I create an exercise with duplicate types: \"Workout, Workout, Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I set the difficulty to \"Beginner\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the kinetic chain type to \"Compound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I set the weight type to \"Weight Required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I submit the exercise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response property \"exerciseTypes\" should be a JSON array", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"exerciseTypes\" as array with length 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExerciseTypesAssignmentFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExerciseTypesAssignmentFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
