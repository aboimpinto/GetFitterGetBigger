// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Exercise
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExerciseLinkEnhancements_Four_WayLinkingSystemFeature : object, Xunit.IClassFixture<ExerciseLinkEnhancements_Four_WayLinkingSystemFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public ExerciseLinkEnhancements_Four_WayLinkingSystemFeature(ExerciseLinkEnhancements_Four_WayLinkingSystemFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Exercise", "Exercise Link Enhancements - Four-Way Linking System", "    As a fitness system\n    I want to support enhanced exercise linking with four" +
                    " link types (WARMUP, COOLDOWN, WORKOUT, ALTERNATIVE)\n    So that I can create co" +
                    "mprehensive workout relationships with bidirectional linking", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("the system has been initialized with seed data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create WARMUP link should create bidirectional WARMUP/WORKOUT links")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Create WARMUP link should create bidirectional WARMUP/WORKOUT links")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "bidirectional")]
        [Xunit.TraitAttribute("Category", "warmup")]
        public async System.Threading.Tasks.Task CreateWARMUPLinkShouldCreateBidirectionalWARMUPWORKOUTLinks()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "bidirectional",
                    "warmup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create WARMUP link should create bidirectional WARMUP/WORKOUT links", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Burpees\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Jumping-Jacks\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Burpees\" to \"Jumping-Jacks\" with link type \"WARMU" +
                        "P\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the exercise link should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the link should have target exercise \"Jumping-Jacks\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the link should have link type \"WARMUP\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the link should have display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("a reverse link should exist from \"Jumping-Jacks\" to \"Burpees\" with link type \"WOR" +
                        "KOUT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("both links should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("both links should have server-assigned display orders", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create COOLDOWN link should create bidirectional COOLDOWN/WORKOUT links")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Create COOLDOWN link should create bidirectional COOLDOWN/WORKOUT links")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "bidirectional")]
        [Xunit.TraitAttribute("Category", "cooldown")]
        public async System.Threading.Tasks.Task CreateCOOLDOWNLinkShouldCreateBidirectionalCOOLDOWNWORKOUTLinks()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "bidirectional",
                    "cooldown"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create COOLDOWN link should create bidirectional COOLDOWN/WORKOUT links", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Deadlifts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Hamstring-Stretch\" with exercise types \"Cooldown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Deadlifts\" to \"Hamstring-Stretch\" with link type " +
                        "\"COOLDOWN\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the exercise link should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the link should have link type \"COOLDOWN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("a reverse link should exist from \"Hamstring-Stretch\" to \"Deadlifts\" with link typ" +
                        "e \"WORKOUT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("both links should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create ALTERNATIVE link should create bidirectional ALTERNATIVE links")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Create ALTERNATIVE link should create bidirectional ALTERNATIVE links")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "bidirectional")]
        [Xunit.TraitAttribute("Category", "alternative")]
        public async System.Threading.Tasks.Task CreateALTERNATIVELinkShouldCreateBidirectionalALTERNATIVELinks()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "bidirectional",
                    "alternative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create ALTERNATIVE link should create bidirectional ALTERNATIVE links", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Push-ups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have a workout exercise named \"Incline-Push-ups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Push-ups\" to \"Incline-Push-ups\" with link type \"A" +
                        "LTERNATIVE\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the exercise link should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the link should have link type \"ALTERNATIVE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("a reverse link should exist from \"Incline-Push-ups\" to \"Push-ups\" with link type " +
                        "\"ALTERNATIVE\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("both links should be active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create link from REST exercise should be blocked")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Create link from REST exercise should be blocked")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "rest")]
        public async System.Threading.Tasks.Task CreateLinkFromRESTExerciseShouldBeBlocked()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "validation",
                    "rest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create link from REST exercise should be blocked", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a rest exercise named \"Rest-Period\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have a workout exercise named \"Target-Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Rest-Period\" to \"Target-Exercise\" with link type " +
                        "\"WARMUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the request should fail with bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error should contain \"REST exercises cannot have links\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create link to REST exercise should be blocked")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Create link to REST exercise should be blocked")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "rest")]
        public async System.Threading.Tasks.Task CreateLinkToRESTExerciseShouldBeBlocked()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "validation",
                    "rest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create link to REST exercise should be blocked", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Source-Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have a rest exercise named \"Rest-Target\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Source-Exercise\" to \"Rest-Target\" with link type " +
                        "\"WARMUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the request should fail with bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error should contain \"cannot be created to REST exercises\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete link should remove both bidirectional links")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Delete link should remove both bidirectional links")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "bidirectional")]
        [Xunit.TraitAttribute("Category", "deletion")]
        public async System.Threading.Tasks.Task DeleteLinkShouldRemoveBothBidirectionalLinks()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "bidirectional",
                    "deletion"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete link should remove both bidirectional links", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Squat-Main\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Air-Squat-Warmup\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Squat-Main\" to \"Air-Squat-Warmup\" with link type \"WAR" +
                        "MUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I delete the exercise link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the link should be deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the forward link should not exist in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the reverse link should not exist in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Existing string-based links should work with enhanced API")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Existing string-based links should work with enhanced API")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "migration")]
        [Xunit.TraitAttribute("Category", "backward_compatibility")]
        public async System.Threading.Tasks.Task ExistingString_BasedLinksShouldWorkWithEnhancedAPI()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "migration",
                    "backward_compatibility"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Existing string-based links should work with enhanced API", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Legacy-Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Legacy-Warmup\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Legacy-Exercise\" to \"Legacy-Warmup\" with link typ" +
                        "e \"Warmup\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the exercise link should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the link should have link type \"WARMUP\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I get all links for exercise \"Legacy-Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive 1 exercise link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the link should be accessible via enhanced API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the link should have correct enum mapping", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Direct WORKOUT link creation should be blocked")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Direct WORKOUT link creation should be blocked")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "workout_direct")]
        public async System.Threading.Tasks.Task DirectWORKOUTLinkCreationShouldBeBlocked()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "validation",
                    "workout_direct"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Direct WORKOUT link creation should be blocked", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Direct-Source\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have a workout exercise named \"Direct-Target\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Direct-Source\" to \"Direct-Target\" with link type " +
                        "\"WORKOUT\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the request should fail with bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error should contain \"WORKOUT links are automatically created as reverse link" +
                        "s\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Display order should be calculated server-side for sequential links")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Display order should be calculated server-side for sequential links")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "display_order")]
        [Xunit.TraitAttribute("Category", "server_side")]
        public async System.Threading.Tasks.Task DisplayOrderShouldBeCalculatedServer_SideForSequentialLinks()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "display_order",
                    "server_side"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display order should be calculated server-side for sequential links", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Multi-Link-Source\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Warmup-1\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Warmup-2\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Warmup-3\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Multi-Link-Source\" to \"Warmup-1\" with link type \"" +
                        "WARMUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I create an exercise link from \"Multi-Link-Source\" to \"Warmup-2\" with link type \"" +
                        "WARMUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I create an exercise link from \"Multi-Link-Source\" to \"Warmup-3\" with link type \"" +
                        "WARMUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("all links should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the links should have sequential display orders regardless of input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("each reverse link should have independent display order calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="WARMUP link type compatibility validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "WARMUP link type compatibility validation")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "type_compatibility")]
        public async System.Threading.Tasks.Task WARMUPLinkTypeCompatibilityValidation()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "validation",
                    "type_compatibility"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WARMUP link type compatibility validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"WARMUP-Source\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Cooldown-Target\" with exercise types \"Cooldown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"WARMUP-Source\" to \"Cooldown-Target\" with link typ" +
                        "e \"WARMUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the request should fail with bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error should contain \"WARMUP links can only be created to exercises with Warm" +
                        "up exercise type\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="COOLDOWN link type compatibility validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "COOLDOWN link type compatibility validation")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "type_compatibility")]
        public async System.Threading.Tasks.Task COOLDOWNLinkTypeCompatibilityValidation()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "validation",
                    "type_compatibility"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("COOLDOWN link type compatibility validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"COOLDOWN-Source\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Warmup-Target\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"COOLDOWN-Source\" to \"Warmup-Target\" with link typ" +
                        "e \"COOLDOWN\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the request should fail with bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error should contain \"COOLDOWN links can only be created to exercises with Co" +
                        "oldown exercise type\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Comprehensive four-way linking workflow")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Comprehensive four-way linking workflow")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "comprehensive")]
        [Xunit.TraitAttribute("Category", "workflow")]
        public async System.Threading.Tasks.Task ComprehensiveFour_WayLinkingWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "comprehensive",
                    "workflow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comprehensive four-way linking workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Comprehensive-Main\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an exercise named \"Dynamic-Warmup\" with exercise types \"Warmup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have an exercise named \"Static-Cooldown\" with exercise types \"Cooldown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have a workout exercise named \"Alternative-Exercise\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Comprehensive-Main\" to \"Dynamic-Warmup\" with link" +
                        " type \"WARMUP\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.AndAsync("I create an exercise link from \"Comprehensive-Main\" to \"Static-Cooldown\" with lin" +
                        "k type \"COOLDOWN\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I create an exercise link from \"Comprehensive-Main\" to \"Alternative-Exercise\" wit" +
                        "h link type \"ALTERNATIVE\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.ThenAsync("all exercise links should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.WhenAsync("I get all links for exercise \"Comprehensive-Main\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive 3 exercise links", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the links should include \"WARMUP\", \"COOLDOWN\", and \"ALTERNATIVE\" types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("each link should have a corresponding reverse link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the reverse links should have types \"WORKOUT\", \"WORKOUT\", and \"ALTERNATIVE\" respe" +
                        "ctively", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Duplicate bidirectional links should be prevented")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Duplicate bidirectional links should be prevented")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "duplicate")]
        [Xunit.TraitAttribute("Category", "prevention")]
        public async System.Threading.Tasks.Task DuplicateBidirectionalLinksShouldBePrevented()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "duplicate",
                    "prevention"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate bidirectional links should be prevented", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Duplicate-Test-A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have a workout exercise named \"Duplicate-Test-B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("I have created a link from \"Duplicate-Test-A\" to \"Duplicate-Test-B\" with link typ" +
                        "e \"ALTERNATIVE\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Duplicate-Test-B\" to \"Duplicate-Test-A\" with link" +
                        " type \"ALTERNATIVE\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the request should fail with bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error should contain \"bidirectional link already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid link type enum should be rejected")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Link Enhancements - Four-Way Linking System")]
        [Xunit.TraitAttribute("Description", "Invalid link type enum should be rejected")]
        [Xunit.TraitAttribute("Category", "exercise")]
        [Xunit.TraitAttribute("Category", "links")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.TraitAttribute("Category", "enhancement")]
        [Xunit.TraitAttribute("Category", "enum")]
        [Xunit.TraitAttribute("Category", "validation")]
        public async System.Threading.Tasks.Task InvalidLinkTypeEnumShouldBeRejected()
        {
            string[] tagsOfScenario = new string[] {
                    "exercise",
                    "links",
                    "integration",
                    "enhancement",
                    "enum",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid link type enum should be rejected", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I have a workout exercise named \"Enum-Test-Source\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have a workout exercise named \"Enum-Test-Target\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I create an exercise link from \"Enum-Test-Source\" to \"Enum-Test-Target\" with link" +
                        " type \"INVALID_TYPE\" and display order 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the request should fail with bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error should contain \"Link type must be \'Warmup\', \'Cooldown\', \'WARMUP\', \'COOL" +
                        "DOWN\', \'WORKOUT\', or \'ALTERNATIVE\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExerciseLinkEnhancements_Four_WayLinkingSystemFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExerciseLinkEnhancements_Four_WayLinkingSystemFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
