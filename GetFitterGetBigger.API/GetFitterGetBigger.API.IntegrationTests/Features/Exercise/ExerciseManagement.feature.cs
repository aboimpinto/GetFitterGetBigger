// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Exercise
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ExerciseManagementFeature : object, Xunit.IClassFixture<ExerciseManagementFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public ExerciseManagementFeature(ExerciseManagementFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Exercise", "Exercise Management", "    As a personal trainer\n    I want to manage exercises\n    So that I can create" +
                    " workout plans for my clients", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a \"PT-Tier\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the database has reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new workout exercise successfully")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "Create a new workout exercise successfully")]
        public async System.Threading.Tasks.Task CreateANewWorkoutExerciseSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new workout exercise successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a POST request to \"/api/exercises\" with body:", @"{
    ""name"": ""Bench Press"",
    ""description"": ""Classic chest exercise"",
    ""difficultyId"": ""difficultylevel-00000000-0000-0000-0000-000000000001"",
    ""kineticChainId"": ""kineticchaintype-00000000-0000-0000-0000-000000000001"",
    ""exerciseWeightTypeId"": ""exerciseweighttype-00000000-0000-0000-0000-000000000001"",
    ""exerciseTypeIds"": [""exercisetype-00000000-0000-0000-0000-000000000001""],
    ""muscleGroups"": [
        {
            ""muscleGroupId"": ""musclegroup-00000000-0000-0000-0000-000000000001"",
            ""muscleRoleId"": ""musclerole-00000000-0000-0000-0000-000000000001""
        }
    ],
    ""equipmentIds"": [""equipment-00000000-0000-0000-0000-000000000001""],
    ""bodyPartIds"": [""bodypart-00000000-0000-0000-0000-000000000001""],
    ""movementPatternIds"": [],
    ""coachNotes"": [
        {
            ""text"": ""Keep your back flat on the bench"",
            ""order"": 1
        }
    ],
    ""isUnilateral"": false
}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Bench Press\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"description\" with value \"Classic chest exercis" +
                        "e\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the database should contain 1 exercise records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to create duplicate exercise")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "Fail to create duplicate exercise")]
        public async System.Threading.Tasks.Task FailToCreateDuplicateExercise()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fail to create duplicate exercise", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "DifficultyLevel"});
                table8.AddRow(new string[] {
                            "Squat",
                            "Leg exercise",
                            "Beginner"});
                await testRunner.GivenAsync("the following exercise exists:", ((string)(null)), table8, "Given ");
                await testRunner.WhenAsync("I send a POST request to \"/api/exercises\" with body:", "{\n    \"name\": \"Squat\",\n    \"description\": \"Another leg exercise\",\n    \"difficulty" +
                        "Id\": \"difficultylevel-00000000-0000-0000-0000-000000000001\",\n    \"exerciseTypeId" +
                        "s\": [\"exercisetype-00000000-0000-0000-0000-000000000001\"]\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 409", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain \"already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update existing exercise")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "Update existing exercise")]
        public async System.Threading.Tasks.Task UpdateExistingExercise()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update existing exercise", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "DifficultyLevel"});
                table9.AddRow(new string[] {
                            "Deadlift",
                            "Back exercise",
                            "Intermediate"});
                await testRunner.GivenAsync("the following exercise exists:", ((string)(null)), table9, "Given ");
                await testRunner.WhenAsync("I send a PUT request to \"/api/exercises/<Deadlift.Id>\" with body:", "{\n    \"name\": \"Romanian Deadlift\",\n    \"description\": \"Updated back exercise focu" +
                        "sing on hamstrings\",\n    \"difficultyId\": \"difficultylevel-00000000-0000-0000-000" +
                        "0-000000000003\"\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Romanian Deadlift\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"description\" with value \"Updated back exercise" +
                        " focusing on hamstrings\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete an exercise")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "Delete an exercise")]
        public async System.Threading.Tasks.Task DeleteAnExercise()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an exercise", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "DifficultyLevel"});
                table10.AddRow(new string[] {
                            "Bicep Curl",
                            "Arm isolation",
                            "Beginner"});
                await testRunner.GivenAsync("the following exercise exists:", ((string)(null)), table10, "Given ");
                await testRunner.WhenAsync("I send a DELETE request to \"/api/exercises/<BicepCurl.Id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the exercise with id \"<BicepCurl.Id>\" should not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get exercise by ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "Get exercise by ID")]
        public async System.Threading.Tasks.Task GetExerciseByID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get exercise by ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "DifficultyLevel"});
                table11.AddRow(new string[] {
                            "Pull-ups",
                            "Upper body compound",
                            "Advanced"});
                await testRunner.GivenAsync("the following exercise exists:", ((string)(null)), table11, "Given ");
                await testRunner.WhenAsync("I send a GET request to \"/api/exercises/<Pullups.Id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"name\" with value \"Pull-ups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"description\" with value \"Upper body compound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List all exercises with pagination")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "List all exercises with pagination")]
        public async System.Threading.Tasks.Task ListAllExercisesWithPagination()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all exercises with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("the database has reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I send a GET request to \"/api/exercises?pageNumber=1&pageSize=10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"items\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"totalCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"pageNumber\" with value \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"pageSize\" with value \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify authorization for exercise management")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "Verify authorization for exercise management")]
        [Xunit.TraitAttribute("Category", "authorization")]
        [Xunit.InlineDataAttribute("PT-Tier", "201", "# TODO: Confirm PT can create", new string[0])]
        [Xunit.InlineDataAttribute("Admin-Tier", "201", "# TODO: Confirm Admin can create", new string[0])]
        [Xunit.InlineDataAttribute("Free-Tier", "403", "# TODO: Confirm Free cannot create", new string[0])]
        public async System.Threading.Tasks.Task VerifyAuthorizationForExerciseManagement(string role, string expectedStatus, string notes, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "authorization"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            argumentsOfScenario.Add("expectedStatus", expectedStatus);
            argumentsOfScenario.Add("notes", notes);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify authorization for exercise management", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync(string.Format("I am authenticated as a \"{0}\"", role), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I send a POST request to \"/api/exercises\" with body:", "{\n    \"name\": \"Test Exercise\",\n    \"description\": \"Test\",\n    \"difficultyId\": \"di" +
                        "fficultylevel-00000000-0000-0000-0000-000000000001\",\n    \"exerciseTypeIds\": [\"ex" +
                        "ercisetype-00000000-0000-0000-0000-000000000001\"]\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync(string.Format("the response status should be {0}", expectedStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unauthenticated access is denied")]
        [Xunit.TraitAttribute("FeatureTitle", "Exercise Management")]
        [Xunit.TraitAttribute("Description", "Unauthenticated access is denied")]
        [Xunit.TraitAttribute("Category", "authorization")]
        public async System.Threading.Tasks.Task UnauthenticatedAccessIsDenied()
        {
            string[] tagsOfScenario = new string[] {
                    "authorization"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unauthenticated access is denied", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am not authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I send a GET request to \"/api/exercises\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ExerciseManagementFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ExerciseManagementFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
