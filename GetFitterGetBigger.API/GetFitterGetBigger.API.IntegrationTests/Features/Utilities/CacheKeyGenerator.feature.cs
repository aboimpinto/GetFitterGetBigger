// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.Utilities
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CacheKeyGeneratorFeature : object, Xunit.IClassFixture<CacheKeyGeneratorFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public CacheKeyGeneratorFeature(CacheKeyGeneratorFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Utilities", "Cache Key Generator", "  As a fitness application\n  I want to generate consistent cache keys for referen" +
                    "ce tables\n  So that I can efficiently cache and retrieve reference data", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate get all cache key")]
        [Xunit.TraitAttribute("FeatureTitle", "Cache Key Generator")]
        [Xunit.TraitAttribute("Description", "Generate get all cache key")]
        [Xunit.TraitAttribute("Category", "utility")]
        [Xunit.TraitAttribute("Category", "cache")]
        public async System.Threading.Tasks.Task GenerateGetAllCacheKey()
        {
            string[] tagsOfScenario = new string[] {
                    "utility",
                    "cache"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate get all cache key", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.WhenAsync("I generate a get all cache key for table \"DifficultyLevels\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:DifficultyLevels:GetAll\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate get by ID cache key")]
        [Xunit.TraitAttribute("FeatureTitle", "Cache Key Generator")]
        [Xunit.TraitAttribute("Description", "Generate get by ID cache key")]
        [Xunit.TraitAttribute("Category", "utility")]
        [Xunit.TraitAttribute("Category", "cache")]
        public async System.Threading.Tasks.Task GenerateGetByIDCacheKey()
        {
            string[] tagsOfScenario = new string[] {
                    "utility",
                    "cache"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate get by ID cache key", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.WhenAsync("I generate a get by ID cache key for table \"Equipment\" with ID \"equipment-12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:Equipment:GetById:equipment-12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate get by value cache key")]
        [Xunit.TraitAttribute("FeatureTitle", "Cache Key Generator")]
        [Xunit.TraitAttribute("Description", "Generate get by value cache key")]
        [Xunit.TraitAttribute("Category", "utility")]
        [Xunit.TraitAttribute("Category", "cache")]
        public async System.Threading.Tasks.Task GenerateGetByValueCacheKey()
        {
            string[] tagsOfScenario = new string[] {
                    "utility",
                    "cache"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate get by value cache key", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.WhenAsync("I generate a get by value cache key for table \"MuscleGroups\" with value \"Biceps\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:MuscleGroups:GetByValue:biceps\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get by value key normalizes to lowercase")]
        [Xunit.TraitAttribute("FeatureTitle", "Cache Key Generator")]
        [Xunit.TraitAttribute("Description", "Get by value key normalizes to lowercase")]
        [Xunit.TraitAttribute("Category", "utility")]
        [Xunit.TraitAttribute("Category", "cache")]
        public async System.Threading.Tasks.Task GetByValueKeyNormalizesToLowercase()
        {
            string[] tagsOfScenario = new string[] {
                    "utility",
                    "cache"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get by value key normalizes to lowercase", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.WhenAsync("I generate a get by value cache key for table \"BodyParts\" with value \"CHEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:BodyParts:GetByValue:chest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.WhenAsync("I generate a get by value cache key for table \"BodyParts\" with value \"Chest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:BodyParts:GetByValue:chest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.WhenAsync("I generate a get by value cache key for table \"BodyParts\" with value \"chest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:BodyParts:GetByValue:chest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get by value key handles null value")]
        [Xunit.TraitAttribute("FeatureTitle", "Cache Key Generator")]
        [Xunit.TraitAttribute("Description", "Get by value key handles null value")]
        [Xunit.TraitAttribute("Category", "utility")]
        [Xunit.TraitAttribute("Category", "cache")]
        public async System.Threading.Tasks.Task GetByValueKeyHandlesNullValue()
        {
            string[] tagsOfScenario = new string[] {
                    "utility",
                    "cache"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get by value key handles null value", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.WhenAsync("I generate a get by value cache key for table \"MetricTypes\" with null value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:MetricTypes:GetByValue:\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate table pattern cache key")]
        [Xunit.TraitAttribute("FeatureTitle", "Cache Key Generator")]
        [Xunit.TraitAttribute("Description", "Generate table pattern cache key")]
        [Xunit.TraitAttribute("Category", "utility")]
        [Xunit.TraitAttribute("Category", "cache")]
        public async System.Threading.Tasks.Task GenerateTablePatternCacheKey()
        {
            string[] tagsOfScenario = new string[] {
                    "utility",
                    "cache"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate table pattern cache key", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.WhenAsync("I generate a table pattern cache key for table \"MovementPatterns\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the cache key should be \"ReferenceTable:MovementPatterns:\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="All methods work with all table names")]
        [Xunit.TraitAttribute("FeatureTitle", "Cache Key Generator")]
        [Xunit.TraitAttribute("Description", "All methods work with all table names")]
        [Xunit.TraitAttribute("Category", "utility")]
        [Xunit.TraitAttribute("Category", "cache")]
        [Xunit.InlineDataAttribute("DifficultyLevels", new string[0])]
        [Xunit.InlineDataAttribute("KineticChainTypes", new string[0])]
        [Xunit.InlineDataAttribute("BodyParts", new string[0])]
        [Xunit.InlineDataAttribute("MuscleRoles", new string[0])]
        [Xunit.InlineDataAttribute("Equipment", new string[0])]
        [Xunit.InlineDataAttribute("MetricTypes", new string[0])]
        [Xunit.InlineDataAttribute("MovementPatterns", new string[0])]
        [Xunit.InlineDataAttribute("MuscleGroups", new string[0])]
        public async System.Threading.Tasks.Task AllMethodsWorkWithAllTableNames(string tableName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "utility",
                    "cache"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("tableName", tableName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All methods work with all table names", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.WhenAsync(string.Format("I generate cache keys for table \"{0}\"", tableName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync(string.Format("the get all cache key should contain \"{0}\" and start with \"ReferenceTable:\" and e" +
                            "nd with \":GetAll\"", tableName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync(string.Format("the get by ID cache key should contain \"{0}\" and contain \":GetById:\"", tableName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync(string.Format("the get by value cache key should contain \"{0}\" and contain \":GetByValue:\"", tableName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync(string.Format("the table pattern cache key should start with \"ReferenceTable:\" and end with \"{0}" +
                            ":\"", tableName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CacheKeyGeneratorFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CacheKeyGeneratorFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
