// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.WorkoutTemplate
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WorkoutTemplateCaseInsensitiveSearchFeature : object, Xunit.IClassFixture<WorkoutTemplateCaseInsensitiveSearchFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public WorkoutTemplateCaseInsensitiveSearchFeature(WorkoutTemplateCaseInsensitiveSearchFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/WorkoutTemplate", "WorkoutTemplate Case Insensitive Search", "  As a fitness application\n  I want to search for workout templates using case-in" +
                    "sensitive patterns\n  So that users can find templates regardless of case", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("I am authenticated as a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            await testRunner.AndAsync("the database has reference data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Duration",
                        "Tags"});
            table14.AddRow(new string[] {
                        "Leg Burner I",
                        "High intensity leg workout",
                        "45",
                        "leg,intensity"});
            table14.AddRow(new string[] {
                        "Leg Burner II",
                        "Advanced leg workout",
                        "60",
                        "leg,advanced"});
            table14.AddRow(new string[] {
                        "Upper Body Burner",
                        "Upper body strength training",
                        "45",
                        "upper,strength"});
            table14.AddRow(new string[] {
                        "Core Crusher",
                        "Core strengthening routine",
                        "30",
                        "core,abs"});
            table14.AddRow(new string[] {
                        "Full Body Blast",
                        "Complete body workout",
                        "60",
                        "full,complete"});
            await testRunner.AndAsync("the following workout templates exist for case insensitive search:", ((string)(null)), table14, "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search with lowercase pattern finds mixed case templates", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkoutTemplate Case Insensitive Search")]
        [Xunit.TraitAttribute("Description", "Search with lowercase pattern finds mixed case templates")]
        [Xunit.TraitAttribute("Category", "workouttemplate")]
        [Xunit.TraitAttribute("Category", "search")]
        public async System.Threading.Tasks.Task SearchWithLowercasePatternFindsMixedCaseTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "workouttemplate",
                    "search",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with lowercase pattern finds mixed case templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/workout-templates?namePattern=leg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"totalCount\" with value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"items\" as array with 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table15.AddRow(new string[] {
                            "Leg Burner I"});
                table15.AddRow(new string[] {
                            "Leg Burner II"});
                await testRunner.AndAsync("the response items should contain templates with names:", ((string)(null)), table15, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search with uppercase pattern finds mixed case templates", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkoutTemplate Case Insensitive Search")]
        [Xunit.TraitAttribute("Description", "Search with uppercase pattern finds mixed case templates")]
        [Xunit.TraitAttribute("Category", "workouttemplate")]
        [Xunit.TraitAttribute("Category", "search")]
        public async System.Threading.Tasks.Task SearchWithUppercasePatternFindsMixedCaseTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "workouttemplate",
                    "search",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with uppercase pattern finds mixed case templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/workout-templates?namePattern=BURNER\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"totalCount\" with value \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"items\" as array with 3 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table16.AddRow(new string[] {
                            "Leg Burner I"});
                table16.AddRow(new string[] {
                            "Leg Burner II"});
                table16.AddRow(new string[] {
                            "Upper Body Burner"});
                await testRunner.AndAsync("the response items should contain templates with names:", ((string)(null)), table16, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search with mixed case pattern finds all variations", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkoutTemplate Case Insensitive Search")]
        [Xunit.TraitAttribute("Description", "Search with mixed case pattern finds all variations")]
        [Xunit.TraitAttribute("Category", "workouttemplate")]
        [Xunit.TraitAttribute("Category", "search")]
        public async System.Threading.Tasks.Task SearchWithMixedCasePatternFindsAllVariations()
        {
            string[] tagsOfScenario = new string[] {
                    "workouttemplate",
                    "search",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search with mixed case pattern finds all variations", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Duration",
                            "Tags"});
                table17.AddRow(new string[] {
                            "LEG CRUSHER",
                            "All uppercase",
                            "45",
                            "leg,upper"});
                table17.AddRow(new string[] {
                            "leg destroyer",
                            "All lowercase",
                            "45",
                            "leg,lower"});
                table17.AddRow(new string[] {
                            "Leg Workout",
                            "Title case",
                            "30",
                            "leg,basic"});
                table17.AddRow(new string[] {
                            "LEGENDARY Legs",
                            "Mixed case",
                            "50",
                            "leg,legend"});
                await testRunner.GivenAsync("the following additional workout templates exist for case insensitive search:", ((string)(null)), table17, "Given ");
                await testRunner.WhenAsync("I send a GET request to \"/api/workout-templates?namePattern=LeG\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"totalCount\" with value \"6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table18.AddRow(new string[] {
                            "Leg Burner I"});
                table18.AddRow(new string[] {
                            "Leg Burner II"});
                table18.AddRow(new string[] {
                            "LEG CRUSHER"});
                table18.AddRow(new string[] {
                            "leg destroyer"});
                table18.AddRow(new string[] {
                            "Leg Workout"});
                table18.AddRow(new string[] {
                            "LEGENDARY Legs"});
                await testRunner.AndAsync("the response items should contain templates with names:", ((string)(null)), table18, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Partial match works with case insensitive search", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkoutTemplate Case Insensitive Search")]
        [Xunit.TraitAttribute("Description", "Partial match works with case insensitive search")]
        [Xunit.TraitAttribute("Category", "workouttemplate")]
        [Xunit.TraitAttribute("Category", "search")]
        public async System.Threading.Tasks.Task PartialMatchWorksWithCaseInsensitiveSearch()
        {
            string[] tagsOfScenario = new string[] {
                    "workouttemplate",
                    "search",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial match works with case insensitive search", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/workout-templates?namePattern=burn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"totalCount\" with value \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("all response items should contain \"burn\" in name (case insensitive)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Case insensitive search works with pagination", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkoutTemplate Case Insensitive Search")]
        [Xunit.TraitAttribute("Description", "Case insensitive search works with pagination")]
        [Xunit.TraitAttribute("Category", "workouttemplate")]
        [Xunit.TraitAttribute("Category", "search")]
        [Xunit.TraitAttribute("Category", "pagination")]
        public async System.Threading.Tasks.Task CaseInsensitiveSearchWorksWithPagination()
        {
            string[] tagsOfScenario = new string[] {
                    "workouttemplate",
                    "search",
                    "pagination",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Case insensitive search works with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.WhenAsync("I send a GET request to \"/api/workout-templates?namePattern=burner&page=1&pageSiz" +
                        "e=2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"totalCount\" with value \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"currentPage\" with value \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"pageSize\" with value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the response should have property \"items\" as array with 2 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I send a GET request to \"/api/workout-templates?namePattern=burner&page=2&pageSiz" +
                        "e=2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should have property \"items\" as array with 1 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await WorkoutTemplateCaseInsensitiveSearchFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await WorkoutTemplateCaseInsensitiveSearchFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
