// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GetFitterGetBigger.API.IntegrationTests.Features.WorkoutTemplate
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "WorkoutTemplate")]
    [Xunit.TraitAttribute("Category", "Management")]
    public partial class WorkoutTemplateManagementFeature : object, Xunit.IClassFixture<WorkoutTemplateManagementFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "WorkoutTemplate",
                "Management"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public WorkoutTemplateManagementFeature(WorkoutTemplateManagementFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/WorkoutTemplate", "Workout Template Management", "    As a Personal Trainer\n    I want to create and manage workout templates\n    S" +
                    "o that I can provide structured training programs to my clients", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
            await testRunner.GivenAsync("the database is initialized with test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Value",
                        "Description",
                        "DisplayOrder"});
            table20.AddRow(new string[] {
                        "DRAFT",
                        "Template under construction",
                        "1"});
            table20.AddRow(new string[] {
                        "PRODUCTION",
                        "Active template for use",
                        "2"});
            table20.AddRow(new string[] {
                        "ARCHIVED",
                        "Retired template",
                        "3"});
            await testRunner.AndAsync("the following workout states exist:", ((string)(null)), table20, "And ");
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description"});
            table21.AddRow(new string[] {
                        "Upper Body - Push",
                        "Push exercises targeting chest, shoulders, triceps"});
            table21.AddRow(new string[] {
                        "Upper Body - Pull",
                        "Pull exercises targeting back and biceps"});
            table21.AddRow(new string[] {
                        "Lower Body",
                        "Lower body exercises for legs and glutes"});
            table21.AddRow(new string[] {
                        "Core",
                        "Core stability and strength exercises"});
            table21.AddRow(new string[] {
                        "Full Body",
                        "Compound exercises engaging multiple muscle groups"});
            await testRunner.AndAsync("the following workout categories exist:", ((string)(null)), table21, "And ");
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "DisplayOrder"});
            table22.AddRow(new string[] {
                        "Beginner",
                        "For beginners",
                        "1"});
            table22.AddRow(new string[] {
                        "Intermediate",
                        "For intermediate",
                        "2"});
            table22.AddRow(new string[] {
                        "Advanced",
                        "For advanced",
                        "3"});
            await testRunner.AndAsync("the following difficulty levels exist:", ((string)(null)), table22, "And ");
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description"});
            table23.AddRow(new string[] {
                        "Muscular Strength",
                        "Build strength"});
            table23.AddRow(new string[] {
                        "Muscular Hypertrophy",
                        "Build muscle mass"});
            table23.AddRow(new string[] {
                        "Muscular Endurance",
                        "Improve endurance"});
            await testRunner.AndAsync("the following workout objectives exist:", ((string)(null)), table23, "And ");
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new workout template")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Create a new workout template")]
        public async System.Threading.Tasks.Task CreateANewWorkoutTemplate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new workout template", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table24.AddRow(new string[] {
                            "Name",
                            "Full Body Strength Day"});
                table24.AddRow(new string[] {
                            "Description",
                            "Focus on compound movements"});
                table24.AddRow(new string[] {
                            "CategoryId",
                            "Full Body"});
                table24.AddRow(new string[] {
                            "DifficultyId",
                            "Intermediate"});
                table24.AddRow(new string[] {
                            "EstimatedDurationMinutes",
                            "60"});
                table24.AddRow(new string[] {
                            "IsPublic",
                            "true"});
                await testRunner.WhenAsync("I create a new workout template with:", ((string)(null)), table24, "When ");
                await testRunner.ThenAsync("the workout template should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the template state should be \"DRAFT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table25.AddRow(new string[] {
                            "Name",
                            "Full Body Strength Day"});
                table25.AddRow(new string[] {
                            "WorkoutState",
                            "DRAFT"});
                table25.AddRow(new string[] {
                            "EstimatedDurationMinutes",
                            "60"});
                await testRunner.AndAsync("the response should contain:", ((string)(null)), table25, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get workout template by ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Get workout template by ID")]
        public async System.Threading.Tasks.Task GetWorkoutTemplateByID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get workout template by ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("a workout template exists with ID \"workouttemplate-03000001-0000-0000-0000-000000" +
                        "000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I request the workout template by ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response status should be OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain the workout template details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property"});
                table26.AddRow(new string[] {
                            "Category"});
                table26.AddRow(new string[] {
                            "Difficulty"});
                table26.AddRow(new string[] {
                            "WorkoutState"});
                table26.AddRow(new string[] {
                            "Exercises"});
                table26.AddRow(new string[] {
                            "Objectives"});
                await testRunner.AndAsync("the response should include navigation properties:", ((string)(null)), table26, "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update an existing workout template")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Update an existing workout template")]
        public async System.Threading.Tasks.Task UpdateAnExistingWorkoutTemplate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an existing workout template", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created a workout template in DRAFT state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table27.AddRow(new string[] {
                            "Name",
                            "Updated Strength Day"});
                table27.AddRow(new string[] {
                            "Description",
                            "Updated description"});
                await testRunner.WhenAsync("I update the workout template with:", ((string)(null)), table27, "When ");
                await testRunner.ThenAsync("the workout template should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the response should contain the updated values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete a workout template")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Delete a workout template")]
        public async System.Threading.Tasks.Task DeleteAWorkoutTemplate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a workout template", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created a workout template in DRAFT state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I delete the workout template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the template should be soft deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the template should not appear in active template lists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transition template from DRAFT to PRODUCTION")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Transition template from DRAFT to PRODUCTION")]
        public async System.Threading.Tasks.Task TransitionTemplateFromDRAFTToPRODUCTION()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transition template from DRAFT to PRODUCTION", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created a complete workout template in DRAFT state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I change the template state to \"PRODUCTION\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the state should change to \"PRODUCTION\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the template should be available for execution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Archive a workout template")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Archive a workout template")]
        public async System.Threading.Tasks.Task ArchiveAWorkoutTemplate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archive a workout template", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have a workout template in PRODUCTION state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I change the template state to \"ARCHIVED\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the state should change to \"ARCHIVED\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the template should not appear in active template lists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get paged workout templates", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Get paged workout templates")]
        public async System.Threading.Tasks.Task GetPagedWorkoutTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get paged workout templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created 15 workout templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I request my templates with page size 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive 10 templates in the first page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the total count should be 15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search templates by name pattern", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Search templates by name pattern")]
        public async System.Threading.Tasks.Task SearchTemplatesByNamePattern()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search templates by name pattern", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name"});
                table28.AddRow(new string[] {
                            "Upper Body Power"});
                table28.AddRow(new string[] {
                            "Lower Body Strength"});
                table28.AddRow(new string[] {
                            "Upper Body Endurance"});
                await testRunner.GivenAsync("the following workout templates exist:", ((string)(null)), table28, "Given ");
                await testRunner.WhenAsync("I search for templates with name containing \"Upper\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("I should receive 2 templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("all template names should contain \"Upper\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter templates by category", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Filter templates by category")]
        public async System.Threading.Tasks.Task FilterTemplatesByCategory()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter templates by category", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("workout templates exist in different categories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I filter templates by category \"Full Body\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("all returned templates should have category \"Full Body\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter templates by difficulty", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Filter templates by difficulty")]
        public async System.Threading.Tasks.Task FilterTemplatesByDifficulty()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter templates by difficulty", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("workout templates exist with different difficulty levels", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I filter templates by difficulty \"Intermediate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("all returned templates should have difficulty \"Intermediate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate template name length")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Validate template name length")]
        [Xunit.InlineDataAttribute("2", "fail", new string[0])]
        [Xunit.InlineDataAttribute("3", "pass", new string[0])]
        [Xunit.InlineDataAttribute("100", "pass", new string[0])]
        [Xunit.InlineDataAttribute("101", "fail", new string[0])]
        public async System.Threading.Tasks.Task ValidateTemplateNameLength(string length, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("length", length);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate template name length", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync(string.Format("I create a workout template with name of {0} characters", length), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync(string.Format("the operation should {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate duration range")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Validate duration range")]
        [Xunit.InlineDataAttribute("4", "fail", new string[0])]
        [Xunit.InlineDataAttribute("5", "pass", new string[0])]
        [Xunit.InlineDataAttribute("300", "pass", new string[0])]
        [Xunit.InlineDataAttribute("301", "fail", new string[0])]
        public async System.Threading.Tasks.Task ValidateDurationRange(string duration, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("duration", duration);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate duration range", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync(string.Format("I create a workout template with duration {0} minutes", duration), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync(string.Format("the operation should {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent duplicate template names globally")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Prevent duplicate template names globally")]
        public async System.Threading.Tasks.Task PreventDuplicateTemplateNamesGlobally()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent duplicate template names globally", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have created a template named \"My Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I try to create another template named \"My Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the operation should fail with status \"Conflict\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("the error message should contain \"already exists\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Duplicate a workout template", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Duplicate a workout template")]
        public async System.Threading.Tasks.Task DuplicateAWorkoutTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate a workout template", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("I am a Personal Trainer with ID \"user-01000001-0000-0000-0000-000000000001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.AndAsync("I have an existing workout template \"Original Full Body Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.WhenAsync("I duplicate the template with name \"Duplicated Full Body Workout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("a new template should be created in DRAFT state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("all exercises and configurations should be copied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the original template should remain unchanged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle large number of templates efficiently", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Workout Template Management")]
        [Xunit.TraitAttribute("Description", "Handle large number of templates efficiently")]
        public async System.Threading.Tasks.Task HandleLargeNumberOfTemplatesEfficiently()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle large number of templates efficiently", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                await this.FeatureBackgroundAsync();
                await testRunner.GivenAsync("1000 workout templates exist in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                await testRunner.WhenAsync("I request templates with pagination (page 1, size 20)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                await testRunner.ThenAsync("the response should return within 500ms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                await testRunner.AndAsync("I should receive exactly 20 templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                await testRunner.AndAsync("the total count should be 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await WorkoutTemplateManagementFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await WorkoutTemplateManagementFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
