using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using FluentAssertions;
using GetFitterGetBigger.API.IntegrationTests.TestInfrastructure.Fixtures;
using GetFitterGetBigger.API.Models;
using GetFitterGetBigger.API.Models.Entities;
using GetFitterGetBigger.API.Models.SpecializedIds;
using GetFitterGetBigger.API.Repositories.Implementations;
using Microsoft.EntityFrameworkCore;
using TechTalk.SpecFlow;

namespace GetFitterGetBigger.API.IntegrationTests.StepDefinitions.Equipment;

[Binding]
public class EquipmentRepositorySteps
{
    private readonly ScenarioContext _scenarioContext;
    private readonly PostgreSqlTestFixture _fixture;
    private IEnumerable<Models.Entities.Equipment>? _equipmentResults;
    private Models.Entities.Equipment? _equipmentResult;
    private bool? _booleanResult;

    public EquipmentRepositorySteps(ScenarioContext scenarioContext, PostgreSqlTestFixture fixture)
    {
        _scenarioContext = scenarioContext;
        _fixture = fixture;
    }

    [Given(@"I have equipment ""(.*)"" that is active")]
    public async Task GivenIHaveEquipmentThatIsActive(string equipmentName)
    {
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var equipment = GetFitterGetBigger.API.Models.Entities.Equipment.Handler.Create(
                EquipmentId.New(), equipmentName, true, DateTime.UtcNow.AddDays(-10));
            
            context.Equipment.Add(equipment);
            await context.SaveChangesAsync();
            
            _scenarioContext.Set(equipment.Id, $"Equipment_{equipmentName}_Id");
        });
    }

    [Given(@"I have equipment ""(.*)"" that is inactive")]
    public async Task GivenIHaveEquipmentThatIsInactive(string equipmentName)
    {
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var equipment = GetFitterGetBigger.API.Models.Entities.Equipment.Handler.Create(
                EquipmentId.New(), equipmentName, false, DateTime.UtcNow.AddDays(-10));
            
            context.Equipment.Add(equipment);
            await context.SaveChangesAsync();
            
            _scenarioContext.Set(equipment.Id, $"Equipment_{equipmentName}_Id");
        });
    }

    [Given(@"I have an exercise ""(.*)"" that uses equipment ""(.*)""")]
    public async Task GivenIHaveAnExerciseThatUsesEquipment(string exerciseName, string equipmentName)
    {
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            // Get equipment ID
            var equipmentId = _scenarioContext.Get<EquipmentId>($"Equipment_{equipmentName}_Id");

            // Create difficulty level if not exists
            var difficulty = await context.DifficultyLevels.FirstOrDefaultAsync();
            if (difficulty == null)
            {
                difficulty = DifficultyLevel.Handler.Create(
                    DifficultyLevelId.New(), "Beginner", "For beginners", 1, true);
                context.DifficultyLevels.Add(difficulty);
                await context.SaveChangesAsync();
            }

            // Create exercise
            var exercise = GetFitterGetBigger.API.Models.Entities.Exercise.Handler.CreateNew(
                exerciseName, "Exercise description", null, null, false, difficulty.Id);
            context.Exercises.Add(exercise);
            await context.SaveChangesAsync();

            // Link exercise to equipment
            var exerciseEquipment = ExerciseEquipment.Handler.Create(exercise.Id, equipmentId);
            context.ExerciseEquipment.Add(exerciseEquipment);
            await context.SaveChangesAsync();

            _scenarioContext.Set(exercise.Id, $"Exercise_{exerciseName}_Id");
        });
    }

    [When(@"I get all equipment from repository")]
    public async Task WhenIGetAllEquipmentFromRepository()
    {
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _equipmentResults = await repository.GetAllAsync();
        });
    }

    [When(@"I get equipment by ID for ""(.*)""")]
    public async Task WhenIGetEquipmentByIdFor(string equipmentName)
    {
        var equipmentId = _scenarioContext.Get<EquipmentId>($"Equipment_{equipmentName}_Id");
        
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _equipmentResult = await repository.GetByIdAsync(equipmentId);
        });
    }

    [When(@"I get equipment by non-existent ID")]
    public async Task WhenIGetEquipmentByNonExistentId()
    {
        var nonExistentId = EquipmentId.New();
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _equipmentResult = await repository.GetByIdAsync(nonExistentId);
        });
    }

    [When(@"I get equipment by name ""(.*)""")]
    public async Task WhenIGetEquipmentByName(string equipmentName)
    {
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _equipmentResult = await repository.GetByNameAsync(equipmentName);
        });
    }

    [When(@"I create equipment ""(.*)"" via repository")]
    public async Task WhenICreateEquipmentViaRepository(string equipmentName)
    {
        var newEquipment = GetFitterGetBigger.API.Models.Entities.Equipment.Handler.CreateNew(equipmentName);
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _equipmentResult = await repository.CreateAsync(newEquipment);
        });
    }

    [When(@"I update equipment ""(.*)"" to name ""(.*)"" via repository")]
    public async Task WhenIUpdateEquipmentToNameViaRepository(string originalName, string newName)
    {
        var equipmentIdString = _scenarioContext.Get<string>($"Equipment_{originalName}_Id");
        var equipmentId = EquipmentId.From(Guid.Parse(equipmentIdString));
        
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var equipment = await context.Equipment.FindAsync(equipmentId);
            equipment.Should().NotBeNull();
            
            var updated = GetFitterGetBigger.API.Models.Entities.Equipment.Handler.Update(equipment!, newName);
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _equipmentResult = await repository.UpdateAsync(updated);
        });
    }

    [When(@"I deactivate equipment ""(.*)"" via repository")]
    public async Task WhenIDeactivateEquipmentViaRepository(string equipmentName)
    {
        var equipmentId = _scenarioContext.Get<EquipmentId>($"Equipment_{equipmentName}_Id");
        
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _booleanResult = await repository.DeactivateAsync(equipmentId);
        });
    }

    [When(@"I deactivate equipment by non-existent ID via repository")]
    public async Task WhenIDeactivateEquipmentByNonExistentIdViaRepository()
    {
        var nonExistentId = EquipmentId.New();
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _booleanResult = await repository.DeactivateAsync(nonExistentId);
        });
    }

    [When(@"I check if equipment ""(.*)"" exists via repository")]
    public async Task WhenICheckIfEquipmentExistsViaRepository(string equipmentName)
    {
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _booleanResult = await repository.ExistsAsync(equipmentName);
        });
    }

    [When(@"I check if equipment ""(.*)"" exists excluding its own ID via repository")]
    public async Task WhenICheckIfEquipmentExistsExcludingItsOwnIdViaRepository(string equipmentName)
    {
        var equipmentId = _scenarioContext.Get<EquipmentId>($"Equipment_{equipmentName}_Id");
        
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _booleanResult = await repository.ExistsAsync(equipmentName, equipmentId);
        });
    }

    [When(@"I check if equipment ""(.*)"" is in use via repository")]
    public async Task WhenICheckIfEquipmentIsInUseViaRepository(string equipmentName)
    {
        var equipmentId = _scenarioContext.Get<EquipmentId>($"Equipment_{equipmentName}_Id");
        
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var repository = new EquipmentRepository();
            repository.SetContext(context);
            _booleanResult = await repository.IsInUseAsync(equipmentId);
        });
    }

    [Then(@"I should receive (\d+) equipment items")]
    public void ThenIShouldReceiveEquipmentItems(int expectedCount)
    {
        _equipmentResults.Should().NotBeNull();
        _equipmentResults!.Count().Should().Be(expectedCount);
    }

    [Then(@"all equipment should be active")]
    public void ThenAllEquipmentShouldBeActive()
    {
        _equipmentResults.Should().NotBeNull();
        _equipmentResults.Should().OnlyContain(e => e.IsActive);
    }

    [Then(@"the equipment should not include ""(.*)""")]
    public void ThenTheEquipmentShouldNotInclude(string equipmentName)
    {
        _equipmentResults.Should().NotBeNull();
        _equipmentResults.Should().NotContain(e => e.Name == equipmentName);
    }

    [Then(@"I should receive the equipment")]
    public void ThenIShouldReceiveTheEquipment()
    {
        _equipmentResult.Should().NotBeNull();
    }

    [Then(@"I should receive no equipment")]
    public void ThenIShouldReceiveNoEquipment()
    {
        _equipmentResult.Should().BeNull();
    }

    [Then(@"the equipment name should be ""(.*)""")]
    public void ThenTheEquipmentNameShouldBe(string expectedName)
    {
        _equipmentResult.Should().NotBeNull();
        _equipmentResult!.Name.Should().Be(expectedName);
    }

    [Then(@"the equipment should be active")]
    public void ThenTheEquipmentShouldBeActive()
    {
        _equipmentResult.Should().NotBeNull();
        _equipmentResult!.IsActive.Should().BeTrue();
    }

    [Then(@"the equipment should be created successfully")]
    public void ThenTheEquipmentShouldBeCreatedSuccessfully()
    {
        _equipmentResult.Should().NotBeNull();
    }

    [Then(@"the equipment should be persisted in database")]
    public async Task ThenTheEquipmentShouldBePersistedInDatabase()
    {
        _equipmentResult.Should().NotBeNull();
        
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            var saved = await context.Equipment.FindAsync(_equipmentResult!.Id);
            saved.Should().NotBeNull();
            saved!.Name.Should().Be(_equipmentResult.Name);
        });
    }

    [Then(@"the equipment should be updated successfully")]
    public void ThenTheEquipmentShouldBeUpdatedSuccessfully()
    {
        _equipmentResult.Should().NotBeNull();
    }

    [Then(@"the equipment updated timestamp should be set")]
    public void ThenTheEquipmentUpdatedTimestampShouldBeSet()
    {
        _equipmentResult.Should().NotBeNull();
        _equipmentResult!.UpdatedAt.Should().NotBeNull();
    }

    [Then(@"the deactivation should succeed")]
    public void ThenTheDeactivationShouldSucceed()
    {
        _booleanResult.Should().NotBeNull();
        _booleanResult!.Value.Should().BeTrue();
    }

    [Then(@"the deactivation should fail")]
    public void ThenTheDeactivationShouldFail()
    {
        _booleanResult.Should().NotBeNull();
        _booleanResult!.Value.Should().BeFalse();
    }

    [Then(@"the equipment should be inactive")]
    public async Task ThenTheEquipmentShouldBeInactive()
    {
        await _fixture.ExecuteDbContextAsync(async context =>
        {
            // We need to get the equipment ID from the last deactivation operation
            // This assumes the equipment name was stored in scenario context
            var equipmentToCheck = await context.Equipment.FirstOrDefaultAsync(e => !e.IsActive);
            equipmentToCheck.Should().NotBeNull();
            equipmentToCheck!.IsActive.Should().BeFalse();
            equipmentToCheck.UpdatedAt.Should().NotBeNull();
        });
    }

    [Then(@"the existence check should return (true|false)")]
    public void ThenTheExistenceCheckShouldReturn(bool expectedResult)
    {
        _booleanResult.Should().NotBeNull();
        _booleanResult!.Value.Should().Be(expectedResult);
    }

    [Then(@"the in use check should return (true|false)")]
    public void ThenTheInUseCheckShouldReturn(bool expectedResult)
    {
        _booleanResult.Should().NotBeNull();
        _booleanResult!.Value.Should().Be(expectedResult);
    }
}